// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cstrike15_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VGUIMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_Subkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VGUIMenu_Subkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Geiger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Geiger_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Train_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Train_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HudText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HudText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SayText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SayText2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_TextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_TextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HudMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HudMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Shake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Shake_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Fade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Fade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Rumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Rumble_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CloseCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaptionDirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CloseCaptionDirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RawAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RawAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoiceMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_PlayerMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoiceMask_PlayerMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RadioText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RadioText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_KeyHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_KeyHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEconItemPreviewDataBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_Sticker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEconItemPreviewDataBlock_Sticker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendPlayerItemDrops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendPlayerItemDrops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendPlayerItemFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendPlayerItemFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ReloadEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ReloadEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AdjustMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AdjustMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ReportHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ReportHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_KillCam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_KillCam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DesiredTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DesiredTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CurrentTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AchievementEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AchievementEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchEndConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MatchEndConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_PlayerStatsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DisplayInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DisplayInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_XRankGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankUpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_XRankUpd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CallVoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CallVoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VotePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VotePass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendLastKillerDamageToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendLastKillerDamageToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ItemPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ShowMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ShowMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_BarTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_BarTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AmmoDenied_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AmmoDenied_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MarkAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MarkAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchStatsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MatchStatsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ItemDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_GlowPropTurnOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_GlowPropTurnOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundBackupFilenames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundBackupFilenames_reflection_ = NULL;
const ::google::protobuf::Descriptor* XpProgressData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XpProgressData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_XpUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_XpUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_QuestProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_QuestProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_AccountEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_AccountEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ScoreLeaderboardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ScoreLeaderboardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDecalDigitalSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDecalDigitalSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_PlayerDecalDigitalSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_WeaponSound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_WeaponSound_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_UpdateScreenHealthBar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_UpdateScreenHealthBar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_EntityOutlineHighlight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_EntityOutlineHighlight_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SSUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SSUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SurvivalStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Fact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SurvivalStats_Fact_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Placement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SurvivalStats_Placement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SurvivalStats_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_EndOfMatchAllPlayersData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_RisEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RoundImpactScoreData_InitialConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentRoundOdds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CurrentRoundOdds_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeepPlayerStatsEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeepPlayerStatsEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeepPlayerMatchEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeepPlayerMatchEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_ClientDeepStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DeepStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DeepStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpAddressMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpAddressMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentMatchDraft_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPreMatchInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPreMatchInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPreMatchInfoData_TeamStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPreMatchInfoData_TeamStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankRevealAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankRevealAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ResetHud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ResetHud_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_GameTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_GameTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RequestState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_StopSpectatorMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_StopSpectatorMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DisconnectToLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DisconnectToLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_WarmupHasEnded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_WarmupHasEnded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ClientInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECstrike15UserMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECSUsrMsg_DisconnectToLobby_Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cstrike15_5fusermessages_2eproto() {
  protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cstrike15_usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CCSUsrMsg_VGUIMenu_descriptor_ = file->message_type(0);
  static const int CCSUsrMsg_VGUIMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, subkeys_),
  };
  CCSUsrMsg_VGUIMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VGUIMenu_descriptor_,
      CCSUsrMsg_VGUIMenu::default_instance_,
      CCSUsrMsg_VGUIMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VGUIMenu));
  CCSUsrMsg_VGUIMenu_Subkey_descriptor_ = CCSUsrMsg_VGUIMenu_descriptor_->nested_type(0);
  static const int CCSUsrMsg_VGUIMenu_Subkey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, str_),
  };
  CCSUsrMsg_VGUIMenu_Subkey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VGUIMenu_Subkey_descriptor_,
      CCSUsrMsg_VGUIMenu_Subkey::default_instance_,
      CCSUsrMsg_VGUIMenu_Subkey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VGUIMenu_Subkey));
  CCSUsrMsg_Geiger_descriptor_ = file->message_type(1);
  static const int CCSUsrMsg_Geiger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, range_),
  };
  CCSUsrMsg_Geiger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Geiger_descriptor_,
      CCSUsrMsg_Geiger::default_instance_,
      CCSUsrMsg_Geiger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Geiger));
  CCSUsrMsg_Train_descriptor_ = file->message_type(2);
  static const int CCSUsrMsg_Train_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, train_),
  };
  CCSUsrMsg_Train_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Train_descriptor_,
      CCSUsrMsg_Train::default_instance_,
      CCSUsrMsg_Train_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Train));
  CCSUsrMsg_HudText_descriptor_ = file->message_type(3);
  static const int CCSUsrMsg_HudText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, text_),
  };
  CCSUsrMsg_HudText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HudText_descriptor_,
      CCSUsrMsg_HudText::default_instance_,
      CCSUsrMsg_HudText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HudText));
  CCSUsrMsg_SayText_descriptor_ = file->message_type(4);
  static const int CCSUsrMsg_SayText_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, textallchat_),
  };
  CCSUsrMsg_SayText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SayText_descriptor_,
      CCSUsrMsg_SayText::default_instance_,
      CCSUsrMsg_SayText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SayText));
  CCSUsrMsg_SayText2_descriptor_ = file->message_type(5);
  static const int CCSUsrMsg_SayText2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, textallchat_),
  };
  CCSUsrMsg_SayText2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SayText2_descriptor_,
      CCSUsrMsg_SayText2::default_instance_,
      CCSUsrMsg_SayText2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SayText2));
  CCSUsrMsg_TextMsg_descriptor_ = file->message_type(6);
  static const int CCSUsrMsg_TextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, msg_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, params_),
  };
  CCSUsrMsg_TextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_TextMsg_descriptor_,
      CCSUsrMsg_TextMsg::default_instance_,
      CCSUsrMsg_TextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_TextMsg));
  CCSUsrMsg_HudMsg_descriptor_ = file->message_type(7);
  static const int CCSUsrMsg_HudMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, clr1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, clr2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fade_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fade_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, text_),
  };
  CCSUsrMsg_HudMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HudMsg_descriptor_,
      CCSUsrMsg_HudMsg::default_instance_,
      CCSUsrMsg_HudMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HudMsg));
  CCSUsrMsg_Shake_descriptor_ = file->message_type(8);
  static const int CCSUsrMsg_Shake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, local_amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, duration_),
  };
  CCSUsrMsg_Shake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Shake_descriptor_,
      CCSUsrMsg_Shake::default_instance_,
      CCSUsrMsg_Shake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Shake));
  CCSUsrMsg_Fade_descriptor_ = file->message_type(9);
  static const int CCSUsrMsg_Fade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, clr_),
  };
  CCSUsrMsg_Fade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Fade_descriptor_,
      CCSUsrMsg_Fade::default_instance_,
      CCSUsrMsg_Fade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Fade));
  CCSUsrMsg_Rumble_descriptor_ = file->message_type(10);
  static const int CCSUsrMsg_Rumble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, flags_),
  };
  CCSUsrMsg_Rumble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Rumble_descriptor_,
      CCSUsrMsg_Rumble::default_instance_,
      CCSUsrMsg_Rumble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Rumble));
  CCSUsrMsg_CloseCaption_descriptor_ = file->message_type(11);
  static const int CCSUsrMsg_CloseCaption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, from_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, cctoken_),
  };
  CCSUsrMsg_CloseCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CloseCaption_descriptor_,
      CCSUsrMsg_CloseCaption::default_instance_,
      CCSUsrMsg_CloseCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CloseCaption));
  CCSUsrMsg_CloseCaptionDirect_descriptor_ = file->message_type(12);
  static const int CCSUsrMsg_CloseCaptionDirect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, from_player_),
  };
  CCSUsrMsg_CloseCaptionDirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CloseCaptionDirect_descriptor_,
      CCSUsrMsg_CloseCaptionDirect::default_instance_,
      CCSUsrMsg_CloseCaptionDirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CloseCaptionDirect));
  CCSUsrMsg_SendAudio_descriptor_ = file->message_type(13);
  static const int CCSUsrMsg_SendAudio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, radio_sound_),
  };
  CCSUsrMsg_SendAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendAudio_descriptor_,
      CCSUsrMsg_SendAudio::default_instance_,
      CCSUsrMsg_SendAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendAudio));
  CCSUsrMsg_RawAudio_descriptor_ = file->message_type(14);
  static const int CCSUsrMsg_RawAudio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, voice_filename_),
  };
  CCSUsrMsg_RawAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RawAudio_descriptor_,
      CCSUsrMsg_RawAudio::default_instance_,
      CCSUsrMsg_RawAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RawAudio));
  CCSUsrMsg_VoiceMask_descriptor_ = file->message_type(15);
  static const int CCSUsrMsg_VoiceMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, player_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, player_mod_enable_),
  };
  CCSUsrMsg_VoiceMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoiceMask_descriptor_,
      CCSUsrMsg_VoiceMask::default_instance_,
      CCSUsrMsg_VoiceMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoiceMask));
  CCSUsrMsg_VoiceMask_PlayerMask_descriptor_ = CCSUsrMsg_VoiceMask_descriptor_->nested_type(0);
  static const int CCSUsrMsg_VoiceMask_PlayerMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, game_rules_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, ban_masks_),
  };
  CCSUsrMsg_VoiceMask_PlayerMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoiceMask_PlayerMask_descriptor_,
      CCSUsrMsg_VoiceMask_PlayerMask::default_instance_,
      CCSUsrMsg_VoiceMask_PlayerMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoiceMask_PlayerMask));
  CCSUsrMsg_Damage_descriptor_ = file->message_type(16);
  static const int CCSUsrMsg_Damage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, inflictor_world_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, victim_entindex_),
  };
  CCSUsrMsg_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Damage_descriptor_,
      CCSUsrMsg_Damage::default_instance_,
      CCSUsrMsg_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Damage));
  CCSUsrMsg_RadioText_descriptor_ = file->message_type(17);
  static const int CCSUsrMsg_RadioText_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, msg_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, params_),
  };
  CCSUsrMsg_RadioText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RadioText_descriptor_,
      CCSUsrMsg_RadioText::default_instance_,
      CCSUsrMsg_RadioText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RadioText));
  CCSUsrMsg_HintText_descriptor_ = file->message_type(18);
  static const int CCSUsrMsg_HintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, text_),
  };
  CCSUsrMsg_HintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HintText_descriptor_,
      CCSUsrMsg_HintText::default_instance_,
      CCSUsrMsg_HintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HintText));
  CCSUsrMsg_KeyHintText_descriptor_ = file->message_type(19);
  static const int CCSUsrMsg_KeyHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, hints_),
  };
  CCSUsrMsg_KeyHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_KeyHintText_descriptor_,
      CCSUsrMsg_KeyHintText::default_instance_,
      CCSUsrMsg_KeyHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_KeyHintText));
  CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_ = file->message_type(20);
  static const int CCSUsrMsg_ProcessSpottedEntityUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, new_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, entity_updates_),
  };
  CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_,
      CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate));
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_ = CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, entity_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, angle_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, defuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_defuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_c4_),
  };
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate));
  CEconItemPreviewDataBlock_descriptor_ = file->message_type(21);
  static const int CEconItemPreviewDataBlock_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintwear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, killeaterscoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, killeatervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, customname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, stickers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, dropreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, musicindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, entindex_),
  };
  CEconItemPreviewDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEconItemPreviewDataBlock_descriptor_,
      CEconItemPreviewDataBlock::default_instance_,
      CEconItemPreviewDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEconItemPreviewDataBlock));
  CEconItemPreviewDataBlock_Sticker_descriptor_ = CEconItemPreviewDataBlock_descriptor_->nested_type(0);
  static const int CEconItemPreviewDataBlock_Sticker_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, sticker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, wear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, tint_id_),
  };
  CEconItemPreviewDataBlock_Sticker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEconItemPreviewDataBlock_Sticker_descriptor_,
      CEconItemPreviewDataBlock_Sticker::default_instance_,
      CEconItemPreviewDataBlock_Sticker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEconItemPreviewDataBlock_Sticker));
  CCSUsrMsg_SendPlayerItemDrops_descriptor_ = file->message_type(22);
  static const int CCSUsrMsg_SendPlayerItemDrops_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemDrops, entity_updates_),
  };
  CCSUsrMsg_SendPlayerItemDrops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendPlayerItemDrops_descriptor_,
      CCSUsrMsg_SendPlayerItemDrops::default_instance_,
      CCSUsrMsg_SendPlayerItemDrops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemDrops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemDrops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendPlayerItemDrops));
  CCSUsrMsg_SendPlayerItemFound_descriptor_ = file->message_type(23);
  static const int CCSUsrMsg_SendPlayerItemFound_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, entindex_),
  };
  CCSUsrMsg_SendPlayerItemFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendPlayerItemFound_descriptor_,
      CCSUsrMsg_SendPlayerItemFound::default_instance_,
      CCSUsrMsg_SendPlayerItemFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendPlayerItemFound));
  CCSUsrMsg_ReloadEffect_descriptor_ = file->message_type(24);
  static const int CCSUsrMsg_ReloadEffect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, actanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, origin_z_),
  };
  CCSUsrMsg_ReloadEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ReloadEffect_descriptor_,
      CCSUsrMsg_ReloadEffect::default_instance_,
      CCSUsrMsg_ReloadEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ReloadEffect));
  CCSUsrMsg_AdjustMoney_descriptor_ = file->message_type(25);
  static const int CCSUsrMsg_AdjustMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, amount_),
  };
  CCSUsrMsg_AdjustMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AdjustMoney_descriptor_,
      CCSUsrMsg_AdjustMoney::default_instance_,
      CCSUsrMsg_AdjustMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AdjustMoney));
  CCSUsrMsg_ReportHit_descriptor_ = file->message_type(26);
  static const int CCSUsrMsg_ReportHit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, pos_z_),
  };
  CCSUsrMsg_ReportHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ReportHit_descriptor_,
      CCSUsrMsg_ReportHit::default_instance_,
      CCSUsrMsg_ReportHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReportHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ReportHit));
  CCSUsrMsg_KillCam_descriptor_ = file->message_type(27);
  static const int CCSUsrMsg_KillCam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, obs_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, first_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, second_target_),
  };
  CCSUsrMsg_KillCam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_KillCam_descriptor_,
      CCSUsrMsg_KillCam::default_instance_,
      CCSUsrMsg_KillCam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_KillCam));
  CCSUsrMsg_DesiredTimescale_descriptor_ = file->message_type(28);
  static const int CCSUsrMsg_DesiredTimescale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, desired_timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, duration_realtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, interpolator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, start_blend_time_),
  };
  CCSUsrMsg_DesiredTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DesiredTimescale_descriptor_,
      CCSUsrMsg_DesiredTimescale::default_instance_,
      CCSUsrMsg_DesiredTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DesiredTimescale));
  CCSUsrMsg_CurrentTimescale_descriptor_ = file->message_type(29);
  static const int CCSUsrMsg_CurrentTimescale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, cur_timescale_),
  };
  CCSUsrMsg_CurrentTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CurrentTimescale_descriptor_,
      CCSUsrMsg_CurrentTimescale::default_instance_,
      CCSUsrMsg_CurrentTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CurrentTimescale));
  CCSUsrMsg_AchievementEvent_descriptor_ = file->message_type(30);
  static const int CCSUsrMsg_AchievementEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, user_id_),
  };
  CCSUsrMsg_AchievementEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AchievementEvent_descriptor_,
      CCSUsrMsg_AchievementEvent::default_instance_,
      CCSUsrMsg_AchievementEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AchievementEvent));
  CCSUsrMsg_MatchEndConditions_descriptor_ = file->message_type(31);
  static const int CCSUsrMsg_MatchEndConditions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, fraglimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_maxrounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_winlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_timelimit_),
  };
  CCSUsrMsg_MatchEndConditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MatchEndConditions_descriptor_,
      CCSUsrMsg_MatchEndConditions::default_instance_,
      CCSUsrMsg_MatchEndConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MatchEndConditions));
  CCSUsrMsg_PlayerStatsUpdate_descriptor_ = file->message_type(32);
  static const int CCSUsrMsg_PlayerStatsUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, crc_),
  };
  CCSUsrMsg_PlayerStatsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_PlayerStatsUpdate_descriptor_,
      CCSUsrMsg_PlayerStatsUpdate::default_instance_,
      CCSUsrMsg_PlayerStatsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_PlayerStatsUpdate));
  CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = CCSUsrMsg_PlayerStatsUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_PlayerStatsUpdate_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, delta_),
  };
  CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_,
      CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_,
      CCSUsrMsg_PlayerStatsUpdate_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_PlayerStatsUpdate_Stat));
  CCSUsrMsg_DisplayInventory_descriptor_ = file->message_type(33);
  static const int CCSUsrMsg_DisplayInventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, user_id_),
  };
  CCSUsrMsg_DisplayInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DisplayInventory_descriptor_,
      CCSUsrMsg_DisplayInventory::default_instance_,
      CCSUsrMsg_DisplayInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DisplayInventory));
  CCSUsrMsg_XRankGet_descriptor_ = file->message_type(34);
  static const int CCSUsrMsg_XRankGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, mode_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, controller_),
  };
  CCSUsrMsg_XRankGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_XRankGet_descriptor_,
      CCSUsrMsg_XRankGet::default_instance_,
      CCSUsrMsg_XRankGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_XRankGet));
  CCSUsrMsg_XRankUpd_descriptor_ = file->message_type(35);
  static const int CCSUsrMsg_XRankUpd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, mode_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, ranking_),
  };
  CCSUsrMsg_XRankUpd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_XRankUpd_descriptor_,
      CCSUsrMsg_XRankUpd::default_instance_,
      CCSUsrMsg_XRankUpd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_XRankUpd));
  CCSUsrMsg_CallVoteFailed_descriptor_ = file->message_type(36);
  static const int CCSUsrMsg_CallVoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, time_),
  };
  CCSUsrMsg_CallVoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CallVoteFailed_descriptor_,
      CCSUsrMsg_CallVoteFailed::default_instance_,
      CCSUsrMsg_CallVoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CallVoteFailed));
  CCSUsrMsg_VoteStart_descriptor_ = file->message_type(37);
  static const int CCSUsrMsg_VoteStart_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, details_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, other_team_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, is_yes_no_vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, entidx_target_),
  };
  CCSUsrMsg_VoteStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteStart_descriptor_,
      CCSUsrMsg_VoteStart::default_instance_,
      CCSUsrMsg_VoteStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteStart));
  CCSUsrMsg_VotePass_descriptor_ = file->message_type(38);
  static const int CCSUsrMsg_VotePass_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, details_str_),
  };
  CCSUsrMsg_VotePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VotePass_descriptor_,
      CCSUsrMsg_VotePass::default_instance_,
      CCSUsrMsg_VotePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VotePass));
  CCSUsrMsg_VoteFailed_descriptor_ = file->message_type(39);
  static const int CCSUsrMsg_VoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, reason_),
  };
  CCSUsrMsg_VoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteFailed_descriptor_,
      CCSUsrMsg_VoteFailed::default_instance_,
      CCSUsrMsg_VoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteFailed));
  CCSUsrMsg_VoteSetup_descriptor_ = file->message_type(40);
  static const int CCSUsrMsg_VoteSetup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, potential_issues_),
  };
  CCSUsrMsg_VoteSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteSetup_descriptor_,
      CCSUsrMsg_VoteSetup::default_instance_,
      CCSUsrMsg_VoteSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteSetup));
  CCSUsrMsg_SendLastKillerDamageToClient_descriptor_ = file->message_type(41);
  static const int CCSUsrMsg_SendLastKillerDamageToClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, num_hits_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, damage_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, num_hits_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, damage_taken_),
  };
  CCSUsrMsg_SendLastKillerDamageToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendLastKillerDamageToClient_descriptor_,
      CCSUsrMsg_SendLastKillerDamageToClient::default_instance_,
      CCSUsrMsg_SendLastKillerDamageToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendLastKillerDamageToClient));
  CCSUsrMsg_ServerRankUpdate_descriptor_ = file->message_type(42);
  static const int CCSUsrMsg_ServerRankUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, rank_update_),
  };
  CCSUsrMsg_ServerRankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankUpdate_descriptor_,
      CCSUsrMsg_ServerRankUpdate::default_instance_,
      CCSUsrMsg_ServerRankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankUpdate));
  CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_ = CCSUsrMsg_ServerRankUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_ServerRankUpdate_RankUpdate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, num_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_type_id_),
  };
  CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_,
      CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_,
      CCSUsrMsg_ServerRankUpdate_RankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankUpdate_RankUpdate));
  CCSUsrMsg_ItemPickup_descriptor_ = file->message_type(43);
  static const int CCSUsrMsg_ItemPickup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, item_),
  };
  CCSUsrMsg_ItemPickup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ItemPickup_descriptor_,
      CCSUsrMsg_ItemPickup::default_instance_,
      CCSUsrMsg_ItemPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ItemPickup));
  CCSUsrMsg_ShowMenu_descriptor_ = file->message_type(44);
  static const int CCSUsrMsg_ShowMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, bits_valid_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, display_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, menu_string_),
  };
  CCSUsrMsg_ShowMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ShowMenu_descriptor_,
      CCSUsrMsg_ShowMenu::default_instance_,
      CCSUsrMsg_ShowMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ShowMenu));
  CCSUsrMsg_BarTime_descriptor_ = file->message_type(45);
  static const int CCSUsrMsg_BarTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, time_),
  };
  CCSUsrMsg_BarTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_BarTime_descriptor_,
      CCSUsrMsg_BarTime::default_instance_,
      CCSUsrMsg_BarTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_BarTime));
  CCSUsrMsg_AmmoDenied_descriptor_ = file->message_type(46);
  static const int CCSUsrMsg_AmmoDenied_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, ammoidx_),
  };
  CCSUsrMsg_AmmoDenied_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AmmoDenied_descriptor_,
      CCSUsrMsg_AmmoDenied::default_instance_,
      CCSUsrMsg_AmmoDenied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AmmoDenied));
  CCSUsrMsg_MarkAchievement_descriptor_ = file->message_type(47);
  static const int CCSUsrMsg_MarkAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, achievement_),
  };
  CCSUsrMsg_MarkAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MarkAchievement_descriptor_,
      CCSUsrMsg_MarkAchievement::default_instance_,
      CCSUsrMsg_MarkAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MarkAchievement));
  CCSUsrMsg_MatchStatsUpdate_descriptor_ = file->message_type(48);
  static const int CCSUsrMsg_MatchStatsUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, update_),
  };
  CCSUsrMsg_MatchStatsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MatchStatsUpdate_descriptor_,
      CCSUsrMsg_MatchStatsUpdate::default_instance_,
      CCSUsrMsg_MatchStatsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MatchStatsUpdate));
  CCSUsrMsg_ItemDrop_descriptor_ = file->message_type(49);
  static const int CCSUsrMsg_ItemDrop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, death_),
  };
  CCSUsrMsg_ItemDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ItemDrop_descriptor_,
      CCSUsrMsg_ItemDrop::default_instance_,
      CCSUsrMsg_ItemDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ItemDrop));
  CCSUsrMsg_GlowPropTurnOff_descriptor_ = file->message_type(50);
  static const int CCSUsrMsg_GlowPropTurnOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GlowPropTurnOff, entidx_),
  };
  CCSUsrMsg_GlowPropTurnOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_GlowPropTurnOff_descriptor_,
      CCSUsrMsg_GlowPropTurnOff::default_instance_,
      CCSUsrMsg_GlowPropTurnOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GlowPropTurnOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GlowPropTurnOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_GlowPropTurnOff));
  CCSUsrMsg_RoundBackupFilenames_descriptor_ = file->message_type(51);
  static const int CCSUsrMsg_RoundBackupFilenames_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, nicename_),
  };
  CCSUsrMsg_RoundBackupFilenames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundBackupFilenames_descriptor_,
      CCSUsrMsg_RoundBackupFilenames::default_instance_,
      CCSUsrMsg_RoundBackupFilenames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundBackupFilenames));
  XpProgressData_descriptor_ = file->message_type(52);
  static const int XpProgressData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, xp_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, xp_category_),
  };
  XpProgressData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XpProgressData_descriptor_,
      XpProgressData::default_instance_,
      XpProgressData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XpProgressData));
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_ = file->message_type(53);
  static const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, xp_progress_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, upgraded_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, operation_points_awarded_),
  };
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_,
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_,
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded));
  CCSUsrMsg_XpUpdate_descriptor_ = file->message_type(54);
  static const int CCSUsrMsg_XpUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XpUpdate, data_),
  };
  CCSUsrMsg_XpUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_XpUpdate_descriptor_,
      CCSUsrMsg_XpUpdate::default_instance_,
      CCSUsrMsg_XpUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XpUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XpUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_XpUpdate));
  CCSUsrMsg_QuestProgress_descriptor_ = file->message_type(55);
  static const int CCSUsrMsg_QuestProgress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, normal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, bonus_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, is_event_quest_),
  };
  CCSUsrMsg_QuestProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_QuestProgress_descriptor_,
      CCSUsrMsg_QuestProgress::default_instance_,
      CCSUsrMsg_QuestProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_QuestProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_QuestProgress));
  ScoreLeaderboardData_descriptor_ = file->message_type(56);
  static const int ScoreLeaderboardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, accountentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, matchentries_),
  };
  ScoreLeaderboardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_descriptor_,
      ScoreLeaderboardData::default_instance_,
      ScoreLeaderboardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData));
  ScoreLeaderboardData_Entry_descriptor_ = ScoreLeaderboardData_descriptor_->nested_type(0);
  static const int ScoreLeaderboardData_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, val_),
  };
  ScoreLeaderboardData_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_Entry_descriptor_,
      ScoreLeaderboardData_Entry::default_instance_,
      ScoreLeaderboardData_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData_Entry));
  ScoreLeaderboardData_AccountEntries_descriptor_ = ScoreLeaderboardData_descriptor_->nested_type(1);
  static const int ScoreLeaderboardData_AccountEntries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, entries_),
  };
  ScoreLeaderboardData_AccountEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_AccountEntries_descriptor_,
      ScoreLeaderboardData_AccountEntries::default_instance_,
      ScoreLeaderboardData_AccountEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData_AccountEntries));
  CCSUsrMsg_ScoreLeaderboardData_descriptor_ = file->message_type(57);
  static const int CCSUsrMsg_ScoreLeaderboardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ScoreLeaderboardData, data_),
  };
  CCSUsrMsg_ScoreLeaderboardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ScoreLeaderboardData_descriptor_,
      CCSUsrMsg_ScoreLeaderboardData::default_instance_,
      CCSUsrMsg_ScoreLeaderboardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ScoreLeaderboardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ScoreLeaderboardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ScoreLeaderboardData));
  PlayerDecalDigitalSignature_descriptor_ = file->message_type(58);
  static const int PlayerDecalDigitalSignature_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, tx_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, hitbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, creationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, tint_id_),
  };
  PlayerDecalDigitalSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDecalDigitalSignature_descriptor_,
      PlayerDecalDigitalSignature::default_instance_,
      PlayerDecalDigitalSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDecalDigitalSignature));
  CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_ = file->message_type(59);
  static const int CCSUsrMsg_PlayerDecalDigitalSignature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerDecalDigitalSignature, data_),
  };
  CCSUsrMsg_PlayerDecalDigitalSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_,
      CCSUsrMsg_PlayerDecalDigitalSignature::default_instance_,
      CCSUsrMsg_PlayerDecalDigitalSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerDecalDigitalSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerDecalDigitalSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_PlayerDecalDigitalSignature));
  CCSUsrMsg_WeaponSound_descriptor_ = file->message_type(60);
  static const int CCSUsrMsg_WeaponSound_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, origin_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, timestamp_),
  };
  CCSUsrMsg_WeaponSound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_WeaponSound_descriptor_,
      CCSUsrMsg_WeaponSound::default_instance_,
      CCSUsrMsg_WeaponSound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WeaponSound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_WeaponSound));
  CCSUsrMsg_UpdateScreenHealthBar_descriptor_ = file->message_type(61);
  static const int CCSUsrMsg_UpdateScreenHealthBar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, healthratio_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, healthratio_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, style_),
  };
  CCSUsrMsg_UpdateScreenHealthBar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_UpdateScreenHealthBar_descriptor_,
      CCSUsrMsg_UpdateScreenHealthBar::default_instance_,
      CCSUsrMsg_UpdateScreenHealthBar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_UpdateScreenHealthBar));
  CCSUsrMsg_EntityOutlineHighlight_descriptor_ = file->message_type(62);
  static const int CCSUsrMsg_EntityOutlineHighlight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EntityOutlineHighlight, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EntityOutlineHighlight, removehighlight_),
  };
  CCSUsrMsg_EntityOutlineHighlight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_EntityOutlineHighlight_descriptor_,
      CCSUsrMsg_EntityOutlineHighlight::default_instance_,
      CCSUsrMsg_EntityOutlineHighlight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EntityOutlineHighlight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EntityOutlineHighlight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_EntityOutlineHighlight));
  CCSUsrMsg_SSUI_descriptor_ = file->message_type(63);
  static const int CCSUsrMsg_SSUI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SSUI, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SSUI, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SSUI, end_time_),
  };
  CCSUsrMsg_SSUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SSUI_descriptor_,
      CCSUsrMsg_SSUI::default_instance_,
      CCSUsrMsg_SSUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SSUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SSUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SSUI));
  CCSUsrMsg_SurvivalStats_descriptor_ = file->message_type(64);
  static const int CCSUsrMsg_SurvivalStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, facts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, ticknumber_),
  };
  CCSUsrMsg_SurvivalStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SurvivalStats_descriptor_,
      CCSUsrMsg_SurvivalStats::default_instance_,
      CCSUsrMsg_SurvivalStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SurvivalStats));
  CCSUsrMsg_SurvivalStats_Fact_descriptor_ = CCSUsrMsg_SurvivalStats_descriptor_->nested_type(0);
  static const int CCSUsrMsg_SurvivalStats_Fact_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, interestingness_),
  };
  CCSUsrMsg_SurvivalStats_Fact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SurvivalStats_Fact_descriptor_,
      CCSUsrMsg_SurvivalStats_Fact::default_instance_,
      CCSUsrMsg_SurvivalStats_Fact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SurvivalStats_Fact));
  CCSUsrMsg_SurvivalStats_Placement_descriptor_ = CCSUsrMsg_SurvivalStats_descriptor_->nested_type(1);
  static const int CCSUsrMsg_SurvivalStats_Placement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, teamnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, placement_),
  };
  CCSUsrMsg_SurvivalStats_Placement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SurvivalStats_Placement_descriptor_,
      CCSUsrMsg_SurvivalStats_Placement::default_instance_,
      CCSUsrMsg_SurvivalStats_Placement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SurvivalStats_Placement));
  CCSUsrMsg_SurvivalStats_Damage_descriptor_ = CCSUsrMsg_SurvivalStats_descriptor_->nested_type(2);
  static const int CCSUsrMsg_SurvivalStats_Damage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, to_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, from_hits_),
  };
  CCSUsrMsg_SurvivalStats_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SurvivalStats_Damage_descriptor_,
      CCSUsrMsg_SurvivalStats_Damage::default_instance_,
      CCSUsrMsg_SurvivalStats_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SurvivalStats_Damage));
  CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_ = file->message_type(65);
  static const int CCSUsrMsg_EndOfMatchAllPlayersData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData, allplayerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData, scene_),
  };
  CCSUsrMsg_EndOfMatchAllPlayersData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_,
      CCSUsrMsg_EndOfMatchAllPlayersData::default_instance_,
      CCSUsrMsg_EndOfMatchAllPlayersData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_EndOfMatchAllPlayersData));
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_ = CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_->nested_type(0);
  static const int CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, eaccolade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, position_),
  };
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_,
      CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance_,
      CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade));
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_ = CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_->nested_type(1);
  static const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, teamnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, nomination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, playercolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, isbot_),
  };
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_,
      CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance_,
      CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData));
  CCSUsrMsg_RoundImpactScoreData_descriptor_ = file->message_type(66);
  static const int CCSUsrMsg_RoundImpactScoreData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData, init_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData, all_ris_event_data_),
  };
  CCSUsrMsg_RoundImpactScoreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_descriptor_,
      CCSUsrMsg_RoundImpactScoreData::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData));
  CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_ = CCSUsrMsg_RoundImpactScoreData_descriptor_->nested_type(0);
  static const int CCSUsrMsg_RoundImpactScoreData_RisEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, terrorist_odds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, ct_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, t_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, victim_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, objective_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, all_damage_data_),
  };
  CCSUsrMsg_RoundImpactScoreData_RisEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData_RisEvent));
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_ = CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_->nested_type(0);
  static const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, is_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, is_dead_),
  };
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim));
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_ = CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_->nested_type(1);
  static const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective, type_),
  };
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective));
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_ = CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_->nested_type(2);
  static const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, target_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, target_xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, health_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, num_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, return_health_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, num_return_hits_),
  };
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage));
  CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_ = CCSUsrMsg_RoundImpactScoreData_descriptor_->nested_type(1);
  static const int CCSUsrMsg_RoundImpactScoreData_InitialConditions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_InitialConditions, ct_equip_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_InitialConditions, t_equip_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_InitialConditions, terrorist_odds_),
  };
  CCSUsrMsg_RoundImpactScoreData_InitialConditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_,
      CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance_,
      CCSUsrMsg_RoundImpactScoreData_InitialConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_InitialConditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RoundImpactScoreData_InitialConditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RoundImpactScoreData_InitialConditions));
  CCSUsrMsg_CurrentRoundOdds_descriptor_ = file->message_type(67);
  static const int CCSUsrMsg_CurrentRoundOdds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentRoundOdds, odds_),
  };
  CCSUsrMsg_CurrentRoundOdds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CurrentRoundOdds_descriptor_,
      CCSUsrMsg_CurrentRoundOdds::default_instance_,
      CCSUsrMsg_CurrentRoundOdds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentRoundOdds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentRoundOdds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CurrentRoundOdds));
  DeepPlayerStatsEntry_descriptor_ = file->message_type(68);
  static const int DeepPlayerStatsEntry_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, mm_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, b_starting_ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, match_outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, rounds_won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, rounds_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, stat_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, stat_deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, stat_mvps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, enemy_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, enemy_headshots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, enemy_2ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, enemy_3ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, enemy_4ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, total_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_entry_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_entry_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_1v1_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_1v1_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_1v2_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, engagements_1v2_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, utility_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, utility_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, flash_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, flash_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, mates_),
  };
  DeepPlayerStatsEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeepPlayerStatsEntry_descriptor_,
      DeepPlayerStatsEntry::default_instance_,
      DeepPlayerStatsEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerStatsEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeepPlayerStatsEntry));
  DeepPlayerMatchEvent_descriptor_ = file->message_type(69);
  static const int DeepPlayerMatchEvent_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, b_playing_ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, user_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, user_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, user_pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, user_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, other_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, other_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, other_pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, other_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, event_data_),
  };
  DeepPlayerMatchEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeepPlayerMatchEvent_descriptor_,
      DeepPlayerMatchEvent::default_instance_,
      DeepPlayerMatchEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepPlayerMatchEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeepPlayerMatchEvent));
  CMsgGCCStrike15_ClientDeepStats_descriptor_ = file->message_type(70);
  static const int CMsgGCCStrike15_ClientDeepStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, matches_),
  };
  CMsgGCCStrike15_ClientDeepStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_ClientDeepStats_descriptor_,
      CMsgGCCStrike15_ClientDeepStats::default_instance_,
      CMsgGCCStrike15_ClientDeepStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_ClientDeepStats));
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_ = CMsgGCCStrike15_ClientDeepStats_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, frozen_),
  };
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_,
      CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance_,
      CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange));
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_ = CMsgGCCStrike15_ClientDeepStats_descriptor_->nested_type(1);
  static const int CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, events_),
  };
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_,
      CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance_,
      CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch));
  CCSUsrMsg_DeepStats_descriptor_ = file->message_type(71);
  static const int CCSUsrMsg_DeepStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DeepStats, stats_),
  };
  CCSUsrMsg_DeepStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DeepStats_descriptor_,
      CCSUsrMsg_DeepStats::default_instance_,
      CCSUsrMsg_DeepStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DeepStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DeepStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DeepStats));
  PlayerRankingInfo_descriptor_ = file->message_type(72);
  static const int PlayerRankingInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, rank_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, tv_control_),
  };
  PlayerRankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRankingInfo_descriptor_,
      PlayerRankingInfo::default_instance_,
      PlayerRankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRankingInfo));
  IpAddressMask_descriptor_ = file->message_type(73);
  static const int IpAddressMask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, token_),
  };
  IpAddressMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpAddressMask_descriptor_,
      IpAddressMask::default_instance_,
      IpAddressMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpAddressMask));
  TournamentEvent_descriptor_ = file->message_type(74);
  static const int TournamentEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_time_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_time_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, active_section_id_),
  };
  TournamentEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentEvent_descriptor_,
      TournamentEvent::default_instance_,
      TournamentEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentEvent));
  TournamentPlayer_descriptor_ = file->message_type(75);
  static const int TournamentPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_dob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_desc_),
  };
  TournamentPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentPlayer_descriptor_,
      TournamentPlayer::default_instance_,
      TournamentPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentPlayer));
  TournamentTeam_descriptor_ = file->message_type(76);
  static const int TournamentTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, players_),
  };
  TournamentTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentTeam_descriptor_,
      TournamentTeam::default_instance_,
      TournamentTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentTeam));
  CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_ = file->message_type(77);
  static const int CDataGCCStrike15_v2_TournamentMatchDraft_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, event_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, maps_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, maps_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_veto1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_pickn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, drafts_),
  };
  CDataGCCStrike15_v2_TournamentMatchDraft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_,
      CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_,
      CDataGCCStrike15_v2_TournamentMatchDraft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentMatchDraft));
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_ = CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_->nested_type(0);
  static const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, team_id_ct_),
  };
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_,
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_,
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentMatchDraft_Entry));
  CPreMatchInfoData_descriptor_ = file->message_type(78);
  static const int CPreMatchInfoData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, predictions_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, draft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, wins_),
  };
  CPreMatchInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPreMatchInfoData_descriptor_,
      CPreMatchInfoData::default_instance_,
      CPreMatchInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPreMatchInfoData));
  CPreMatchInfoData_TeamStats_descriptor_ = CPreMatchInfoData_descriptor_->nested_type(0);
  static const int CPreMatchInfoData_TeamStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_idxtxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_teams_),
  };
  CPreMatchInfoData_TeamStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPreMatchInfoData_TeamStats_descriptor_,
      CPreMatchInfoData_TeamStats::default_instance_,
      CPreMatchInfoData_TeamStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPreMatchInfoData_TeamStats));
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_ = file->message_type(79);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rankings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, party_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, whitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_master_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_casters_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_relay_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, pre_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rtime32_event_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_control_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve));
  CCSUsrMsg_ServerRankRevealAll_descriptor_ = file->message_type(80);
  static const int CCSUsrMsg_ServerRankRevealAll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, seconds_till_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, reservation_),
  };
  CCSUsrMsg_ServerRankRevealAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankRevealAll_descriptor_,
      CCSUsrMsg_ServerRankRevealAll::default_instance_,
      CCSUsrMsg_ServerRankRevealAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankRevealAll));
  CCSUsrMsg_ResetHud_descriptor_ = file->message_type(81);
  static const int CCSUsrMsg_ResetHud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, reset_),
  };
  CCSUsrMsg_ResetHud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ResetHud_descriptor_,
      CCSUsrMsg_ResetHud::default_instance_,
      CCSUsrMsg_ResetHud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ResetHud));
  CCSUsrMsg_GameTitle_descriptor_ = file->message_type(82);
  static const int CCSUsrMsg_GameTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, dummy_),
  };
  CCSUsrMsg_GameTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_GameTitle_descriptor_,
      CCSUsrMsg_GameTitle::default_instance_,
      CCSUsrMsg_GameTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_GameTitle));
  CCSUsrMsg_RequestState_descriptor_ = file->message_type(83);
  static const int CCSUsrMsg_RequestState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, dummy_),
  };
  CCSUsrMsg_RequestState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RequestState_descriptor_,
      CCSUsrMsg_RequestState::default_instance_,
      CCSUsrMsg_RequestState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RequestState));
  CCSUsrMsg_StopSpectatorMode_descriptor_ = file->message_type(84);
  static const int CCSUsrMsg_StopSpectatorMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, dummy_),
  };
  CCSUsrMsg_StopSpectatorMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_StopSpectatorMode_descriptor_,
      CCSUsrMsg_StopSpectatorMode::default_instance_,
      CCSUsrMsg_StopSpectatorMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_StopSpectatorMode));
  CCSUsrMsg_DisconnectToLobby_descriptor_ = file->message_type(85);
  static const int CCSUsrMsg_DisconnectToLobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, dummy_),
  };
  CCSUsrMsg_DisconnectToLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DisconnectToLobby_descriptor_,
      CCSUsrMsg_DisconnectToLobby::default_instance_,
      CCSUsrMsg_DisconnectToLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DisconnectToLobby));
  CCSUsrMsg_WarmupHasEnded_descriptor_ = file->message_type(86);
  static const int CCSUsrMsg_WarmupHasEnded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, dummy_),
  };
  CCSUsrMsg_WarmupHasEnded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_WarmupHasEnded_descriptor_,
      CCSUsrMsg_WarmupHasEnded::default_instance_,
      CCSUsrMsg_WarmupHasEnded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_WarmupHasEnded));
  CCSUsrMsg_ClientInfo_descriptor_ = file->message_type(87);
  static const int CCSUsrMsg_ClientInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, dummy_),
  };
  CCSUsrMsg_ClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ClientInfo_descriptor_,
      CCSUsrMsg_ClientInfo::default_instance_,
      CCSUsrMsg_ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ClientInfo));
  ECstrike15UserMessages_descriptor_ = file->enum_type(0);
  ECSUsrMsg_DisconnectToLobby_Action_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cstrike15_5fusermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VGUIMenu_descriptor_, &CCSUsrMsg_VGUIMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VGUIMenu_Subkey_descriptor_, &CCSUsrMsg_VGUIMenu_Subkey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Geiger_descriptor_, &CCSUsrMsg_Geiger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Train_descriptor_, &CCSUsrMsg_Train::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HudText_descriptor_, &CCSUsrMsg_HudText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SayText_descriptor_, &CCSUsrMsg_SayText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SayText2_descriptor_, &CCSUsrMsg_SayText2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_TextMsg_descriptor_, &CCSUsrMsg_TextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HudMsg_descriptor_, &CCSUsrMsg_HudMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Shake_descriptor_, &CCSUsrMsg_Shake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Fade_descriptor_, &CCSUsrMsg_Fade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Rumble_descriptor_, &CCSUsrMsg_Rumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CloseCaption_descriptor_, &CCSUsrMsg_CloseCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CloseCaptionDirect_descriptor_, &CCSUsrMsg_CloseCaptionDirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendAudio_descriptor_, &CCSUsrMsg_SendAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RawAudio_descriptor_, &CCSUsrMsg_RawAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoiceMask_descriptor_, &CCSUsrMsg_VoiceMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoiceMask_PlayerMask_descriptor_, &CCSUsrMsg_VoiceMask_PlayerMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Damage_descriptor_, &CCSUsrMsg_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RadioText_descriptor_, &CCSUsrMsg_RadioText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HintText_descriptor_, &CCSUsrMsg_HintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_KeyHintText_descriptor_, &CCSUsrMsg_KeyHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_, &CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_, &CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEconItemPreviewDataBlock_descriptor_, &CEconItemPreviewDataBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEconItemPreviewDataBlock_Sticker_descriptor_, &CEconItemPreviewDataBlock_Sticker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendPlayerItemDrops_descriptor_, &CCSUsrMsg_SendPlayerItemDrops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendPlayerItemFound_descriptor_, &CCSUsrMsg_SendPlayerItemFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ReloadEffect_descriptor_, &CCSUsrMsg_ReloadEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AdjustMoney_descriptor_, &CCSUsrMsg_AdjustMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ReportHit_descriptor_, &CCSUsrMsg_ReportHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_KillCam_descriptor_, &CCSUsrMsg_KillCam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DesiredTimescale_descriptor_, &CCSUsrMsg_DesiredTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CurrentTimescale_descriptor_, &CCSUsrMsg_CurrentTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AchievementEvent_descriptor_, &CCSUsrMsg_AchievementEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MatchEndConditions_descriptor_, &CCSUsrMsg_MatchEndConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_PlayerStatsUpdate_descriptor_, &CCSUsrMsg_PlayerStatsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_, &CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DisplayInventory_descriptor_, &CCSUsrMsg_DisplayInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_XRankGet_descriptor_, &CCSUsrMsg_XRankGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_XRankUpd_descriptor_, &CCSUsrMsg_XRankUpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CallVoteFailed_descriptor_, &CCSUsrMsg_CallVoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteStart_descriptor_, &CCSUsrMsg_VoteStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VotePass_descriptor_, &CCSUsrMsg_VotePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteFailed_descriptor_, &CCSUsrMsg_VoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteSetup_descriptor_, &CCSUsrMsg_VoteSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendLastKillerDamageToClient_descriptor_, &CCSUsrMsg_SendLastKillerDamageToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankUpdate_descriptor_, &CCSUsrMsg_ServerRankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_, &CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ItemPickup_descriptor_, &CCSUsrMsg_ItemPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ShowMenu_descriptor_, &CCSUsrMsg_ShowMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_BarTime_descriptor_, &CCSUsrMsg_BarTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AmmoDenied_descriptor_, &CCSUsrMsg_AmmoDenied::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MarkAchievement_descriptor_, &CCSUsrMsg_MarkAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MatchStatsUpdate_descriptor_, &CCSUsrMsg_MatchStatsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ItemDrop_descriptor_, &CCSUsrMsg_ItemDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_GlowPropTurnOff_descriptor_, &CCSUsrMsg_GlowPropTurnOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundBackupFilenames_descriptor_, &CCSUsrMsg_RoundBackupFilenames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XpProgressData_descriptor_, &XpProgressData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_, &CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_XpUpdate_descriptor_, &CCSUsrMsg_XpUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_QuestProgress_descriptor_, &CCSUsrMsg_QuestProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_descriptor_, &ScoreLeaderboardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_Entry_descriptor_, &ScoreLeaderboardData_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_AccountEntries_descriptor_, &ScoreLeaderboardData_AccountEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ScoreLeaderboardData_descriptor_, &CCSUsrMsg_ScoreLeaderboardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDecalDigitalSignature_descriptor_, &PlayerDecalDigitalSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_, &CCSUsrMsg_PlayerDecalDigitalSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_WeaponSound_descriptor_, &CCSUsrMsg_WeaponSound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_UpdateScreenHealthBar_descriptor_, &CCSUsrMsg_UpdateScreenHealthBar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_EntityOutlineHighlight_descriptor_, &CCSUsrMsg_EntityOutlineHighlight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SSUI_descriptor_, &CCSUsrMsg_SSUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SurvivalStats_descriptor_, &CCSUsrMsg_SurvivalStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SurvivalStats_Fact_descriptor_, &CCSUsrMsg_SurvivalStats_Fact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SurvivalStats_Placement_descriptor_, &CCSUsrMsg_SurvivalStats_Placement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SurvivalStats_Damage_descriptor_, &CCSUsrMsg_SurvivalStats_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_, &CCSUsrMsg_EndOfMatchAllPlayersData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_, &CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_, &CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_descriptor_, &CCSUsrMsg_RoundImpactScoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_, &CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_, &CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_, &CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_, &CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_, &CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CurrentRoundOdds_descriptor_, &CCSUsrMsg_CurrentRoundOdds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeepPlayerStatsEntry_descriptor_, &DeepPlayerStatsEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeepPlayerMatchEvent_descriptor_, &DeepPlayerMatchEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_ClientDeepStats_descriptor_, &CMsgGCCStrike15_ClientDeepStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_, &CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_, &CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DeepStats_descriptor_, &CCSUsrMsg_DeepStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRankingInfo_descriptor_, &PlayerRankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpAddressMask_descriptor_, &IpAddressMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentEvent_descriptor_, &TournamentEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentPlayer_descriptor_, &TournamentPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentTeam_descriptor_, &TournamentTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_, &CDataGCCStrike15_v2_TournamentMatchDraft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_, &CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPreMatchInfoData_descriptor_, &CPreMatchInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPreMatchInfoData_TeamStats_descriptor_, &CPreMatchInfoData_TeamStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankRevealAll_descriptor_, &CCSUsrMsg_ServerRankRevealAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ResetHud_descriptor_, &CCSUsrMsg_ResetHud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_GameTitle_descriptor_, &CCSUsrMsg_GameTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RequestState_descriptor_, &CCSUsrMsg_RequestState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_StopSpectatorMode_descriptor_, &CCSUsrMsg_StopSpectatorMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DisconnectToLobby_descriptor_, &CCSUsrMsg_DisconnectToLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_WarmupHasEnded_descriptor_, &CCSUsrMsg_WarmupHasEnded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ClientInfo_descriptor_, &CCSUsrMsg_ClientInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cstrike15_5fusermessages_2eproto() {
  delete CCSUsrMsg_VGUIMenu::default_instance_;
  delete CCSUsrMsg_VGUIMenu_reflection_;
  delete CCSUsrMsg_VGUIMenu_Subkey::default_instance_;
  delete CCSUsrMsg_VGUIMenu_Subkey_reflection_;
  delete CCSUsrMsg_Geiger::default_instance_;
  delete CCSUsrMsg_Geiger_reflection_;
  delete CCSUsrMsg_Train::default_instance_;
  delete CCSUsrMsg_Train_reflection_;
  delete CCSUsrMsg_HudText::default_instance_;
  delete CCSUsrMsg_HudText_reflection_;
  delete CCSUsrMsg_SayText::default_instance_;
  delete CCSUsrMsg_SayText_reflection_;
  delete CCSUsrMsg_SayText2::default_instance_;
  delete CCSUsrMsg_SayText2_reflection_;
  delete CCSUsrMsg_TextMsg::default_instance_;
  delete CCSUsrMsg_TextMsg_reflection_;
  delete CCSUsrMsg_HudMsg::default_instance_;
  delete CCSUsrMsg_HudMsg_reflection_;
  delete CCSUsrMsg_Shake::default_instance_;
  delete CCSUsrMsg_Shake_reflection_;
  delete CCSUsrMsg_Fade::default_instance_;
  delete CCSUsrMsg_Fade_reflection_;
  delete CCSUsrMsg_Rumble::default_instance_;
  delete CCSUsrMsg_Rumble_reflection_;
  delete CCSUsrMsg_CloseCaption::default_instance_;
  delete CCSUsrMsg_CloseCaption_reflection_;
  delete CCSUsrMsg_CloseCaptionDirect::default_instance_;
  delete CCSUsrMsg_CloseCaptionDirect_reflection_;
  delete CCSUsrMsg_SendAudio::default_instance_;
  delete CCSUsrMsg_SendAudio_reflection_;
  delete CCSUsrMsg_RawAudio::default_instance_;
  delete CCSUsrMsg_RawAudio_reflection_;
  delete CCSUsrMsg_VoiceMask::default_instance_;
  delete CCSUsrMsg_VoiceMask_reflection_;
  delete CCSUsrMsg_VoiceMask_PlayerMask::default_instance_;
  delete CCSUsrMsg_VoiceMask_PlayerMask_reflection_;
  delete CCSUsrMsg_Damage::default_instance_;
  delete CCSUsrMsg_Damage_reflection_;
  delete CCSUsrMsg_RadioText::default_instance_;
  delete CCSUsrMsg_RadioText_reflection_;
  delete CCSUsrMsg_HintText::default_instance_;
  delete CCSUsrMsg_HintText_reflection_;
  delete CCSUsrMsg_KeyHintText::default_instance_;
  delete CCSUsrMsg_KeyHintText_reflection_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_;
  delete CEconItemPreviewDataBlock::default_instance_;
  delete CEconItemPreviewDataBlock_reflection_;
  delete CEconItemPreviewDataBlock_Sticker::default_instance_;
  delete CEconItemPreviewDataBlock_Sticker_reflection_;
  delete CCSUsrMsg_SendPlayerItemDrops::default_instance_;
  delete CCSUsrMsg_SendPlayerItemDrops_reflection_;
  delete CCSUsrMsg_SendPlayerItemFound::default_instance_;
  delete CCSUsrMsg_SendPlayerItemFound_reflection_;
  delete CCSUsrMsg_ReloadEffect::default_instance_;
  delete CCSUsrMsg_ReloadEffect_reflection_;
  delete CCSUsrMsg_AdjustMoney::default_instance_;
  delete CCSUsrMsg_AdjustMoney_reflection_;
  delete CCSUsrMsg_ReportHit::default_instance_;
  delete CCSUsrMsg_ReportHit_reflection_;
  delete CCSUsrMsg_KillCam::default_instance_;
  delete CCSUsrMsg_KillCam_reflection_;
  delete CCSUsrMsg_DesiredTimescale::default_instance_;
  delete CCSUsrMsg_DesiredTimescale_reflection_;
  delete CCSUsrMsg_CurrentTimescale::default_instance_;
  delete CCSUsrMsg_CurrentTimescale_reflection_;
  delete CCSUsrMsg_AchievementEvent::default_instance_;
  delete CCSUsrMsg_AchievementEvent_reflection_;
  delete CCSUsrMsg_MatchEndConditions::default_instance_;
  delete CCSUsrMsg_MatchEndConditions_reflection_;
  delete CCSUsrMsg_PlayerStatsUpdate::default_instance_;
  delete CCSUsrMsg_PlayerStatsUpdate_reflection_;
  delete CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_;
  delete CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  delete CCSUsrMsg_DisplayInventory::default_instance_;
  delete CCSUsrMsg_DisplayInventory_reflection_;
  delete CCSUsrMsg_XRankGet::default_instance_;
  delete CCSUsrMsg_XRankGet_reflection_;
  delete CCSUsrMsg_XRankUpd::default_instance_;
  delete CCSUsrMsg_XRankUpd_reflection_;
  delete CCSUsrMsg_CallVoteFailed::default_instance_;
  delete CCSUsrMsg_CallVoteFailed_reflection_;
  delete CCSUsrMsg_VoteStart::default_instance_;
  delete CCSUsrMsg_VoteStart_reflection_;
  delete CCSUsrMsg_VotePass::default_instance_;
  delete CCSUsrMsg_VotePass_reflection_;
  delete CCSUsrMsg_VoteFailed::default_instance_;
  delete CCSUsrMsg_VoteFailed_reflection_;
  delete CCSUsrMsg_VoteSetup::default_instance_;
  delete CCSUsrMsg_VoteSetup_reflection_;
  delete CCSUsrMsg_SendLastKillerDamageToClient::default_instance_;
  delete CCSUsrMsg_SendLastKillerDamageToClient_reflection_;
  delete CCSUsrMsg_ServerRankUpdate::default_instance_;
  delete CCSUsrMsg_ServerRankUpdate_reflection_;
  delete CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_;
  delete CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_;
  delete CCSUsrMsg_ItemPickup::default_instance_;
  delete CCSUsrMsg_ItemPickup_reflection_;
  delete CCSUsrMsg_ShowMenu::default_instance_;
  delete CCSUsrMsg_ShowMenu_reflection_;
  delete CCSUsrMsg_BarTime::default_instance_;
  delete CCSUsrMsg_BarTime_reflection_;
  delete CCSUsrMsg_AmmoDenied::default_instance_;
  delete CCSUsrMsg_AmmoDenied_reflection_;
  delete CCSUsrMsg_MarkAchievement::default_instance_;
  delete CCSUsrMsg_MarkAchievement_reflection_;
  delete CCSUsrMsg_MatchStatsUpdate::default_instance_;
  delete CCSUsrMsg_MatchStatsUpdate_reflection_;
  delete CCSUsrMsg_ItemDrop::default_instance_;
  delete CCSUsrMsg_ItemDrop_reflection_;
  delete CCSUsrMsg_GlowPropTurnOff::default_instance_;
  delete CCSUsrMsg_GlowPropTurnOff_reflection_;
  delete CCSUsrMsg_RoundBackupFilenames::default_instance_;
  delete CCSUsrMsg_RoundBackupFilenames_reflection_;
  delete XpProgressData::default_instance_;
  delete XpProgressData_reflection_;
  delete CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_;
  delete CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_;
  delete CCSUsrMsg_XpUpdate::default_instance_;
  delete CCSUsrMsg_XpUpdate_reflection_;
  delete CCSUsrMsg_QuestProgress::default_instance_;
  delete CCSUsrMsg_QuestProgress_reflection_;
  delete ScoreLeaderboardData::default_instance_;
  delete ScoreLeaderboardData_reflection_;
  delete ScoreLeaderboardData_Entry::default_instance_;
  delete ScoreLeaderboardData_Entry_reflection_;
  delete ScoreLeaderboardData_AccountEntries::default_instance_;
  delete ScoreLeaderboardData_AccountEntries_reflection_;
  delete CCSUsrMsg_ScoreLeaderboardData::default_instance_;
  delete CCSUsrMsg_ScoreLeaderboardData_reflection_;
  delete PlayerDecalDigitalSignature::default_instance_;
  delete PlayerDecalDigitalSignature_reflection_;
  delete CCSUsrMsg_PlayerDecalDigitalSignature::default_instance_;
  delete CCSUsrMsg_PlayerDecalDigitalSignature_reflection_;
  delete CCSUsrMsg_WeaponSound::default_instance_;
  delete CCSUsrMsg_WeaponSound_reflection_;
  delete CCSUsrMsg_UpdateScreenHealthBar::default_instance_;
  delete CCSUsrMsg_UpdateScreenHealthBar_reflection_;
  delete CCSUsrMsg_EntityOutlineHighlight::default_instance_;
  delete CCSUsrMsg_EntityOutlineHighlight_reflection_;
  delete CCSUsrMsg_SSUI::default_instance_;
  delete CCSUsrMsg_SSUI_reflection_;
  delete CCSUsrMsg_SurvivalStats::default_instance_;
  delete CCSUsrMsg_SurvivalStats_reflection_;
  delete CCSUsrMsg_SurvivalStats_Fact::default_instance_;
  delete CCSUsrMsg_SurvivalStats_Fact_reflection_;
  delete CCSUsrMsg_SurvivalStats_Placement::default_instance_;
  delete CCSUsrMsg_SurvivalStats_Placement_reflection_;
  delete CCSUsrMsg_SurvivalStats_Damage::default_instance_;
  delete CCSUsrMsg_SurvivalStats_Damage_reflection_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData::default_instance_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData_reflection_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_reflection_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance_;
  delete CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_reflection_;
  delete CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance_;
  delete CCSUsrMsg_RoundImpactScoreData_InitialConditions_reflection_;
  delete CCSUsrMsg_CurrentRoundOdds::default_instance_;
  delete CCSUsrMsg_CurrentRoundOdds_reflection_;
  delete DeepPlayerStatsEntry::default_instance_;
  delete DeepPlayerStatsEntry_reflection_;
  delete DeepPlayerMatchEvent::default_instance_;
  delete DeepPlayerMatchEvent_reflection_;
  delete CMsgGCCStrike15_ClientDeepStats::default_instance_;
  delete CMsgGCCStrike15_ClientDeepStats_reflection_;
  delete CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance_;
  delete CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_reflection_;
  delete CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance_;
  delete CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_reflection_;
  delete CCSUsrMsg_DeepStats::default_instance_;
  delete CCSUsrMsg_DeepStats_reflection_;
  delete PlayerRankingInfo::default_instance_;
  delete PlayerRankingInfo_reflection_;
  delete IpAddressMask::default_instance_;
  delete IpAddressMask_reflection_;
  delete TournamentEvent::default_instance_;
  delete TournamentEvent_reflection_;
  delete TournamentPlayer::default_instance_;
  delete TournamentPlayer_reflection_;
  delete TournamentTeam::default_instance_;
  delete TournamentTeam_reflection_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_reflection_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_;
  delete CPreMatchInfoData::default_instance_;
  delete CPreMatchInfoData_reflection_;
  delete CPreMatchInfoData_TeamStats::default_instance_;
  delete CPreMatchInfoData_TeamStats_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_;
  delete CCSUsrMsg_ServerRankRevealAll::default_instance_;
  delete CCSUsrMsg_ServerRankRevealAll_reflection_;
  delete CCSUsrMsg_ResetHud::default_instance_;
  delete CCSUsrMsg_ResetHud_reflection_;
  delete CCSUsrMsg_GameTitle::default_instance_;
  delete CCSUsrMsg_GameTitle_reflection_;
  delete CCSUsrMsg_RequestState::default_instance_;
  delete CCSUsrMsg_RequestState_reflection_;
  delete CCSUsrMsg_StopSpectatorMode::default_instance_;
  delete CCSUsrMsg_StopSpectatorMode_reflection_;
  delete CCSUsrMsg_DisconnectToLobby::default_instance_;
  delete CCSUsrMsg_DisconnectToLobby_reflection_;
  delete CCSUsrMsg_WarmupHasEnded::default_instance_;
  delete CCSUsrMsg_WarmupHasEnded_reflection_;
  delete CCSUsrMsg_ClientInfo::default_instance_;
  delete CCSUsrMsg_ClientInfo_reflection_;
}

void protobuf_AddDesc_cstrike15_5fusermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cstrike15_usermessages.proto\032 google/p"
    "rotobuf/descriptor.proto\032\021netmessages.pr"
    "oto\"\202\001\n\022CCSUsrMsg_VGUIMenu\022\014\n\004name\030\001 \001(\t"
    "\022\014\n\004show\030\002 \001(\010\022+\n\007subkeys\030\003 \003(\0132\032.CCSUsr"
    "Msg_VGUIMenu.Subkey\032#\n\006Subkey\022\014\n\004name\030\001 "
    "\001(\t\022\013\n\003str\030\002 \001(\t\"!\n\020CCSUsrMsg_Geiger\022\r\n\005"
    "range\030\001 \001(\005\" \n\017CCSUsrMsg_Train\022\r\n\005train\030"
    "\001 \001(\005\"!\n\021CCSUsrMsg_HudText\022\014\n\004text\030\001 \001(\t"
    "\"U\n\021CCSUsrMsg_SayText\022\017\n\007ent_idx\030\001 \001(\005\022\014"
    "\n\004text\030\002 \001(\t\022\014\n\004chat\030\003 \001(\010\022\023\n\013textallcha"
    "t\030\004 \001(\010\"j\n\022CCSUsrMsg_SayText2\022\017\n\007ent_idx"
    "\030\001 \001(\005\022\014\n\004chat\030\002 \001(\010\022\020\n\010msg_name\030\003 \001(\t\022\016"
    "\n\006params\030\004 \003(\t\022\023\n\013textallchat\030\005 \001(\010\"4\n\021C"
    "CSUsrMsg_TextMsg\022\017\n\007msg_dst\030\001 \001(\005\022\016\n\006par"
    "ams\030\003 \003(\t\"\340\001\n\020CCSUsrMsg_HudMsg\022\017\n\007channe"
    "l\030\001 \001(\005\022\032\n\003pos\030\002 \001(\0132\r.CMsgVector2D\022\027\n\004c"
    "lr1\030\003 \001(\0132\t.CMsgRGBA\022\027\n\004clr2\030\004 \001(\0132\t.CMs"
    "gRGBA\022\016\n\006effect\030\005 \001(\005\022\024\n\014fade_in_time\030\006 "
    "\001(\002\022\025\n\rfade_out_time\030\007 \001(\002\022\021\n\thold_time\030"
    "\t \001(\002\022\017\n\007fx_time\030\n \001(\002\022\014\n\004text\030\013 \001(\t\"`\n\017"
    "CCSUsrMsg_Shake\022\017\n\007command\030\001 \001(\005\022\027\n\017loca"
    "l_amplitude\030\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010"
    "duration\030\004 \001(\002\"\\\n\016CCSUsrMsg_Fade\022\020\n\010dura"
    "tion\030\001 \001(\005\022\021\n\thold_time\030\002 \001(\005\022\r\n\005flags\030\003"
    " \001(\005\022\026\n\003clr\030\004 \001(\0132\t.CMsgRGBA\">\n\020CCSUsrMs"
    "g_Rumble\022\r\n\005index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n"
    "\005flags\030\003 \001(\005\"^\n\026CCSUsrMsg_CloseCaption\022\014"
    "\n\004hash\030\001 \001(\r\022\020\n\010duration\030\002 \001(\005\022\023\n\013from_p"
    "layer\030\003 \001(\010\022\017\n\007cctoken\030\004 \001(\t\"S\n\034CCSUsrMs"
    "g_CloseCaptionDirect\022\014\n\004hash\030\001 \001(\r\022\020\n\010du"
    "ration\030\002 \001(\005\022\023\n\013from_player\030\003 \001(\010\"*\n\023CCS"
    "UsrMsg_SendAudio\022\023\n\013radio_sound\030\001 \001(\t\"]\n"
    "\022CCSUsrMsg_RawAudio\022\r\n\005pitch\030\001 \001(\005\022\016\n\006en"
    "tidx\030\002 \001(\005\022\020\n\010duration\030\003 \001(\002\022\026\n\016voice_fi"
    "lename\030\004 \001(\t\"\241\001\n\023CCSUsrMsg_VoiceMask\0225\n\014"
    "player_masks\030\001 \003(\0132\037.CCSUsrMsg_VoiceMask"
    ".PlayerMask\022\031\n\021player_mod_enable\030\002 \001(\010\0328"
    "\n\nPlayerMask\022\027\n\017game_rules_mask\030\001 \001(\005\022\021\n"
    "\tban_masks\030\002 \001(\005\"e\n\020CCSUsrMsg_Damage\022\016\n\006"
    "amount\030\001 \001(\005\022(\n\023inflictor_world_pos\030\002 \001("
    "\0132\013.CMsgVector\022\027\n\017victim_entindex\030\003 \001(\005\""
    "X\n\023CCSUsrMsg_RadioText\022\017\n\007msg_dst\030\001 \001(\005\022"
    "\016\n\006client\030\002 \001(\005\022\020\n\010msg_name\030\003 \001(\t\022\016\n\006par"
    "ams\030\004 \003(\t\"\"\n\022CCSUsrMsg_HintText\022\014\n\004text\030"
    "\001 \001(\t\"&\n\025CCSUsrMsg_KeyHintText\022\r\n\005hints\030"
    "\001 \003(\t\"\326\002\n$CCSUsrMsg_ProcessSpottedEntity"
    "Update\022\022\n\nnew_update\030\001 \001(\010\022Q\n\016entity_upd"
    "ates\030\002 \003(\01329.CCSUsrMsg_ProcessSpottedEnt"
    "ityUpdate.SpottedEntityUpdate\032\306\001\n\023Spotte"
    "dEntityUpdate\022\022\n\nentity_idx\030\001 \001(\005\022\020\n\010cla"
    "ss_id\030\002 \001(\005\022\020\n\010origin_x\030\003 \001(\005\022\020\n\010origin_"
    "y\030\004 \001(\005\022\020\n\010origin_z\030\005 \001(\005\022\017\n\007angle_y\030\006 \001"
    "(\005\022\017\n\007defuser\030\007 \001(\010\022\032\n\022player_has_defuse"
    "r\030\010 \001(\010\022\025\n\rplayer_has_c4\030\t \001(\010\"\204\004\n\031CEcon"
    "ItemPreviewDataBlock\022\021\n\taccountid\030\001 \001(\r\022"
    "\016\n\006itemid\030\002 \001(\004\022\020\n\010defindex\030\003 \001(\r\022\022\n\npai"
    "ntindex\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\017\n\007quality"
    "\030\006 \001(\r\022\021\n\tpaintwear\030\007 \001(\r\022\021\n\tpaintseed\030\010"
    " \001(\r\022\032\n\022killeaterscoretype\030\t \001(\r\022\026\n\016kill"
    "eatervalue\030\n \001(\r\022\022\n\ncustomname\030\013 \001(\t\0224\n\010"
    "stickers\030\014 \003(\0132\".CEconItemPreviewDataBlo"
    "ck.Sticker\022\021\n\tinventory\030\r \001(\r\022\016\n\006origin\030"
    "\016 \001(\r\022\017\n\007questid\030\017 \001(\r\022\022\n\ndropreason\030\020 \001"
    "(\r\022\022\n\nmusicindex\030\021 \001(\r\022\020\n\010entindex\030\022 \001(\005"
    "\032k\n\007Sticker\022\014\n\004slot\030\001 \001(\r\022\022\n\nsticker_id\030"
    "\002 \001(\r\022\014\n\004wear\030\003 \001(\002\022\r\n\005scale\030\004 \001(\002\022\020\n\010ro"
    "tation\030\005 \001(\002\022\017\n\007tint_id\030\006 \001(\r\"S\n\035CCSUsrM"
    "sg_SendPlayerItemDrops\0222\n\016entity_updates"
    "\030\001 \003(\0132\032.CEconItemPreviewDataBlock\"_\n\035CC"
    "SUsrMsg_SendPlayerItemFound\022,\n\010iteminfo\030"
    "\001 \001(\0132\032.CEconItemPreviewDataBlock\022\020\n\010ent"
    "index\030\002 \001(\005\"o\n\026CCSUsrMsg_ReloadEffect\022\016\n"
    "\006entidx\030\001 \001(\005\022\017\n\007actanim\030\002 \001(\005\022\020\n\010origin"
    "_x\030\003 \001(\002\022\020\n\010origin_y\030\004 \001(\002\022\020\n\010origin_z\030\005"
    " \001(\002\"\'\n\025CCSUsrMsg_AdjustMoney\022\016\n\006amount\030"
    "\001 \001(\005\"U\n\023CCSUsrMsg_ReportHit\022\r\n\005pos_x\030\001 "
    "\001(\002\022\r\n\005pos_y\030\002 \001(\002\022\021\n\ttimestamp\030\004 \001(\002\022\r\n"
    "\005pos_z\030\003 \001(\002\"R\n\021CCSUsrMsg_KillCam\022\020\n\010obs"
    "_mode\030\001 \001(\005\022\024\n\014first_target\030\002 \001(\005\022\025\n\rsec"
    "ond_target\030\003 \001(\005\"\213\001\n\032CCSUsrMsg_DesiredTi"
    "mescale\022\031\n\021desired_timescale\030\001 \001(\002\022\035\n\025du"
    "ration_realtime_sec\030\002 \001(\002\022\031\n\021interpolato"
    "r_type\030\003 \001(\005\022\030\n\020start_blend_time\030\004 \001(\002\"3"
    "\n\032CCSUsrMsg_CurrentTimescale\022\025\n\rcur_time"
    "scale\030\001 \001(\002\"Q\n\032CCSUsrMsg_AchievementEven"
    "t\022\023\n\013achievement\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\017\n"
    "\007user_id\030\003 \001(\005\"r\n\034CCSUsrMsg_MatchEndCond"
    "itions\022\021\n\tfraglimit\030\001 \001(\005\022\024\n\014mp_maxround"
    "s\030\002 \001(\005\022\023\n\013mp_winlimit\030\003 \001(\005\022\024\n\014mp_timel"
    "imit\030\004 \001(\005\"\242\001\n\033CCSUsrMsg_PlayerStatsUpda"
    "te\022\017\n\007version\030\001 \001(\005\0220\n\005stats\030\004 \003(\0132!.CCS"
    "UsrMsg_PlayerStatsUpdate.Stat\022\017\n\007user_id"
    "\030\005 \001(\005\022\013\n\003crc\030\006 \001(\005\032\"\n\004Stat\022\013\n\003idx\030\001 \001(\005"
    "\022\r\n\005delta\030\002 \001(\005\">\n\032CCSUsrMsg_DisplayInve"
    "ntory\022\017\n\007display\030\001 \001(\010\022\017\n\007user_id\030\002 \001(\005\""
    ":\n\022CCSUsrMsg_XRankGet\022\020\n\010mode_idx\030\001 \001(\005\022"
    "\022\n\ncontroller\030\002 \001(\005\"K\n\022CCSUsrMsg_XRankUp"
    "d\022\020\n\010mode_idx\030\001 \001(\005\022\022\n\ncontroller\030\002 \001(\005\022"
    "\017\n\007ranking\030\003 \001(\005\"8\n\030CCSUsrMsg_CallVoteFa"
    "iled\022\016\n\006reason\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"\265\001\n\023C"
    "CSUsrMsg_VoteStart\022\014\n\004team\030\001 \001(\005\022\017\n\007ent_"
    "idx\030\002 \001(\005\022\021\n\tvote_type\030\003 \001(\005\022\020\n\010disp_str"
    "\030\004 \001(\t\022\023\n\013details_str\030\005 \001(\t\022\026\n\016other_tea"
    "m_str\030\006 \001(\t\022\026\n\016is_yes_no_vote\030\007 \001(\010\022\025\n\re"
    "ntidx_target\030\010 \001(\005\"\\\n\022CCSUsrMsg_VotePass"
    "\022\014\n\004team\030\001 \001(\005\022\021\n\tvote_type\030\002 \001(\005\022\020\n\010dis"
    "p_str\030\003 \001(\t\022\023\n\013details_str\030\004 \001(\t\"4\n\024CCSU"
    "srMsg_VoteFailed\022\014\n\004team\030\001 \001(\005\022\016\n\006reason"
    "\030\002 \001(\005\"/\n\023CCSUsrMsg_VoteSetup\022\030\n\020potenti"
    "al_issues\030\001 \003(\t\"\204\001\n&CCSUsrMsg_SendLastKi"
    "llerDamageToClient\022\026\n\016num_hits_given\030\001 \001"
    "(\005\022\024\n\014damage_given\030\002 \001(\005\022\026\n\016num_hits_tak"
    "en\030\003 \001(\005\022\024\n\014damage_taken\030\004 \001(\005\"\335\001\n\032CCSUs"
    "rMsg_ServerRankUpdate\022;\n\013rank_update\030\001 \003"
    "(\0132&.CCSUsrMsg_ServerRankUpdate.RankUpda"
    "te\032\201\001\n\nRankUpdate\022\022\n\naccount_id\030\001 \001(\005\022\020\n"
    "\010rank_old\030\002 \001(\005\022\020\n\010rank_new\030\003 \001(\005\022\020\n\010num"
    "_wins\030\004 \001(\005\022\023\n\013rank_change\030\005 \001(\002\022\024\n\014rank"
    "_type_id\030\006 \001(\005\"$\n\024CCSUsrMsg_ItemPickup\022\014"
    "\n\004item\030\001 \001(\t\"Y\n\022CCSUsrMsg_ShowMenu\022\030\n\020bi"
    "ts_valid_slots\030\001 \001(\005\022\024\n\014display_time\030\002 \001"
    "(\005\022\023\n\013menu_string\030\003 \001(\t\"!\n\021CCSUsrMsg_Bar"
    "Time\022\014\n\004time\030\001 \001(\t\"\'\n\024CCSUsrMsg_AmmoDeni"
    "ed\022\017\n\007ammoIdx\030\001 \001(\005\"0\n\031CCSUsrMsg_MarkAch"
    "ievement\022\023\n\013achievement\030\001 \001(\t\",\n\032CCSUsrM"
    "sg_MatchStatsUpdate\022\016\n\006update\030\001 \001(\t\"3\n\022C"
    "CSUsrMsg_ItemDrop\022\016\n\006itemid\030\001 \001(\003\022\r\n\005dea"
    "th\030\002 \001(\010\"+\n\031CCSUsrMsg_GlowPropTurnOff\022\016\n"
    "\006entidx\030\001 \001(\005\"b\n\036CCSUsrMsg_RoundBackupFi"
    "lenames\022\r\n\005count\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\020\n"
    "\010filename\030\003 \001(\t\022\020\n\010nicename\030\004 \001(\t\"8\n\016XpP"
    "rogressData\022\021\n\txp_points\030\001 \001(\r\022\023\n\013xp_cat"
    "egory\030\002 \001(\005\"\323\001\n,CMsgGCCstrike15_v2_GC2Se"
    "rverNotifyXPRewarded\022)\n\020xp_progress_data"
    "\030\001 \003(\0132\017.XpProgressData\022\022\n\naccount_id\030\002 "
    "\001(\r\022\022\n\ncurrent_xp\030\003 \001(\r\022\025\n\rcurrent_level"
    "\030\004 \001(\r\022\027\n\017upgraded_defidx\030\005 \001(\r\022 \n\030opera"
    "tion_points_awarded\030\006 \001(\r\"Q\n\022CCSUsrMsg_X"
    "pUpdate\022;\n\004data\030\001 \001(\0132-.CMsgGCCstrike15_"
    "v2_GC2ServerNotifyXPRewarded\"p\n\027CCSUsrMs"
    "g_QuestProgress\022\020\n\010quest_id\030\001 \001(\r\022\025\n\rnor"
    "mal_points\030\002 \001(\r\022\024\n\014bonus_points\030\003 \001(\r\022\026"
    "\n\016is_event_quest\030\004 \001(\010\"\236\002\n\024ScoreLeaderbo"
    "ardData\022\020\n\010quest_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r"
    "\022<\n\016accountentries\030\003 \003(\0132$.ScoreLeaderbo"
    "ardData.AccountEntries\0221\n\014matchentries\030\005"
    " \003(\0132\033.ScoreLeaderboardData.Entry\032!\n\005Ent"
    "ry\022\013\n\003tag\030\001 \001(\r\022\013\n\003val\030\002 \001(\r\032Q\n\016AccountE"
    "ntries\022\021\n\taccountid\030\001 \001(\r\022,\n\007entries\030\002 \003"
    "(\0132\033.ScoreLeaderboardData.Entry\"E\n\036CCSUs"
    "rMsg_ScoreLeaderboardData\022#\n\004data\030\001 \001(\0132"
    "\025.ScoreLeaderboardData\"\224\002\n\033PlayerDecalDi"
    "gitalSignature\022\021\n\tsignature\030\001 \001(\014\022\021\n\tacc"
    "ountid\030\002 \001(\r\022\r\n\005rtime\030\003 \001(\r\022\016\n\006endpos\030\004 "
    "\003(\002\022\020\n\010startpos\030\005 \003(\002\022\r\n\005right\030\006 \003(\002\022\021\n\t"
    "tx_defidx\030\007 \001(\r\022\020\n\010entindex\030\010 \001(\005\022\016\n\006hit"
    "box\030\t \001(\r\022\024\n\014creationtime\030\n \001(\002\022\021\n\tequip"
    "slot\030\013 \001(\r\022\020\n\010trace_id\030\014 \001(\r\022\016\n\006normal\030\r"
    " \003(\002\022\017\n\007tint_id\030\016 \001(\r\"S\n%CCSUsrMsg_Playe"
    "rDecalDigitalSignature\022*\n\004data\030\001 \001(\0132\034.P"
    "layerDecalDigitalSignature\"\177\n\025CCSUsrMsg_"
    "WeaponSound\022\016\n\006entidx\030\001 \001(\005\022\020\n\010origin_x\030"
    "\002 \001(\002\022\020\n\010origin_y\030\003 \001(\002\022\020\n\010origin_z\030\004 \001("
    "\002\022\r\n\005sound\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\002\"r\n\037C"
    "CSUsrMsg_UpdateScreenHealthBar\022\016\n\006entidx"
    "\030\001 \001(\005\022\027\n\017healthratio_old\030\002 \001(\002\022\027\n\017healt"
    "hratio_new\030\003 \001(\002\022\r\n\005style\030\004 \001(\005\"K\n CCSUs"
    "rMsg_EntityOutlineHighlight\022\016\n\006entidx\030\001 "
    "\001(\005\022\027\n\017removehighlight\030\002 \001(\010\"D\n\016CCSUsrMs"
    "g_SSUI\022\014\n\004show\030\001 \001(\010\022\022\n\nstart_time\030\002 \001(\002"
    "\022\020\n\010end_time\030\003 \001(\002\"\265\003\n\027CCSUsrMsg_Surviva"
    "lStats\022\014\n\004xuid\030\001 \001(\004\022,\n\005facts\030\002 \003(\0132\035.CC"
    "SUsrMsg_SurvivalStats.Fact\0221\n\005users\030\003 \003("
    "\0132\".CCSUsrMsg_SurvivalStats.Placement\0220\n"
    "\007damages\030\005 \003(\0132\037.CCSUsrMsg_SurvivalStats"
    ".Damage\022\022\n\nticknumber\030\004 \001(\005\032M\n\004Fact\022\014\n\004t"
    "ype\030\001 \001(\005\022\017\n\007display\030\002 \001(\005\022\r\n\005value\030\003 \001("
    "\005\022\027\n\017interestingness\030\004 \001(\002\032@\n\tPlacement\022"
    "\014\n\004xuid\030\001 \001(\004\022\022\n\nteamnumber\030\002 \001(\005\022\021\n\tpla"
    "cement\030\003 \001(\005\032T\n\006Damage\022\014\n\004xuid\030\001 \001(\004\022\n\n\002"
    "to\030\002 \001(\005\022\017\n\007to_hits\030\003 \001(\005\022\014\n\004from\030\004 \001(\005\022"
    "\021\n\tfrom_hits\030\005 \001(\005\"\234\003\n\"CCSUsrMsg_EndOfMa"
    "tchAllPlayersData\022E\n\rallplayerdata\030\001 \003(\013"
    "2..CCSUsrMsg_EndOfMatchAllPlayersData.Pl"
    "ayerData\022\r\n\005scene\030\002 \001(\005\032>\n\010Accolade\022\021\n\te"
    "accolade\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\022\020\n\010positio"
    "n\030\003 \001(\005\032\337\001\n\nPlayerData\022\020\n\010entindex\030\001 \001(\005"
    "\022\014\n\004xuid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\022\n\nteamnumb"
    "er\030\004 \001(\005\022@\n\nnomination\030\005 \001(\0132,.CCSUsrMsg"
    "_EndOfMatchAllPlayersData.Accolade\022)\n\005it"
    "ems\030\006 \003(\0132\032.CEconItemPreviewDataBlock\022\023\n"
    "\013playercolor\030\007 \001(\005\022\r\n\005isbot\030\010 \001(\010\"\352\006\n\036CC"
    "SUsrMsg_RoundImpactScoreData\022J\n\017init_con"
    "ditions\030\001 \001(\01321.CCSUsrMsg_RoundImpactSco"
    "reData.InitialConditions\022D\n\022all_ris_even"
    "t_data\030\002 \003(\0132(.CCSUsrMsg_RoundImpactScor"
    "eData.RisEvent\032\331\004\n\010RisEvent\022\021\n\ttimestamp"
    "\030\001 \001(\002\022\026\n\016terrorist_odds\030\002 \001(\005\022\020\n\010ct_ali"
    "ve\030\003 \001(\005\022\017\n\007t_alive\030\004 \001(\005\022D\n\013victim_data"
    "\030\005 \001(\0132/.CCSUsrMsg_RoundImpactScoreData."
    "RisEvent.Victim\022J\n\016objective_data\030\006 \001(\0132"
    "2.CCSUsrMsg_RoundImpactScoreData.RisEven"
    "t.Objective\022H\n\017all_damage_data\030\007 \003(\0132/.C"
    "CSUsrMsg_RoundImpactScoreData.RisEvent.D"
    "amage\032m\n\006Victim\022\023\n\013team_number\030\001 \001(\005\022\020\n\010"
    "entindex\030\002 \001(\005\022\014\n\004xuid\030\003 \001(\004\022\r\n\005color\030\004 "
    "\001(\005\022\016\n\006is_bot\030\005 \001(\010\022\017\n\007is_dead\030\006 \001(\010\032\031\n\t"
    "Objective\022\014\n\004type\030\001 \001(\005\032\230\001\n\006Damage\022\027\n\017ta"
    "rget_entindex\030\001 \001(\005\022\023\n\013target_xuid\030\002 \001(\004"
    "\022\026\n\016health_removed\030\003 \001(\005\022\020\n\010num_hits\030\004 \001"
    "(\005\022\035\n\025return_health_removed\030\005 \001(\005\022\027\n\017num"
    "_return_hits\030\006 \001(\005\032Z\n\021InitialConditions\022"
    "\026\n\016ct_equip_value\030\001 \001(\005\022\025\n\rt_equip_value"
    "\030\002 \001(\005\022\026\n\016terrorist_odds\030\003 \001(\005\"*\n\032CCSUsr"
    "Msg_CurrentRoundOdds\022\014\n\004odds\030\001 \001(\005\"\226\005\n\024D"
    "eepPlayerStatsEntry\022\021\n\taccountid\030\001 \001(\r\022\020"
    "\n\010match_id\030\002 \001(\004\022\024\n\014mm_game_mode\030\003 \001(\r\022\r"
    "\n\005mapid\030\004 \001(\r\022\025\n\rb_starting_ct\030\005 \001(\010\022\025\n\r"
    "match_outcome\030\006 \001(\r\022\022\n\nrounds_won\030\007 \001(\r\022"
    "\023\n\013rounds_lost\030\010 \001(\r\022\022\n\nstat_score\030\t \001(\r"
    "\022\023\n\013stat_deaths\030\014 \001(\r\022\021\n\tstat_mvps\030\r \001(\r"
    "\022\023\n\013enemy_kills\030\016 \001(\r\022\027\n\017enemy_headshots"
    "\030\017 \001(\r\022\021\n\tenemy_2ks\030\020 \001(\r\022\021\n\tenemy_3ks\030\021"
    " \001(\r\022\021\n\tenemy_4ks\030\022 \001(\r\022\024\n\014total_damage\030"
    "\023 \001(\r\022\037\n\027engagements_entry_count\030\027 \001(\r\022\036"
    "\n\026engagements_entry_wins\030\030 \001(\r\022\035\n\025engage"
    "ments_1v1_count\030\031 \001(\r\022\034\n\024engagements_1v1"
    "_wins\030\032 \001(\r\022\035\n\025engagements_1v2_count\030\033 \001"
    "(\r\022\034\n\024engagements_1v2_wins\030\034 \001(\r\022\025\n\rutil"
    "ity_count\030\035 \001(\r\022\027\n\017utility_success\030\036 \001(\r"
    "\022\023\n\013flash_count\030  \001(\r\022\025\n\rflash_success\030!"
    " \001(\r\022\r\n\005mates\030\" \003(\r\"\261\002\n\024DeepPlayerMatchE"
    "vent\022\021\n\taccountid\030\001 \001(\r\022\020\n\010match_id\030\002 \001("
    "\004\022\020\n\010event_id\030\003 \001(\r\022\022\n\nevent_type\030\004 \001(\r\022"
    "\024\n\014b_playing_ct\030\005 \001(\010\022\022\n\nuser_pos_x\030\006 \001("
    "\005\022\022\n\nuser_pos_y\030\007 \001(\005\022\022\n\nuser_pos_z\030\014 \001("
    "\005\022\023\n\013user_defidx\030\010 \001(\r\022\023\n\013other_pos_x\030\t "
    "\001(\005\022\023\n\013other_pos_y\030\n \001(\005\022\023\n\013other_pos_z\030"
    "\r \001(\005\022\024\n\014other_defidx\030\013 \001(\r\022\022\n\nevent_dat"
    "a\030\016 \001(\005\"\325\002\n\037CMsgGCCStrike15_ClientDeepSt"
    "ats\022\022\n\naccount_id\030\001 \001(\r\022>\n\005range\030\002 \001(\0132/"
    ".CMsgGCCStrike15_ClientDeepStats.DeepSta"
    "tsRange\022@\n\007matches\030\003 \003(\0132/.CMsgGCCStrike"
    "15_ClientDeepStats.DeepStatsMatch\032<\n\016Dee"
    "pStatsRange\022\r\n\005begin\030\001 \001(\r\022\013\n\003end\030\002 \001(\r\022"
    "\016\n\006frozen\030\003 \001(\010\032^\n\016DeepStatsMatch\022%\n\006pla"
    "yer\030\001 \001(\0132\025.DeepPlayerStatsEntry\022%\n\006even"
    "ts\030\002 \003(\0132\025.DeepPlayerMatchEvent\"F\n\023CCSUs"
    "rMsg_DeepStats\022/\n\005stats\030\001 \001(\0132 .CMsgGCCS"
    "trike15_ClientDeepStats\"\205\001\n\021PlayerRankin"
    "gInfo\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007rank_id\030\002 \001"
    "(\r\022\014\n\004wins\030\003 \001(\r\022\023\n\013rank_change\030\004 \001(\002\022\024\n"
    "\014rank_type_id\030\006 \001(\r\022\022\n\ntv_control\030\007 \001(\r\""
    "X\n\rIpAddressMask\022\t\n\001a\030\001 \001(\r\022\t\n\001b\030\002 \001(\r\022\t"
    "\n\001c\030\003 \001(\r\022\t\n\001d\030\004 \001(\r\022\014\n\004bits\030\005 \001(\r\022\r\n\005to"
    "ken\030\006 \001(\r\"\337\001\n\017TournamentEvent\022\020\n\010event_i"
    "d\030\001 \001(\005\022\021\n\tevent_tag\030\002 \001(\t\022\022\n\nevent_name"
    "\030\003 \001(\t\022\030\n\020event_time_start\030\004 \001(\r\022\026\n\016even"
    "t_time_end\030\005 \001(\r\022\024\n\014event_public\030\006 \001(\005\022\026"
    "\n\016event_stage_id\030\007 \001(\005\022\030\n\020event_stage_na"
    "me\030\010 \001(\t\022\031\n\021active_section_id\030\t \001(\r\"\247\001\n\020"
    "TournamentPlayer\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013"
    "player_nick\030\002 \001(\t\022\023\n\013player_name\030\003 \001(\t\022\022"
    "\n\nplayer_dob\030\004 \001(\r\022\023\n\013player_flag\030\005 \001(\t\022"
    "\027\n\017player_location\030\006 \001(\t\022\023\n\013player_desc\030"
    "\007 \001(\t\"}\n\016TournamentTeam\022\017\n\007team_id\030\001 \001(\005"
    "\022\020\n\010team_tag\030\002 \001(\t\022\021\n\tteam_flag\030\003 \001(\t\022\021\n"
    "\tteam_name\030\004 \001(\t\022\"\n\007players\030\005 \003(\0132\021.Tour"
    "namentPlayer\"\326\002\n(CDataGCCStrike15_v2_Tou"
    "rnamentMatchDraft\022\020\n\010event_id\030\001 \001(\005\022\026\n\016e"
    "vent_stage_id\030\002 \001(\005\022\021\n\tteam_id_0\030\003 \001(\005\022\021"
    "\n\tteam_id_1\030\004 \001(\005\022\022\n\nmaps_count\030\005 \001(\005\022\024\n"
    "\014maps_current\030\006 \001(\005\022\025\n\rteam_id_start\030\007 \001"
    "(\005\022\025\n\rteam_id_veto1\030\010 \001(\005\022\025\n\rteam_id_pic"
    "kn\030\t \001(\005\022\?\n\006drafts\030\n \003(\0132/.CDataGCCStrik"
    "e15_v2_TournamentMatchDraft.Entry\032*\n\005Ent"
    "ry\022\r\n\005mapid\030\001 \001(\005\022\022\n\nteam_id_ct\030\002 \001(\005\"\373\001"
    "\n\021CPreMatchInfoData\022\027\n\017predictions_pct\030\001"
    " \001(\005\0228\n\005draft\030\004 \001(\0132).CDataGCCStrike15_v"
    "2_TournamentMatchDraft\022+\n\005stats\030\005 \003(\0132\034."
    "CPreMatchInfoData.TeamStats\022\014\n\004wins\030\006 \003("
    "\005\032X\n\tTeamStats\022\031\n\021match_info_idxtxt\030\001 \001("
    "\005\022\026\n\016match_info_txt\030\002 \001(\t\022\030\n\020match_info_"
    "teams\030\003 \003(\t\"\262\004\n.CMsgGCCStrike15_v2_Match"
    "makingGC2ServerReserve\022\023\n\013account_ids\030\001 "
    "\003(\r\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010match_id\030\003 \001(\004"
    "\022\026\n\016server_version\030\004 \001(\r\022\r\n\005flags\030\022 \001(\r\022"
    "$\n\010rankings\030\005 \003(\0132\022.PlayerRankingInfo\022\026\n"
    "\016encryption_key\030\006 \001(\004\022\032\n\022encryption_key_"
    "pub\030\007 \001(\004\022\021\n\tparty_ids\030\010 \003(\r\022!\n\twhitelis"
    "t\030\t \003(\0132\016.IpAddressMask\022\031\n\021tv_master_ste"
    "amid\030\n \001(\004\022*\n\020tournament_event\030\013 \001(\0132\020.T"
    "ournamentEvent\022)\n\020tournament_teams\030\014 \003(\013"
    "2\017.TournamentTeam\022&\n\036tournament_casters_"
    "account_ids\030\r \003(\r\022\030\n\020tv_relay_steamid\030\016 "
    "\001(\004\022*\n\016pre_match_data\030\017 \001(\0132\022.CPreMatchI"
    "nfoData\022\033\n\023rtime32_event_start\030\020 \001(\r\022\022\n\n"
    "tv_control\030\021 \001(\r\"\204\001\n\035CCSUsrMsg_ServerRan"
    "kRevealAll\022\035\n\025seconds_till_shutdown\030\001 \001("
    "\005\022D\n\013reservation\030\002 \001(\0132/.CMsgGCCStrike15"
    "_v2_MatchmakingGC2ServerReserve\"#\n\022CCSUs"
    "rMsg_ResetHud\022\r\n\005reset\030\001 \001(\010\"$\n\023CCSUsrMs"
    "g_GameTitle\022\r\n\005dummy\030\001 \001(\005\"\'\n\026CCSUsrMsg_"
    "RequestState\022\r\n\005dummy\030\001 \001(\005\",\n\033CCSUsrMsg"
    "_StopSpectatorMode\022\r\n\005dummy\030\001 \001(\005\",\n\033CCS"
    "UsrMsg_DisconnectToLobby\022\r\n\005dummy\030\001 \001(\005\""
    ")\n\030CCSUsrMsg_WarmupHasEnded\022\r\n\005dummy\030\001 \001"
    "(\005\"%\n\024CCSUsrMsg_ClientInfo\022\r\n\005dummy\030\001 \001("
    "\005*\257\016\n\026ECstrike15UserMessages\022\022\n\016CS_UM_VG"
    "UIMenu\020\001\022\020\n\014CS_UM_Geiger\020\002\022\017\n\013CS_UM_Trai"
    "n\020\003\022\021\n\rCS_UM_HudText\020\004\022\021\n\rCS_UM_SayText\020"
    "\005\022\022\n\016CS_UM_SayText2\020\006\022\021\n\rCS_UM_TextMsg\020\007"
    "\022\020\n\014CS_UM_HudMsg\020\010\022\022\n\016CS_UM_ResetHud\020\t\022\023"
    "\n\017CS_UM_GameTitle\020\n\022\017\n\013CS_UM_Shake\020\014\022\016\n\n"
    "CS_UM_Fade\020\r\022\020\n\014CS_UM_Rumble\020\016\022\026\n\022CS_UM_"
    "CloseCaption\020\017\022\034\n\030CS_UM_CloseCaptionDire"
    "ct\020\020\022\023\n\017CS_UM_SendAudio\020\021\022\022\n\016CS_UM_RawAu"
    "dio\020\022\022\023\n\017CS_UM_VoiceMask\020\023\022\026\n\022CS_UM_Requ"
    "estState\020\024\022\020\n\014CS_UM_Damage\020\025\022\023\n\017CS_UM_Ra"
    "dioText\020\026\022\022\n\016CS_UM_HintText\020\027\022\025\n\021CS_UM_K"
    "eyHintText\020\030\022$\n CS_UM_ProcessSpottedEnti"
    "tyUpdate\020\031\022\026\n\022CS_UM_ReloadEffect\020\032\022\025\n\021CS"
    "_UM_AdjustMoney\020\033\022\031\n\025CS_UM_UpdateTeamMon"
    "ey\020\034\022\033\n\027CS_UM_StopSpectatorMode\020\035\022\021\n\rCS_"
    "UM_KillCam\020\036\022\032\n\026CS_UM_DesiredTimescale\020\037"
    "\022\032\n\026CS_UM_CurrentTimescale\020 \022\032\n\026CS_UM_Ac"
    "hievementEvent\020!\022\034\n\030CS_UM_MatchEndCondit"
    "ions\020\"\022\033\n\027CS_UM_DisconnectToLobby\020#\022\033\n\027C"
    "S_UM_PlayerStatsUpdate\020$\022\032\n\026CS_UM_Displa"
    "yInventory\020%\022\030\n\024CS_UM_WarmupHasEnded\020&\022\024"
    "\n\020CS_UM_ClientInfo\020\'\022\022\n\016CS_UM_XRankGet\020("
    "\022\022\n\016CS_UM_XRankUpd\020)\022\030\n\024CS_UM_CallVoteFa"
    "iled\020-\022\023\n\017CS_UM_VoteStart\020.\022\022\n\016CS_UM_Vot"
    "ePass\020/\022\024\n\020CS_UM_VoteFailed\0200\022\023\n\017CS_UM_V"
    "oteSetup\0201\022\035\n\031CS_UM_ServerRankRevealAll\020"
    "2\022&\n\"CS_UM_SendLastKillerDamageToClient\020"
    "3\022\032\n\026CS_UM_ServerRankUpdate\0204\022\024\n\020CS_UM_I"
    "temPickup\0205\022\022\n\016CS_UM_ShowMenu\0206\022\021\n\rCS_UM"
    "_BarTime\0207\022\024\n\020CS_UM_AmmoDenied\0208\022\031\n\025CS_U"
    "M_MarkAchievement\0209\022\032\n\026CS_UM_MatchStatsU"
    "pdate\020:\022\022\n\016CS_UM_ItemDrop\020;\022\031\n\025CS_UM_Glo"
    "wPropTurnOff\020<\022\035\n\031CS_UM_SendPlayerItemDr"
    "ops\020=\022\036\n\032CS_UM_RoundBackupFilenames\020>\022\035\n"
    "\031CS_UM_SendPlayerItemFound\020\?\022\023\n\017CS_UM_Re"
    "portHit\020@\022\022\n\016CS_UM_XpUpdate\020A\022\027\n\023CS_UM_Q"
    "uestProgress\020B\022\036\n\032CS_UM_ScoreLeaderboard"
    "Data\020C\022%\n!CS_UM_PlayerDecalDigitalSignat"
    "ure\020D\022\025\n\021CS_UM_WeaponSound\020E\022\037\n\033CS_UM_Up"
    "dateScreenHealthBar\020F\022 \n\034CS_UM_EntityOut"
    "lineHighlight\020G\022\016\n\nCS_UM_SSUI\020H\022\027\n\023CS_UM"
    "_SurvivalStats\020I\022\034\n\030CS_UM_DisconnectToLo"
    "bby2\020J\022\"\n\036CS_UM_EndOfMatchAllPlayersData"
    "\020K\022\036\n\032CS_UM_RoundImpactScoreData\020O\022\032\n\026CS"
    "_UM_CurrentRoundOdds\020P\022\023\n\017CS_UM_DeepStat"
    "s\020Q*\210\001\n\"ECSUsrMsg_DisconnectToLobby_Acti"
    "on\0220\n,k_ECSUsrMsg_DisconnectToLobby_Acti"
    "on_Default\020\000\0220\n,k_ECSUsrMsg_DisconnectTo"
    "Lobby_Action_GoQueue\020\001B\005H\001\200\001\000", 14309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cstrike15_usermessages.proto", &protobuf_RegisterTypes);
  CCSUsrMsg_VGUIMenu::default_instance_ = new CCSUsrMsg_VGUIMenu();
  CCSUsrMsg_VGUIMenu_Subkey::default_instance_ = new CCSUsrMsg_VGUIMenu_Subkey();
  CCSUsrMsg_Geiger::default_instance_ = new CCSUsrMsg_Geiger();
  CCSUsrMsg_Train::default_instance_ = new CCSUsrMsg_Train();
  CCSUsrMsg_HudText::default_instance_ = new CCSUsrMsg_HudText();
  CCSUsrMsg_SayText::default_instance_ = new CCSUsrMsg_SayText();
  CCSUsrMsg_SayText2::default_instance_ = new CCSUsrMsg_SayText2();
  CCSUsrMsg_TextMsg::default_instance_ = new CCSUsrMsg_TextMsg();
  CCSUsrMsg_HudMsg::default_instance_ = new CCSUsrMsg_HudMsg();
  CCSUsrMsg_Shake::default_instance_ = new CCSUsrMsg_Shake();
  CCSUsrMsg_Fade::default_instance_ = new CCSUsrMsg_Fade();
  CCSUsrMsg_Rumble::default_instance_ = new CCSUsrMsg_Rumble();
  CCSUsrMsg_CloseCaption::default_instance_ = new CCSUsrMsg_CloseCaption();
  CCSUsrMsg_CloseCaptionDirect::default_instance_ = new CCSUsrMsg_CloseCaptionDirect();
  CCSUsrMsg_SendAudio::default_instance_ = new CCSUsrMsg_SendAudio();
  CCSUsrMsg_RawAudio::default_instance_ = new CCSUsrMsg_RawAudio();
  CCSUsrMsg_VoiceMask::default_instance_ = new CCSUsrMsg_VoiceMask();
  CCSUsrMsg_VoiceMask_PlayerMask::default_instance_ = new CCSUsrMsg_VoiceMask_PlayerMask();
  CCSUsrMsg_Damage::default_instance_ = new CCSUsrMsg_Damage();
  CCSUsrMsg_RadioText::default_instance_ = new CCSUsrMsg_RadioText();
  CCSUsrMsg_HintText::default_instance_ = new CCSUsrMsg_HintText();
  CCSUsrMsg_KeyHintText::default_instance_ = new CCSUsrMsg_KeyHintText();
  CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_ = new CCSUsrMsg_ProcessSpottedEntityUpdate();
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_ = new CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate();
  CEconItemPreviewDataBlock::default_instance_ = new CEconItemPreviewDataBlock();
  CEconItemPreviewDataBlock_Sticker::default_instance_ = new CEconItemPreviewDataBlock_Sticker();
  CCSUsrMsg_SendPlayerItemDrops::default_instance_ = new CCSUsrMsg_SendPlayerItemDrops();
  CCSUsrMsg_SendPlayerItemFound::default_instance_ = new CCSUsrMsg_SendPlayerItemFound();
  CCSUsrMsg_ReloadEffect::default_instance_ = new CCSUsrMsg_ReloadEffect();
  CCSUsrMsg_AdjustMoney::default_instance_ = new CCSUsrMsg_AdjustMoney();
  CCSUsrMsg_ReportHit::default_instance_ = new CCSUsrMsg_ReportHit();
  CCSUsrMsg_KillCam::default_instance_ = new CCSUsrMsg_KillCam();
  CCSUsrMsg_DesiredTimescale::default_instance_ = new CCSUsrMsg_DesiredTimescale();
  CCSUsrMsg_CurrentTimescale::default_instance_ = new CCSUsrMsg_CurrentTimescale();
  CCSUsrMsg_AchievementEvent::default_instance_ = new CCSUsrMsg_AchievementEvent();
  CCSUsrMsg_MatchEndConditions::default_instance_ = new CCSUsrMsg_MatchEndConditions();
  CCSUsrMsg_PlayerStatsUpdate::default_instance_ = new CCSUsrMsg_PlayerStatsUpdate();
  CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = new CCSUsrMsg_PlayerStatsUpdate_Stat();
  CCSUsrMsg_DisplayInventory::default_instance_ = new CCSUsrMsg_DisplayInventory();
  CCSUsrMsg_XRankGet::default_instance_ = new CCSUsrMsg_XRankGet();
  CCSUsrMsg_XRankUpd::default_instance_ = new CCSUsrMsg_XRankUpd();
  CCSUsrMsg_CallVoteFailed::default_instance_ = new CCSUsrMsg_CallVoteFailed();
  CCSUsrMsg_VoteStart::default_instance_ = new CCSUsrMsg_VoteStart();
  CCSUsrMsg_VotePass::default_instance_ = new CCSUsrMsg_VotePass();
  CCSUsrMsg_VoteFailed::default_instance_ = new CCSUsrMsg_VoteFailed();
  CCSUsrMsg_VoteSetup::default_instance_ = new CCSUsrMsg_VoteSetup();
  CCSUsrMsg_SendLastKillerDamageToClient::default_instance_ = new CCSUsrMsg_SendLastKillerDamageToClient();
  CCSUsrMsg_ServerRankUpdate::default_instance_ = new CCSUsrMsg_ServerRankUpdate();
  CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_ = new CCSUsrMsg_ServerRankUpdate_RankUpdate();
  CCSUsrMsg_ItemPickup::default_instance_ = new CCSUsrMsg_ItemPickup();
  CCSUsrMsg_ShowMenu::default_instance_ = new CCSUsrMsg_ShowMenu();
  CCSUsrMsg_BarTime::default_instance_ = new CCSUsrMsg_BarTime();
  CCSUsrMsg_AmmoDenied::default_instance_ = new CCSUsrMsg_AmmoDenied();
  CCSUsrMsg_MarkAchievement::default_instance_ = new CCSUsrMsg_MarkAchievement();
  CCSUsrMsg_MatchStatsUpdate::default_instance_ = new CCSUsrMsg_MatchStatsUpdate();
  CCSUsrMsg_ItemDrop::default_instance_ = new CCSUsrMsg_ItemDrop();
  CCSUsrMsg_GlowPropTurnOff::default_instance_ = new CCSUsrMsg_GlowPropTurnOff();
  CCSUsrMsg_RoundBackupFilenames::default_instance_ = new CCSUsrMsg_RoundBackupFilenames();
  XpProgressData::default_instance_ = new XpProgressData();
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_ = new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
  CCSUsrMsg_XpUpdate::default_instance_ = new CCSUsrMsg_XpUpdate();
  CCSUsrMsg_QuestProgress::default_instance_ = new CCSUsrMsg_QuestProgress();
  ScoreLeaderboardData::default_instance_ = new ScoreLeaderboardData();
  ScoreLeaderboardData_Entry::default_instance_ = new ScoreLeaderboardData_Entry();
  ScoreLeaderboardData_AccountEntries::default_instance_ = new ScoreLeaderboardData_AccountEntries();
  CCSUsrMsg_ScoreLeaderboardData::default_instance_ = new CCSUsrMsg_ScoreLeaderboardData();
  PlayerDecalDigitalSignature::default_instance_ = new PlayerDecalDigitalSignature();
  CCSUsrMsg_PlayerDecalDigitalSignature::default_instance_ = new CCSUsrMsg_PlayerDecalDigitalSignature();
  CCSUsrMsg_WeaponSound::default_instance_ = new CCSUsrMsg_WeaponSound();
  CCSUsrMsg_UpdateScreenHealthBar::default_instance_ = new CCSUsrMsg_UpdateScreenHealthBar();
  CCSUsrMsg_EntityOutlineHighlight::default_instance_ = new CCSUsrMsg_EntityOutlineHighlight();
  CCSUsrMsg_SSUI::default_instance_ = new CCSUsrMsg_SSUI();
  CCSUsrMsg_SurvivalStats::default_instance_ = new CCSUsrMsg_SurvivalStats();
  CCSUsrMsg_SurvivalStats_Fact::default_instance_ = new CCSUsrMsg_SurvivalStats_Fact();
  CCSUsrMsg_SurvivalStats_Placement::default_instance_ = new CCSUsrMsg_SurvivalStats_Placement();
  CCSUsrMsg_SurvivalStats_Damage::default_instance_ = new CCSUsrMsg_SurvivalStats_Damage();
  CCSUsrMsg_EndOfMatchAllPlayersData::default_instance_ = new CCSUsrMsg_EndOfMatchAllPlayersData();
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance_ = new CCSUsrMsg_EndOfMatchAllPlayersData_Accolade();
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance_ = new CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData();
  CCSUsrMsg_RoundImpactScoreData::default_instance_ = new CCSUsrMsg_RoundImpactScoreData();
  CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance_ = new CCSUsrMsg_RoundImpactScoreData_RisEvent();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance_ = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance_ = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance_ = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage();
  CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance_ = new CCSUsrMsg_RoundImpactScoreData_InitialConditions();
  CCSUsrMsg_CurrentRoundOdds::default_instance_ = new CCSUsrMsg_CurrentRoundOdds();
  DeepPlayerStatsEntry::default_instance_ = new DeepPlayerStatsEntry();
  DeepPlayerMatchEvent::default_instance_ = new DeepPlayerMatchEvent();
  CMsgGCCStrike15_ClientDeepStats::default_instance_ = new CMsgGCCStrike15_ClientDeepStats();
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance_ = new CMsgGCCStrike15_ClientDeepStats_DeepStatsRange();
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance_ = new CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch();
  CCSUsrMsg_DeepStats::default_instance_ = new CCSUsrMsg_DeepStats();
  PlayerRankingInfo::default_instance_ = new PlayerRankingInfo();
  IpAddressMask::default_instance_ = new IpAddressMask();
  TournamentEvent::default_instance_ = new TournamentEvent();
  TournamentPlayer::default_instance_ = new TournamentPlayer();
  TournamentTeam::default_instance_ = new TournamentTeam();
  CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_ = new CDataGCCStrike15_v2_TournamentMatchDraft();
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_ = new CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
  CPreMatchInfoData::default_instance_ = new CPreMatchInfoData();
  CPreMatchInfoData_TeamStats::default_instance_ = new CPreMatchInfoData_TeamStats();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
  CCSUsrMsg_ServerRankRevealAll::default_instance_ = new CCSUsrMsg_ServerRankRevealAll();
  CCSUsrMsg_ResetHud::default_instance_ = new CCSUsrMsg_ResetHud();
  CCSUsrMsg_GameTitle::default_instance_ = new CCSUsrMsg_GameTitle();
  CCSUsrMsg_RequestState::default_instance_ = new CCSUsrMsg_RequestState();
  CCSUsrMsg_StopSpectatorMode::default_instance_ = new CCSUsrMsg_StopSpectatorMode();
  CCSUsrMsg_DisconnectToLobby::default_instance_ = new CCSUsrMsg_DisconnectToLobby();
  CCSUsrMsg_WarmupHasEnded::default_instance_ = new CCSUsrMsg_WarmupHasEnded();
  CCSUsrMsg_ClientInfo::default_instance_ = new CCSUsrMsg_ClientInfo();
  CCSUsrMsg_VGUIMenu::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VGUIMenu_Subkey::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Geiger::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Train::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HudText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SayText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SayText2::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_TextMsg::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HudMsg::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Shake::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Fade::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Rumble::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CloseCaption::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CloseCaptionDirect::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendAudio::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RawAudio::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoiceMask::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoiceMask_PlayerMask::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Damage::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RadioText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HintText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_KeyHintText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_->InitAsDefaultInstance();
  CEconItemPreviewDataBlock::default_instance_->InitAsDefaultInstance();
  CEconItemPreviewDataBlock_Sticker::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendPlayerItemDrops::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendPlayerItemFound::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ReloadEffect::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AdjustMoney::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ReportHit::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_KillCam::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DesiredTimescale::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CurrentTimescale::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AchievementEvent::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MatchEndConditions::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_PlayerStatsUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DisplayInventory::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_XRankGet::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_XRankUpd::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CallVoteFailed::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteStart::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VotePass::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteFailed::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteSetup::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendLastKillerDamageToClient::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ItemPickup::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ShowMenu::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_BarTime::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AmmoDenied::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MarkAchievement::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MatchStatsUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ItemDrop::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_GlowPropTurnOff::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundBackupFilenames::default_instance_->InitAsDefaultInstance();
  XpProgressData::default_instance_->InitAsDefaultInstance();
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_XpUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_QuestProgress::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData_Entry::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData_AccountEntries::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ScoreLeaderboardData::default_instance_->InitAsDefaultInstance();
  PlayerDecalDigitalSignature::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_PlayerDecalDigitalSignature::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_WeaponSound::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_UpdateScreenHealthBar::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_EntityOutlineHighlight::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SSUI::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SurvivalStats::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SurvivalStats_Fact::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SurvivalStats_Placement::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SurvivalStats_Damage::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_EndOfMatchAllPlayersData::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CurrentRoundOdds::default_instance_->InitAsDefaultInstance();
  DeepPlayerStatsEntry::default_instance_->InitAsDefaultInstance();
  DeepPlayerMatchEvent::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_ClientDeepStats::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DeepStats::default_instance_->InitAsDefaultInstance();
  PlayerRankingInfo::default_instance_->InitAsDefaultInstance();
  IpAddressMask::default_instance_->InitAsDefaultInstance();
  TournamentEvent::default_instance_->InitAsDefaultInstance();
  TournamentPlayer::default_instance_->InitAsDefaultInstance();
  TournamentTeam::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_->InitAsDefaultInstance();
  CPreMatchInfoData::default_instance_->InitAsDefaultInstance();
  CPreMatchInfoData_TeamStats::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankRevealAll::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ResetHud::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_GameTitle::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RequestState::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_StopSpectatorMode::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DisconnectToLobby::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_WarmupHasEnded::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ClientInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cstrike15_5fusermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cstrike15_5fusermessages_2eproto {
  StaticDescriptorInitializer_cstrike15_5fusermessages_2eproto() {
    protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  }
} static_descriptor_initializer_cstrike15_5fusermessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ECstrike15UserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECstrike15UserMessages_descriptor_;
}
bool ECstrike15UserMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 79:
    case 80:
    case 81:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECSUsrMsg_DisconnectToLobby_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECSUsrMsg_DisconnectToLobby_Action_descriptor_;
}
bool ECSUsrMsg_DisconnectToLobby_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VGUIMenu_Subkey::kNameFieldNumber;
const int CCSUsrMsg_VGUIMenu_Subkey::kStrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VGUIMenu_Subkey::InitAsDefaultInstance() {
}

CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey(const CCSUsrMsg_VGUIMenu_Subkey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu_Subkey::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VGUIMenu_Subkey::~CCSUsrMsg_VGUIMenu_Subkey() {
  SharedDtor();
}

void CCSUsrMsg_VGUIMenu_Subkey::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VGUIMenu_Subkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_Subkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VGUIMenu_Subkey_descriptor_;
}

const CCSUsrMsg_VGUIMenu_Subkey& CCSUsrMsg_VGUIMenu_Subkey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VGUIMenu_Subkey* CCSUsrMsg_VGUIMenu_Subkey::default_instance_ = NULL;

CCSUsrMsg_VGUIMenu_Subkey* CCSUsrMsg_VGUIMenu_Subkey::New() const {
  return new CCSUsrMsg_VGUIMenu_Subkey;
}

void CCSUsrMsg_VGUIMenu_Subkey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VGUIMenu_Subkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VGUIMenu_Subkey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VGUIMenu_Subkey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VGUIMenu_Subkey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VGUIMenu_Subkey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VGUIMenu_Subkey::MergeFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VGUIMenu_Subkey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu_Subkey::CopyFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu_Subkey::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VGUIMenu_Subkey::Swap(CCSUsrMsg_VGUIMenu_Subkey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VGUIMenu_Subkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VGUIMenu_Subkey_descriptor_;
  metadata.reflection = CCSUsrMsg_VGUIMenu_Subkey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_VGUIMenu::kNameFieldNumber;
const int CCSUsrMsg_VGUIMenu::kShowFieldNumber;
const int CCSUsrMsg_VGUIMenu::kSubkeysFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VGUIMenu::InitAsDefaultInstance() {
}

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(const CCSUsrMsg_VGUIMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VGUIMenu::~CCSUsrMsg_VGUIMenu() {
  SharedDtor();
}

void CCSUsrMsg_VGUIMenu::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VGUIMenu_descriptor_;
}

const CCSUsrMsg_VGUIMenu& CCSUsrMsg_VGUIMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VGUIMenu* CCSUsrMsg_VGUIMenu::default_instance_ = NULL;

CCSUsrMsg_VGUIMenu* CCSUsrMsg_VGUIMenu::New() const {
  return new CCSUsrMsg_VGUIMenu;
}

void CCSUsrMsg_VGUIMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    show_ = false;
  }
  subkeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        break;
      }

      // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subkeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subkeys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VGUIMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subkeys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VGUIMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  total_size += 1 * this->subkeys_size();
  for (int i = 0; i < this->subkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subkeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VGUIMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VGUIMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VGUIMenu::MergeFrom(const CCSUsrMsg_VGUIMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  subkeys_.MergeFrom(from.subkeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const CCSUsrMsg_VGUIMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VGUIMenu::Swap(CCSUsrMsg_VGUIMenu* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(show_, other->show_);
    subkeys_.Swap(&other->subkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VGUIMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VGUIMenu_descriptor_;
  metadata.reflection = CCSUsrMsg_VGUIMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Geiger::kRangeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Geiger::InitAsDefaultInstance() {
}

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(const CCSUsrMsg_Geiger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Geiger::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Geiger::~CCSUsrMsg_Geiger() {
  SharedDtor();
}

void CCSUsrMsg_Geiger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Geiger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Geiger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Geiger_descriptor_;
}

const CCSUsrMsg_Geiger& CCSUsrMsg_Geiger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Geiger* CCSUsrMsg_Geiger::default_instance_ = NULL;

CCSUsrMsg_Geiger* CCSUsrMsg_Geiger::New() const {
  return new CCSUsrMsg_Geiger;
}

void CCSUsrMsg_Geiger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Geiger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Geiger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Geiger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Geiger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Geiger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Geiger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Geiger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Geiger::MergeFrom(const CCSUsrMsg_Geiger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Geiger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Geiger::CopyFrom(const CCSUsrMsg_Geiger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Geiger::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Geiger::Swap(CCSUsrMsg_Geiger* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Geiger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Geiger_descriptor_;
  metadata.reflection = CCSUsrMsg_Geiger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Train::kTrainFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Train::CCSUsrMsg_Train()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Train::InitAsDefaultInstance() {
}

CCSUsrMsg_Train::CCSUsrMsg_Train(const CCSUsrMsg_Train& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Train::SharedCtor() {
  _cached_size_ = 0;
  train_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Train::~CCSUsrMsg_Train() {
  SharedDtor();
}

void CCSUsrMsg_Train::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Train::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Train::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Train_descriptor_;
}

const CCSUsrMsg_Train& CCSUsrMsg_Train::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Train* CCSUsrMsg_Train::default_instance_ = NULL;

CCSUsrMsg_Train* CCSUsrMsg_Train::New() const {
  return new CCSUsrMsg_Train;
}

void CCSUsrMsg_Train::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Train::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 train = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_)));
          set_has_train();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Train::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 train = 1;
  if (has_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Train::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 train = 1;
  if (has_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Train::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 train = 1;
    if (has_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Train::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Train* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Train*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Train::MergeFrom(const CCSUsrMsg_Train& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train()) {
      set_train(from.train());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Train::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Train::CopyFrom(const CCSUsrMsg_Train& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Train::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Train::Swap(CCSUsrMsg_Train* other) {
  if (other != this) {
    std::swap(train_, other->train_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Train::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Train_descriptor_;
  metadata.reflection = CCSUsrMsg_Train_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_HudText::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HudText::CCSUsrMsg_HudText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HudText::InitAsDefaultInstance() {
}

CCSUsrMsg_HudText::CCSUsrMsg_HudText(const CCSUsrMsg_HudText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HudText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HudText::~CCSUsrMsg_HudText() {
  SharedDtor();
}

void CCSUsrMsg_HudText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_HudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HudText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HudText_descriptor_;
}

const CCSUsrMsg_HudText& CCSUsrMsg_HudText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_HudText* CCSUsrMsg_HudText::default_instance_ = NULL;

CCSUsrMsg_HudText* CCSUsrMsg_HudText::New() const {
  return new CCSUsrMsg_HudText;
}

void CCSUsrMsg_HudText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HudText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HudText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HudText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HudText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HudText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HudText::MergeFrom(const CCSUsrMsg_HudText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HudText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HudText::CopyFrom(const CCSUsrMsg_HudText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudText::IsInitialized() const {

  return true;
}

void CCSUsrMsg_HudText::Swap(CCSUsrMsg_HudText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HudText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HudText_descriptor_;
  metadata.reflection = CCSUsrMsg_HudText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SayText::kEntIdxFieldNumber;
const int CCSUsrMsg_SayText::kTextFieldNumber;
const int CCSUsrMsg_SayText::kChatFieldNumber;
const int CCSUsrMsg_SayText::kTextallchatFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SayText::CCSUsrMsg_SayText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SayText::InitAsDefaultInstance() {
}

CCSUsrMsg_SayText::CCSUsrMsg_SayText(const CCSUsrMsg_SayText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SayText::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_ = false;
  textallchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SayText::~CCSUsrMsg_SayText() {
  SharedDtor();
}

void CCSUsrMsg_SayText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SayText_descriptor_;
}

const CCSUsrMsg_SayText& CCSUsrMsg_SayText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SayText* CCSUsrMsg_SayText::default_instance_ = NULL;

CCSUsrMsg_SayText* CCSUsrMsg_SayText::New() const {
  return new CCSUsrMsg_SayText;
}

void CCSUsrMsg_SayText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    chat_ = false;
    textallchat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }

      // optional bool chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_textallchat;
        break;
      }

      // optional bool textallchat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textallchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &textallchat_)));
          set_has_textallchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }

  // optional bool textallchat = 4;
  if (has_textallchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->textallchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SayText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }

  // optional bool textallchat = 4;
  if (has_textallchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->textallchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SayText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional bool textallchat = 4;
    if (has_textallchat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SayText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SayText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SayText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SayText::MergeFrom(const CCSUsrMsg_SayText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_textallchat()) {
      set_textallchat(from.textallchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SayText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SayText::CopyFrom(const CCSUsrMsg_SayText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SayText::Swap(CCSUsrMsg_SayText* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(text_, other->text_);
    std::swap(chat_, other->chat_);
    std::swap(textallchat_, other->textallchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SayText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SayText_descriptor_;
  metadata.reflection = CCSUsrMsg_SayText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SayText2::kEntIdxFieldNumber;
const int CCSUsrMsg_SayText2::kChatFieldNumber;
const int CCSUsrMsg_SayText2::kMsgNameFieldNumber;
const int CCSUsrMsg_SayText2::kParamsFieldNumber;
const int CCSUsrMsg_SayText2::kTextallchatFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SayText2::CCSUsrMsg_SayText2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SayText2::InitAsDefaultInstance() {
}

CCSUsrMsg_SayText2::CCSUsrMsg_SayText2(const CCSUsrMsg_SayText2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SayText2::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  chat_ = false;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  textallchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SayText2::~CCSUsrMsg_SayText2() {
  SharedDtor();
}

void CCSUsrMsg_SayText2::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SayText2_descriptor_;
}

const CCSUsrMsg_SayText2& CCSUsrMsg_SayText2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SayText2* CCSUsrMsg_SayText2::default_instance_ = NULL;

CCSUsrMsg_SayText2* CCSUsrMsg_SayText2::New() const {
  return new CCSUsrMsg_SayText2;
}

void CCSUsrMsg_SayText2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    chat_ = false;
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    textallchat_ = false;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_name;
        break;
      }

      // optional string msg_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated string params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectTag(40)) goto parse_textallchat;
        break;
      }

      // optional bool textallchat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textallchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &textallchat_)));
          set_has_textallchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_name(), output);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }

  // optional bool textallchat = 5;
  if (has_textallchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->textallchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SayText2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }

  // optional bool textallchat = 5;
  if (has_textallchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->textallchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SayText2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional string msg_name = 3;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }

    // optional bool textallchat = 5;
    if (has_textallchat()) {
      total_size += 1 + 1;
    }

  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SayText2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SayText2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SayText2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SayText2::MergeFrom(const CCSUsrMsg_SayText2& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_textallchat()) {
      set_textallchat(from.textallchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SayText2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SayText2::CopyFrom(const CCSUsrMsg_SayText2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText2::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SayText2::Swap(CCSUsrMsg_SayText2* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(chat_, other->chat_);
    std::swap(msg_name_, other->msg_name_);
    params_.Swap(&other->params_);
    std::swap(textallchat_, other->textallchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SayText2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SayText2_descriptor_;
  metadata.reflection = CCSUsrMsg_SayText2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_TextMsg::kMsgDstFieldNumber;
const int CCSUsrMsg_TextMsg::kParamsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_TextMsg::InitAsDefaultInstance() {
}

CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg(const CCSUsrMsg_TextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_TextMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_dst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_TextMsg::~CCSUsrMsg_TextMsg() {
  SharedDtor();
}

void CCSUsrMsg_TextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_TextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_TextMsg_descriptor_;
}

const CCSUsrMsg_TextMsg& CCSUsrMsg_TextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_TextMsg* CCSUsrMsg_TextMsg::default_instance_ = NULL;

CCSUsrMsg_TextMsg* CCSUsrMsg_TextMsg::New() const {
  return new CCSUsrMsg_TextMsg;
}

void CCSUsrMsg_TextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_dst_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_dst_)));
          set_has_msg_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // repeated string params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_dst(), output);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_TextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_dst(), target);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_TextMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_dst = 1;
    if (has_msg_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_dst());
    }

  }
  // repeated string params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_TextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_TextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_TextMsg::MergeFrom(const CCSUsrMsg_TextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_dst()) {
      set_msg_dst(from.msg_dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_TextMsg::CopyFrom(const CCSUsrMsg_TextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_TextMsg::IsInitialized() const {

  return true;
}

void CCSUsrMsg_TextMsg::Swap(CCSUsrMsg_TextMsg* other) {
  if (other != this) {
    std::swap(msg_dst_, other->msg_dst_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_TextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_TextMsg_descriptor_;
  metadata.reflection = CCSUsrMsg_TextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_HudMsg::kChannelFieldNumber;
const int CCSUsrMsg_HudMsg::kPosFieldNumber;
const int CCSUsrMsg_HudMsg::kClr1FieldNumber;
const int CCSUsrMsg_HudMsg::kClr2FieldNumber;
const int CCSUsrMsg_HudMsg::kEffectFieldNumber;
const int CCSUsrMsg_HudMsg::kFadeInTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kFadeOutTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kHoldTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kFxTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HudMsg::InitAsDefaultInstance() {
  pos_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
  clr1_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
  clr2_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(const CCSUsrMsg_HudMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HudMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  pos_ = NULL;
  clr1_ = NULL;
  clr2_ = NULL;
  effect_ = 0;
  fade_in_time_ = 0;
  fade_out_time_ = 0;
  hold_time_ = 0;
  fx_time_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HudMsg::~CCSUsrMsg_HudMsg() {
  SharedDtor();
}

void CCSUsrMsg_HudMsg::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete clr1_;
    delete clr2_;
  }
}

void CCSUsrMsg_HudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HudMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HudMsg_descriptor_;
}

const CCSUsrMsg_HudMsg& CCSUsrMsg_HudMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_HudMsg* CCSUsrMsg_HudMsg::default_instance_ = NULL;

CCSUsrMsg_HudMsg* CCSUsrMsg_HudMsg::New() const {
  return new CCSUsrMsg_HudMsg;
}

void CCSUsrMsg_HudMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CMsgVector2D::Clear();
    }
    if (has_clr1()) {
      if (clr1_ != NULL) clr1_->::CMsgRGBA::Clear();
    }
    if (has_clr2()) {
      if (clr2_ != NULL) clr2_->::CMsgRGBA::Clear();
    }
    effect_ = 0;
    fade_in_time_ = 0;
    fade_out_time_ = 0;
    hold_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fx_time_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .CMsgVector2D pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clr1;
        break;
      }

      // optional .CMsgRGBA clr1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr2;
        break;
      }

      // optional .CMsgRGBA clr2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // optional int32 effect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fade_in_time;
        break;
      }

      // optional float fade_in_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
          set_has_fade_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fade_out_time;
        break;
      }

      // optional float fade_out_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
          set_has_fade_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_hold_time;
        break;
      }

      // optional float hold_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fx_time;
        break;
      }

      // optional float fx_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
          set_has_fx_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_text;
        break;
      }

      // optional string text = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional .CMsgVector2D pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (has_clr1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clr1(), output);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (has_clr2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr2(), output);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effect(), output);
  }

  // optional float fade_in_time = 6;
  if (has_fade_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fade_in_time(), output);
  }

  // optional float fade_out_time = 7;
  if (has_fade_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_out_time(), output);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }

  // optional string text = 11;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HudMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional .CMsgVector2D pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (has_clr1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clr1(), target);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (has_clr2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr2(), target);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effect(), target);
  }

  // optional float fade_in_time = 6;
  if (has_fade_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fade_in_time(), target);
  }

  // optional float fade_out_time = 7;
  if (has_fade_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }

  // optional string text = 11;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HudMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .CMsgVector2D pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .CMsgRGBA clr1 = 3;
    if (has_clr1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr1());
    }

    // optional .CMsgRGBA clr2 = 4;
    if (has_clr2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr2());
    }

    // optional int32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }

    // optional float fade_in_time = 6;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 7;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }

    // optional string text = 11;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HudMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HudMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HudMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HudMsg::MergeFrom(const CCSUsrMsg_HudMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_pos()) {
      mutable_pos()->::CMsgVector2D::MergeFrom(from.pos());
    }
    if (from.has_clr1()) {
      mutable_clr1()->::CMsgRGBA::MergeFrom(from.clr1());
    }
    if (from.has_clr2()) {
      mutable_clr2()->::CMsgRGBA::MergeFrom(from.clr2());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_fade_in_time()) {
      set_fade_in_time(from.fade_in_time());
    }
    if (from.has_fade_out_time()) {
      set_fade_out_time(from.fade_out_time());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fx_time()) {
      set_fx_time(from.fx_time());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HudMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HudMsg::CopyFrom(const CCSUsrMsg_HudMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudMsg::IsInitialized() const {

  return true;
}

void CCSUsrMsg_HudMsg::Swap(CCSUsrMsg_HudMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(pos_, other->pos_);
    std::swap(clr1_, other->clr1_);
    std::swap(clr2_, other->clr2_);
    std::swap(effect_, other->effect_);
    std::swap(fade_in_time_, other->fade_in_time_);
    std::swap(fade_out_time_, other->fade_out_time_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(fx_time_, other->fx_time_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HudMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HudMsg_descriptor_;
  metadata.reflection = CCSUsrMsg_HudMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Shake::kCommandFieldNumber;
const int CCSUsrMsg_Shake::kLocalAmplitudeFieldNumber;
const int CCSUsrMsg_Shake::kFrequencyFieldNumber;
const int CCSUsrMsg_Shake::kDurationFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Shake::CCSUsrMsg_Shake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Shake::InitAsDefaultInstance() {
}

CCSUsrMsg_Shake::CCSUsrMsg_Shake(const CCSUsrMsg_Shake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Shake::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  local_amplitude_ = 0;
  frequency_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Shake::~CCSUsrMsg_Shake() {
  SharedDtor();
}

void CCSUsrMsg_Shake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Shake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Shake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Shake_descriptor_;
}

const CCSUsrMsg_Shake& CCSUsrMsg_Shake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Shake* CCSUsrMsg_Shake::default_instance_ = NULL;

CCSUsrMsg_Shake* CCSUsrMsg_Shake::New() const {
  return new CCSUsrMsg_Shake;
}

void CCSUsrMsg_Shake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    local_amplitude_ = 0;
    frequency_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Shake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_local_amplitude;
        break;
      }

      // optional float local_amplitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_local_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_amplitude_)));
          set_has_local_amplitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Shake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional float local_amplitude = 2;
  if (has_local_amplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->local_amplitude(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Shake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional float local_amplitude = 2;
  if (has_local_amplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->local_amplitude(), target);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Shake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // optional float local_amplitude = 2;
    if (has_local_amplitude()) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Shake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Shake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Shake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Shake::MergeFrom(const CCSUsrMsg_Shake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_local_amplitude()) {
      set_local_amplitude(from.local_amplitude());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Shake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Shake::CopyFrom(const CCSUsrMsg_Shake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Shake::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Shake::Swap(CCSUsrMsg_Shake* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(local_amplitude_, other->local_amplitude_);
    std::swap(frequency_, other->frequency_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Shake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Shake_descriptor_;
  metadata.reflection = CCSUsrMsg_Shake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Fade::kDurationFieldNumber;
const int CCSUsrMsg_Fade::kHoldTimeFieldNumber;
const int CCSUsrMsg_Fade::kFlagsFieldNumber;
const int CCSUsrMsg_Fade::kClrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Fade::CCSUsrMsg_Fade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Fade::InitAsDefaultInstance() {
  clr_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CCSUsrMsg_Fade::CCSUsrMsg_Fade(const CCSUsrMsg_Fade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Fade::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  hold_time_ = 0;
  flags_ = 0;
  clr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Fade::~CCSUsrMsg_Fade() {
  SharedDtor();
}

void CCSUsrMsg_Fade::SharedDtor() {
  if (this != default_instance_) {
    delete clr_;
  }
}

void CCSUsrMsg_Fade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Fade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Fade_descriptor_;
}

const CCSUsrMsg_Fade& CCSUsrMsg_Fade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Fade* CCSUsrMsg_Fade::default_instance_ = NULL;

CCSUsrMsg_Fade* CCSUsrMsg_Fade::New() const {
  return new CCSUsrMsg_Fade;
}

void CCSUsrMsg_Fade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    hold_time_ = 0;
    flags_ = 0;
    if (has_clr()) {
      if (clr_ != NULL) clr_->::CMsgRGBA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Fade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }

      // optional int32 hold_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr;
        break;
      }

      // optional .CMsgRGBA clr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Fade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 hold_time = 2;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hold_time(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional .CMsgRGBA clr = 4;
  if (has_clr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Fade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int32 hold_time = 2;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hold_time(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // optional .CMsgRGBA clr = 4;
  if (has_clr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Fade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hold_time());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional .CMsgRGBA clr = 4;
    if (has_clr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Fade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Fade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Fade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Fade::MergeFrom(const CCSUsrMsg_Fade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_clr()) {
      mutable_clr()->::CMsgRGBA::MergeFrom(from.clr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Fade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Fade::CopyFrom(const CCSUsrMsg_Fade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Fade::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Fade::Swap(CCSUsrMsg_Fade* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(flags_, other->flags_);
    std::swap(clr_, other->clr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Fade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Fade_descriptor_;
  metadata.reflection = CCSUsrMsg_Fade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Rumble::kIndexFieldNumber;
const int CCSUsrMsg_Rumble::kDataFieldNumber;
const int CCSUsrMsg_Rumble::kFlagsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Rumble::InitAsDefaultInstance() {
}

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(const CCSUsrMsg_Rumble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Rumble::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  data_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Rumble::~CCSUsrMsg_Rumble() {
  SharedDtor();
}

void CCSUsrMsg_Rumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Rumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Rumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Rumble_descriptor_;
}

const CCSUsrMsg_Rumble& CCSUsrMsg_Rumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Rumble* CCSUsrMsg_Rumble::default_instance_ = NULL;

CCSUsrMsg_Rumble* CCSUsrMsg_Rumble::New() const {
  return new CCSUsrMsg_Rumble;
}

void CCSUsrMsg_Rumble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    data_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Rumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int32 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Rumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Rumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Rumble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Rumble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Rumble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Rumble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Rumble::MergeFrom(const CCSUsrMsg_Rumble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Rumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Rumble::CopyFrom(const CCSUsrMsg_Rumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Rumble::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Rumble::Swap(CCSUsrMsg_Rumble* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Rumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Rumble_descriptor_;
  metadata.reflection = CCSUsrMsg_Rumble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CloseCaption::kHashFieldNumber;
const int CCSUsrMsg_CloseCaption::kDurationFieldNumber;
const int CCSUsrMsg_CloseCaption::kFromPlayerFieldNumber;
const int CCSUsrMsg_CloseCaption::kCctokenFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CloseCaption::InitAsDefaultInstance() {
}

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(const CCSUsrMsg_CloseCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaption::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  cctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CloseCaption::~CCSUsrMsg_CloseCaption() {
  SharedDtor();
}

void CCSUsrMsg_CloseCaption::SharedDtor() {
  if (cctoken_ != &::google::protobuf::internal::kEmptyString) {
    delete cctoken_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CloseCaption_descriptor_;
}

const CCSUsrMsg_CloseCaption& CCSUsrMsg_CloseCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_CloseCaption* CCSUsrMsg_CloseCaption::default_instance_ = NULL;

CCSUsrMsg_CloseCaption* CCSUsrMsg_CloseCaption::New() const {
  return new CCSUsrMsg_CloseCaption;
}

void CCSUsrMsg_CloseCaption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
    if (has_cctoken()) {
      if (cctoken_ != &::google::protobuf::internal::kEmptyString) {
        cctoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cctoken;
        break;
      }

      // optional string cctoken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cctoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cctoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cctoken().data(), this->cctoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional string cctoken = 4;
  if (has_cctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cctoken().data(), this->cctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cctoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CloseCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional string cctoken = 4;
  if (has_cctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cctoken().data(), this->cctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cctoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CloseCaption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional string cctoken = 4;
    if (has_cctoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cctoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CloseCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CloseCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CloseCaption::MergeFrom(const CCSUsrMsg_CloseCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
    if (from.has_cctoken()) {
      set_cctoken(from.cctoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaption::CopyFrom(const CCSUsrMsg_CloseCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaption::IsInitialized() const {

  return true;
}

void CCSUsrMsg_CloseCaption::Swap(CCSUsrMsg_CloseCaption* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(cctoken_, other->cctoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CloseCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CloseCaption_descriptor_;
  metadata.reflection = CCSUsrMsg_CloseCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CloseCaptionDirect::kHashFieldNumber;
const int CCSUsrMsg_CloseCaptionDirect::kDurationFieldNumber;
const int CCSUsrMsg_CloseCaptionDirect::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CloseCaptionDirect::InitAsDefaultInstance() {
}

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(const CCSUsrMsg_CloseCaptionDirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaptionDirect::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CloseCaptionDirect::~CCSUsrMsg_CloseCaptionDirect() {
  SharedDtor();
}

void CCSUsrMsg_CloseCaptionDirect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CloseCaptionDirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaptionDirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CloseCaptionDirect_descriptor_;
}

const CCSUsrMsg_CloseCaptionDirect& CCSUsrMsg_CloseCaptionDirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_CloseCaptionDirect* CCSUsrMsg_CloseCaptionDirect::default_instance_ = NULL;

CCSUsrMsg_CloseCaptionDirect* CCSUsrMsg_CloseCaptionDirect::New() const {
  return new CCSUsrMsg_CloseCaptionDirect;
}

void CCSUsrMsg_CloseCaptionDirect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CloseCaptionDirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CloseCaptionDirect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CloseCaptionDirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CloseCaptionDirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CloseCaptionDirect::MergeFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaptionDirect::IsInitialized() const {

  return true;
}

void CCSUsrMsg_CloseCaptionDirect::Swap(CCSUsrMsg_CloseCaptionDirect* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CloseCaptionDirect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CloseCaptionDirect_descriptor_;
  metadata.reflection = CCSUsrMsg_CloseCaptionDirect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SendAudio::kRadioSoundFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendAudio::InitAsDefaultInstance() {
}

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(const CCSUsrMsg_SendAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendAudio::SharedCtor() {
  _cached_size_ = 0;
  radio_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendAudio::~CCSUsrMsg_SendAudio() {
  SharedDtor();
}

void CCSUsrMsg_SendAudio::SharedDtor() {
  if (radio_sound_ != &::google::protobuf::internal::kEmptyString) {
    delete radio_sound_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendAudio_descriptor_;
}

const CCSUsrMsg_SendAudio& CCSUsrMsg_SendAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SendAudio* CCSUsrMsg_SendAudio::default_instance_ = NULL;

CCSUsrMsg_SendAudio* CCSUsrMsg_SendAudio::New() const {
  return new CCSUsrMsg_SendAudio;
}

void CCSUsrMsg_SendAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_radio_sound()) {
      if (radio_sound_ != &::google::protobuf::internal::kEmptyString) {
        radio_sound_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string radio_sound = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radio_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->radio_sound().data(), this->radio_sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string radio_sound = 1;
  if (has_radio_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radio_sound().data(), this->radio_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->radio_sound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string radio_sound = 1;
  if (has_radio_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radio_sound().data(), this->radio_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->radio_sound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string radio_sound = 1;
    if (has_radio_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radio_sound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendAudio::MergeFrom(const CCSUsrMsg_SendAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radio_sound()) {
      set_radio_sound(from.radio_sound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendAudio::CopyFrom(const CCSUsrMsg_SendAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendAudio::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SendAudio::Swap(CCSUsrMsg_SendAudio* other) {
  if (other != this) {
    std::swap(radio_sound_, other->radio_sound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendAudio_descriptor_;
  metadata.reflection = CCSUsrMsg_SendAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RawAudio::kPitchFieldNumber;
const int CCSUsrMsg_RawAudio::kEntidxFieldNumber;
const int CCSUsrMsg_RawAudio::kDurationFieldNumber;
const int CCSUsrMsg_RawAudio::kVoiceFilenameFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RawAudio::InitAsDefaultInstance() {
}

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(const CCSUsrMsg_RawAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RawAudio::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  entidx_ = 0;
  duration_ = 0;
  voice_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RawAudio::~CCSUsrMsg_RawAudio() {
  SharedDtor();
}

void CCSUsrMsg_RawAudio::SharedDtor() {
  if (voice_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_filename_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RawAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RawAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RawAudio_descriptor_;
}

const CCSUsrMsg_RawAudio& CCSUsrMsg_RawAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RawAudio* CCSUsrMsg_RawAudio::default_instance_ = NULL;

CCSUsrMsg_RawAudio* CCSUsrMsg_RawAudio::New() const {
  return new CCSUsrMsg_RawAudio;
}

void CCSUsrMsg_RawAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pitch_ = 0;
    entidx_ = 0;
    duration_ = 0;
    if (has_voice_filename()) {
      if (voice_filename_ != &::google::protobuf::internal::kEmptyString) {
        voice_filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RawAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pitch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entidx;
        break;
      }

      // optional int32 entidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_voice_filename;
        break;
      }

      // optional string voice_filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voice_filename().data(), this->voice_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RawAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pitch = 1;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pitch(), output);
  }

  // optional int32 entidx = 2;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entidx(), output);
  }

  // optional float duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // optional string voice_filename = 4;
  if (has_voice_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voice_filename().data(), this->voice_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->voice_filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RawAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pitch = 1;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pitch(), target);
  }

  // optional int32 entidx = 2;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entidx(), target);
  }

  // optional float duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // optional string voice_filename = 4;
  if (has_voice_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voice_filename().data(), this->voice_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->voice_filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RawAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pitch = 1;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitch());
    }

    // optional int32 entidx = 2;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional string voice_filename = 4;
    if (has_voice_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voice_filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RawAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RawAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RawAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RawAudio::MergeFrom(const CCSUsrMsg_RawAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_voice_filename()) {
      set_voice_filename(from.voice_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RawAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RawAudio::CopyFrom(const CCSUsrMsg_RawAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RawAudio::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RawAudio::Swap(CCSUsrMsg_RawAudio* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(entidx_, other->entidx_);
    std::swap(duration_, other->duration_);
    std::swap(voice_filename_, other->voice_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RawAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RawAudio_descriptor_;
  metadata.reflection = CCSUsrMsg_RawAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoiceMask_PlayerMask::kGameRulesMaskFieldNumber;
const int CCSUsrMsg_VoiceMask_PlayerMask::kBanMasksFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoiceMask_PlayerMask::InitAsDefaultInstance() {
}

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(const CCSUsrMsg_VoiceMask_PlayerMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask_PlayerMask::SharedCtor() {
  _cached_size_ = 0;
  game_rules_mask_ = 0;
  ban_masks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoiceMask_PlayerMask::~CCSUsrMsg_VoiceMask_PlayerMask() {
  SharedDtor();
}

void CCSUsrMsg_VoiceMask_PlayerMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoiceMask_PlayerMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_PlayerMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoiceMask_PlayerMask_descriptor_;
}

const CCSUsrMsg_VoiceMask_PlayerMask& CCSUsrMsg_VoiceMask_PlayerMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VoiceMask_PlayerMask* CCSUsrMsg_VoiceMask_PlayerMask::default_instance_ = NULL;

CCSUsrMsg_VoiceMask_PlayerMask* CCSUsrMsg_VoiceMask_PlayerMask::New() const {
  return new CCSUsrMsg_VoiceMask_PlayerMask;
}

void CCSUsrMsg_VoiceMask_PlayerMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_rules_mask_ = 0;
    ban_masks_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoiceMask_PlayerMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_rules_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_rules_mask_)));
          set_has_game_rules_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ban_masks;
        break;
      }

      // optional int32 ban_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ban_masks_)));
          set_has_ban_masks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_rules_mask = 1;
  if (has_game_rules_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_rules_mask(), output);
  }

  // optional int32 ban_masks = 2;
  if (has_ban_masks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ban_masks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_rules_mask = 1;
  if (has_game_rules_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_rules_mask(), target);
  }

  // optional int32 ban_masks = 2;
  if (has_ban_masks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ban_masks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoiceMask_PlayerMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_rules_mask = 1;
    if (has_game_rules_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_rules_mask());
    }

    // optional int32 ban_masks = 2;
    if (has_ban_masks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ban_masks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoiceMask_PlayerMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoiceMask_PlayerMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoiceMask_PlayerMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoiceMask_PlayerMask::MergeFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_rules_mask()) {
      set_game_rules_mask(from.game_rules_mask());
    }
    if (from.has_ban_masks()) {
      set_ban_masks(from.ban_masks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask_PlayerMask::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VoiceMask_PlayerMask::Swap(CCSUsrMsg_VoiceMask_PlayerMask* other) {
  if (other != this) {
    std::swap(game_rules_mask_, other->game_rules_mask_);
    std::swap(ban_masks_, other->ban_masks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoiceMask_PlayerMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoiceMask_PlayerMask_descriptor_;
  metadata.reflection = CCSUsrMsg_VoiceMask_PlayerMask_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_VoiceMask::kPlayerMasksFieldNumber;
const int CCSUsrMsg_VoiceMask::kPlayerModEnableFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoiceMask::InitAsDefaultInstance() {
}

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(const CCSUsrMsg_VoiceMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask::SharedCtor() {
  _cached_size_ = 0;
  player_mod_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoiceMask::~CCSUsrMsg_VoiceMask() {
  SharedDtor();
}

void CCSUsrMsg_VoiceMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoiceMask_descriptor_;
}

const CCSUsrMsg_VoiceMask& CCSUsrMsg_VoiceMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VoiceMask* CCSUsrMsg_VoiceMask::default_instance_ = NULL;

CCSUsrMsg_VoiceMask* CCSUsrMsg_VoiceMask::New() const {
  return new CCSUsrMsg_VoiceMask;
}

void CCSUsrMsg_VoiceMask::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    player_mod_enable_ = false;
  }
  player_masks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_masks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_masks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_masks;
        if (input->ExpectTag(16)) goto parse_player_mod_enable;
        break;
      }

      // optional bool player_mod_enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_mod_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_mod_enable_)));
          set_has_player_mod_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_masks(i), output);
  }

  // optional bool player_mod_enable = 2;
  if (has_player_mod_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->player_mod_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoiceMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_masks(i), target);
  }

  // optional bool player_mod_enable = 2;
  if (has_player_mod_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->player_mod_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoiceMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool player_mod_enable = 2;
    if (has_player_mod_enable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  total_size += 1 * this->player_masks_size();
  for (int i = 0; i < this->player_masks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_masks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoiceMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoiceMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoiceMask::MergeFrom(const CCSUsrMsg_VoiceMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_masks_.MergeFrom(from.player_masks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_player_mod_enable()) {
      set_player_mod_enable(from.player_mod_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask::CopyFrom(const CCSUsrMsg_VoiceMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VoiceMask::Swap(CCSUsrMsg_VoiceMask* other) {
  if (other != this) {
    player_masks_.Swap(&other->player_masks_);
    std::swap(player_mod_enable_, other->player_mod_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoiceMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoiceMask_descriptor_;
  metadata.reflection = CCSUsrMsg_VoiceMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Damage::kAmountFieldNumber;
const int CCSUsrMsg_Damage::kInflictorWorldPosFieldNumber;
const int CCSUsrMsg_Damage::kVictimEntindexFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Damage::CCSUsrMsg_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Damage::InitAsDefaultInstance() {
  inflictor_world_pos_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CCSUsrMsg_Damage::CCSUsrMsg_Damage(const CCSUsrMsg_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Damage::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0;
  inflictor_world_pos_ = NULL;
  victim_entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Damage::~CCSUsrMsg_Damage() {
  SharedDtor();
}

void CCSUsrMsg_Damage::SharedDtor() {
  if (this != default_instance_) {
    delete inflictor_world_pos_;
  }
}

void CCSUsrMsg_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Damage_descriptor_;
}

const CCSUsrMsg_Damage& CCSUsrMsg_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_Damage* CCSUsrMsg_Damage::default_instance_ = NULL;

CCSUsrMsg_Damage* CCSUsrMsg_Damage::New() const {
  return new CCSUsrMsg_Damage;
}

void CCSUsrMsg_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0;
    if (has_inflictor_world_pos()) {
      if (inflictor_world_pos_ != NULL) inflictor_world_pos_->::CMsgVector::Clear();
    }
    victim_entindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inflictor_world_pos;
        break;
      }

      // optional .CMsgVector inflictor_world_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inflictor_world_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inflictor_world_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_victim_entindex;
        break;
      }

      // optional int32 victim_entindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_entindex_)));
          set_has_victim_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->amount(), output);
  }

  // optional .CMsgVector inflictor_world_pos = 2;
  if (has_inflictor_world_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inflictor_world_pos(), output);
  }

  // optional int32 victim_entindex = 3;
  if (has_victim_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->victim_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->amount(), target);
  }

  // optional .CMsgVector inflictor_world_pos = 2;
  if (has_inflictor_world_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inflictor_world_pos(), target);
  }

  // optional int32 victim_entindex = 3;
  if (has_victim_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->victim_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional .CMsgVector inflictor_world_pos = 2;
    if (has_inflictor_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inflictor_world_pos());
    }

    // optional int32 victim_entindex = 3;
    if (has_victim_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Damage::MergeFrom(const CCSUsrMsg_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_inflictor_world_pos()) {
      mutable_inflictor_world_pos()->::CMsgVector::MergeFrom(from.inflictor_world_pos());
    }
    if (from.has_victim_entindex()) {
      set_victim_entindex(from.victim_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Damage::CopyFrom(const CCSUsrMsg_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Damage::IsInitialized() const {

  return true;
}

void CCSUsrMsg_Damage::Swap(CCSUsrMsg_Damage* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(inflictor_world_pos_, other->inflictor_world_pos_);
    std::swap(victim_entindex_, other->victim_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Damage_descriptor_;
  metadata.reflection = CCSUsrMsg_Damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RadioText::kMsgDstFieldNumber;
const int CCSUsrMsg_RadioText::kClientFieldNumber;
const int CCSUsrMsg_RadioText::kMsgNameFieldNumber;
const int CCSUsrMsg_RadioText::kParamsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RadioText::InitAsDefaultInstance() {
}

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(const CCSUsrMsg_RadioText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RadioText::SharedCtor() {
  _cached_size_ = 0;
  msg_dst_ = 0;
  client_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RadioText::~CCSUsrMsg_RadioText() {
  SharedDtor();
}

void CCSUsrMsg_RadioText::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RadioText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RadioText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RadioText_descriptor_;
}

const CCSUsrMsg_RadioText& CCSUsrMsg_RadioText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RadioText* CCSUsrMsg_RadioText::default_instance_ = NULL;

CCSUsrMsg_RadioText* CCSUsrMsg_RadioText::New() const {
  return new CCSUsrMsg_RadioText;
}

void CCSUsrMsg_RadioText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_dst_ = 0;
    client_ = 0;
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RadioText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_dst_)));
          set_has_msg_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client;
        break;
      }

      // optional int32 client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_name;
        break;
      }

      // optional string msg_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated string params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RadioText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_dst(), output);
  }

  // optional int32 client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client(), output);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_name(), output);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RadioText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_dst(), target);
  }

  // optional int32 client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client(), target);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RadioText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_dst = 1;
    if (has_msg_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_dst());
    }

    // optional int32 client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }

    // optional string msg_name = 3;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }

  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RadioText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RadioText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RadioText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RadioText::MergeFrom(const CCSUsrMsg_RadioText& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_dst()) {
      set_msg_dst(from.msg_dst());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RadioText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RadioText::CopyFrom(const CCSUsrMsg_RadioText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RadioText::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RadioText::Swap(CCSUsrMsg_RadioText* other) {
  if (other != this) {
    std::swap(msg_dst_, other->msg_dst_);
    std::swap(client_, other->client_);
    std::swap(msg_name_, other->msg_name_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RadioText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RadioText_descriptor_;
  metadata.reflection = CCSUsrMsg_RadioText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_HintText::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HintText::CCSUsrMsg_HintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HintText::InitAsDefaultInstance() {
}

CCSUsrMsg_HintText::CCSUsrMsg_HintText(const CCSUsrMsg_HintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HintText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HintText::~CCSUsrMsg_HintText() {
  SharedDtor();
}

void CCSUsrMsg_HintText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_HintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HintText_descriptor_;
}

const CCSUsrMsg_HintText& CCSUsrMsg_HintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_HintText* CCSUsrMsg_HintText::default_instance_ = NULL;

CCSUsrMsg_HintText* CCSUsrMsg_HintText::New() const {
  return new CCSUsrMsg_HintText;
}

void CCSUsrMsg_HintText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HintText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HintText::MergeFrom(const CCSUsrMsg_HintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HintText::CopyFrom(const CCSUsrMsg_HintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HintText::IsInitialized() const {

  return true;
}

void CCSUsrMsg_HintText::Swap(CCSUsrMsg_HintText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HintText_descriptor_;
  metadata.reflection = CCSUsrMsg_HintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_KeyHintText::kHintsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_KeyHintText::InitAsDefaultInstance() {
}

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(const CCSUsrMsg_KeyHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_KeyHintText::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_KeyHintText::~CCSUsrMsg_KeyHintText() {
  SharedDtor();
}

void CCSUsrMsg_KeyHintText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_KeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_KeyHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_KeyHintText_descriptor_;
}

const CCSUsrMsg_KeyHintText& CCSUsrMsg_KeyHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_KeyHintText* CCSUsrMsg_KeyHintText::default_instance_ = NULL;

CCSUsrMsg_KeyHintText* CCSUsrMsg_KeyHintText::New() const {
  return new CCSUsrMsg_KeyHintText;
}

void CCSUsrMsg_KeyHintText::Clear() {
  hints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_KeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints(this->hints_size() - 1).data(),
            this->hints(this->hints_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hints;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_KeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hints(i).data(), this->hints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_KeyHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints(i).data(), this->hints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_KeyHintText::ByteSize() const {
  int total_size = 0;

  // repeated string hints = 1;
  total_size += 1 * this->hints_size();
  for (int i = 0; i < this->hints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_KeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_KeyHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_KeyHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_KeyHintText::MergeFrom(const CCSUsrMsg_KeyHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  hints_.MergeFrom(from.hints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_KeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_KeyHintText::CopyFrom(const CCSUsrMsg_KeyHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KeyHintText::IsInitialized() const {

  return true;
}

void CCSUsrMsg_KeyHintText::Swap(CCSUsrMsg_KeyHintText* other) {
  if (other != this) {
    hints_.Swap(&other->hints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_KeyHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_KeyHintText_descriptor_;
  metadata.reflection = CCSUsrMsg_KeyHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kEntityIdxFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kClassIdFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginXFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginYFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginZFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kAngleYFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kDefuserFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kPlayerHasDefuserFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kPlayerHasC4FieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedCtor() {
  _cached_size_ = 0;
  entity_idx_ = 0;
  class_id_ = 0;
  origin_x_ = 0;
  origin_y_ = 0;
  origin_z_ = 0;
  angle_y_ = 0;
  defuser_ = false;
  player_has_defuser_ = false;
  player_has_c4_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_;
}

const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_ = NULL;

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::New() const {
  return new CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entity_idx_ = 0;
    class_id_ = 0;
    origin_x_ = 0;
    origin_y_ = 0;
    origin_z_ = 0;
    angle_y_ = 0;
    defuser_ = false;
    player_has_defuser_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    player_has_c4_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_idx_)));
          set_has_entity_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_class_id;
        break;
      }

      // optional int32 class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_origin_x;
        break;
      }

      // optional int32 origin_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_x_)));
          set_has_origin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_origin_y;
        break;
      }

      // optional int32 origin_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_y_)));
          set_has_origin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_origin_z;
        break;
      }

      // optional int32 origin_z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_z_)));
          set_has_origin_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_angle_y;
        break;
      }

      // optional int32 angle_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_y_)));
          set_has_angle_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defuser;
        break;
      }

      // optional bool defuser = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defuser_)));
          set_has_defuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_player_has_defuser;
        break;
      }

      // optional bool player_has_defuser = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_has_defuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_has_defuser_)));
          set_has_player_has_defuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_player_has_c4;
        break;
      }

      // optional bool player_has_c4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_has_c4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_has_c4_)));
          set_has_player_has_c4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entity_idx = 1;
  if (has_entity_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_idx(), output);
  }

  // optional int32 class_id = 2;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_id(), output);
  }

  // optional int32 origin_x = 3;
  if (has_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->origin_x(), output);
  }

  // optional int32 origin_y = 4;
  if (has_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->origin_y(), output);
  }

  // optional int32 origin_z = 5;
  if (has_origin_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->origin_z(), output);
  }

  // optional int32 angle_y = 6;
  if (has_angle_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->angle_y(), output);
  }

  // optional bool defuser = 7;
  if (has_defuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->defuser(), output);
  }

  // optional bool player_has_defuser = 8;
  if (has_player_has_defuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->player_has_defuser(), output);
  }

  // optional bool player_has_c4 = 9;
  if (has_player_has_c4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->player_has_c4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entity_idx = 1;
  if (has_entity_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_idx(), target);
  }

  // optional int32 class_id = 2;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_id(), target);
  }

  // optional int32 origin_x = 3;
  if (has_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->origin_x(), target);
  }

  // optional int32 origin_y = 4;
  if (has_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->origin_y(), target);
  }

  // optional int32 origin_z = 5;
  if (has_origin_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->origin_z(), target);
  }

  // optional int32 angle_y = 6;
  if (has_angle_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->angle_y(), target);
  }

  // optional bool defuser = 7;
  if (has_defuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->defuser(), target);
  }

  // optional bool player_has_defuser = 8;
  if (has_player_has_defuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->player_has_defuser(), target);
  }

  // optional bool player_has_c4 = 9;
  if (has_player_has_c4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->player_has_c4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entity_idx = 1;
    if (has_entity_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_idx());
    }

    // optional int32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // optional int32 origin_x = 3;
    if (has_origin_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_x());
    }

    // optional int32 origin_y = 4;
    if (has_origin_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_y());
    }

    // optional int32 origin_z = 5;
    if (has_origin_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_z());
    }

    // optional int32 angle_y = 6;
    if (has_angle_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle_y());
    }

    // optional bool defuser = 7;
    if (has_defuser()) {
      total_size += 1 + 1;
    }

    // optional bool player_has_defuser = 8;
    if (has_player_has_defuser()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool player_has_c4 = 9;
    if (has_player_has_c4()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_idx()) {
      set_entity_idx(from.entity_idx());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_origin_x()) {
      set_origin_x(from.origin_x());
    }
    if (from.has_origin_y()) {
      set_origin_y(from.origin_y());
    }
    if (from.has_origin_z()) {
      set_origin_z(from.origin_z());
    }
    if (from.has_angle_y()) {
      set_angle_y(from.angle_y());
    }
    if (from.has_defuser()) {
      set_defuser(from.defuser());
    }
    if (from.has_player_has_defuser()) {
      set_player_has_defuser(from.player_has_defuser());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player_has_c4()) {
      set_player_has_c4(from.player_has_c4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Swap(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* other) {
  if (other != this) {
    std::swap(entity_idx_, other->entity_idx_);
    std::swap(class_id_, other->class_id_);
    std::swap(origin_x_, other->origin_x_);
    std::swap(origin_y_, other->origin_y_);
    std::swap(origin_z_, other->origin_z_);
    std::swap(angle_y_, other->angle_y_);
    std::swap(defuser_, other->defuser_);
    std::swap(player_has_defuser_, other->player_has_defuser_);
    std::swap(player_has_c4_, other->player_has_c4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_ProcessSpottedEntityUpdate::kNewUpdateFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate::kEntityUpdatesFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedCtor() {
  _cached_size_ = 0;
  new_update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ProcessSpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_;
}

const CCSUsrMsg_ProcessSpottedEntityUpdate& CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ProcessSpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_ = NULL;

CCSUsrMsg_ProcessSpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate::New() const {
  return new CCSUsrMsg_ProcessSpottedEntityUpdate;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_update_ = false;
  }
  entity_updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool new_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_update_)));
          set_has_new_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_updates;
        break;
      }

      // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool new_update = 1;
  if (has_new_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->new_update(), output);
  }

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity_updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool new_update = 1;
  if (has_new_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->new_update(), target);
  }

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity_updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ProcessSpottedEntityUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool new_update = 1;
    if (has_new_update()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  total_size += 1 * this->entity_updates_size();
  for (int i = 0; i < this->entity_updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity_updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ProcessSpottedEntityUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ProcessSpottedEntityUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_updates_.MergeFrom(from.entity_updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_update()) {
      set_new_update(from.new_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Swap(CCSUsrMsg_ProcessSpottedEntityUpdate* other) {
  if (other != this) {
    std::swap(new_update_, other->new_update_);
    entity_updates_.Swap(&other->entity_updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEconItemPreviewDataBlock_Sticker::kSlotFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kStickerIdFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kWearFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kScaleFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kRotationFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kTintIdFieldNumber;
#endif  // !_MSC_VER

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance() {
}

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  sticker_id_ = 0u;
  wear_ = 0;
  scale_ = 0;
  rotation_ = 0;
  tint_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEconItemPreviewDataBlock_Sticker::~CEconItemPreviewDataBlock_Sticker() {
  SharedDtor();
}

void CEconItemPreviewDataBlock_Sticker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CEconItemPreviewDataBlock_Sticker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_Sticker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEconItemPreviewDataBlock_Sticker_descriptor_;
}

const CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock_Sticker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock_Sticker::default_instance_ = NULL;

CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock_Sticker::New() const {
  return new CEconItemPreviewDataBlock_Sticker;
}

void CEconItemPreviewDataBlock_Sticker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    sticker_id_ = 0u;
    wear_ = 0;
    scale_ = 0;
    rotation_ = 0;
    tint_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEconItemPreviewDataBlock_Sticker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sticker_id;
        break;
      }

      // optional uint32 sticker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sticker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sticker_id_)));
          set_has_sticker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_wear;
        break;
      }

      // optional float wear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wear_)));
          set_has_wear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale;
        break;
      }

      // optional float scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotation;
        break;
      }

      // optional float rotation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tint_id;
        break;
      }

      // optional uint32 tint_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
          set_has_tint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CEconItemPreviewDataBlock_Sticker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional uint32 sticker_id = 2;
  if (has_sticker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sticker_id(), output);
  }

  // optional float wear = 3;
  if (has_wear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wear(), output);
  }

  // optional float scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional uint32 tint_id = 6;
  if (has_tint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tint_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CEconItemPreviewDataBlock_Sticker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional uint32 sticker_id = 2;
  if (has_sticker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sticker_id(), target);
  }

  // optional float wear = 3;
  if (has_wear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wear(), target);
  }

  // optional float scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale(), target);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional uint32 tint_id = 6;
  if (has_tint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tint_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CEconItemPreviewDataBlock_Sticker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 sticker_id = 2;
    if (has_sticker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sticker_id());
    }

    // optional float wear = 3;
    if (has_wear()) {
      total_size += 1 + 4;
    }

    // optional float scale = 4;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional uint32 tint_id = 6;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEconItemPreviewDataBlock_Sticker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEconItemPreviewDataBlock_Sticker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const CEconItemPreviewDataBlock_Sticker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_sticker_id()) {
      set_sticker_id(from.sticker_id());
    }
    if (from.has_wear()) {
      set_wear(from.wear());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_tint_id()) {
      set_tint_id(from.tint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const CEconItemPreviewDataBlock_Sticker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock_Sticker::IsInitialized() const {

  return true;
}

void CEconItemPreviewDataBlock_Sticker::Swap(CEconItemPreviewDataBlock_Sticker* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(sticker_id_, other->sticker_id_);
    std::swap(wear_, other->wear_);
    std::swap(scale_, other->scale_);
    std::swap(rotation_, other->rotation_);
    std::swap(tint_id_, other->tint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEconItemPreviewDataBlock_Sticker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEconItemPreviewDataBlock_Sticker_descriptor_;
  metadata.reflection = CEconItemPreviewDataBlock_Sticker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CEconItemPreviewDataBlock::kAccountidFieldNumber;
const int CEconItemPreviewDataBlock::kItemidFieldNumber;
const int CEconItemPreviewDataBlock::kDefindexFieldNumber;
const int CEconItemPreviewDataBlock::kPaintindexFieldNumber;
const int CEconItemPreviewDataBlock::kRarityFieldNumber;
const int CEconItemPreviewDataBlock::kQualityFieldNumber;
const int CEconItemPreviewDataBlock::kPaintwearFieldNumber;
const int CEconItemPreviewDataBlock::kPaintseedFieldNumber;
const int CEconItemPreviewDataBlock::kKilleaterscoretypeFieldNumber;
const int CEconItemPreviewDataBlock::kKilleatervalueFieldNumber;
const int CEconItemPreviewDataBlock::kCustomnameFieldNumber;
const int CEconItemPreviewDataBlock::kStickersFieldNumber;
const int CEconItemPreviewDataBlock::kInventoryFieldNumber;
const int CEconItemPreviewDataBlock::kOriginFieldNumber;
const int CEconItemPreviewDataBlock::kQuestidFieldNumber;
const int CEconItemPreviewDataBlock::kDropreasonFieldNumber;
const int CEconItemPreviewDataBlock::kMusicindexFieldNumber;
const int CEconItemPreviewDataBlock::kEntindexFieldNumber;
#endif  // !_MSC_VER

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
}

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  itemid_ = GOOGLE_ULONGLONG(0);
  defindex_ = 0u;
  paintindex_ = 0u;
  rarity_ = 0u;
  quality_ = 0u;
  paintwear_ = 0u;
  paintseed_ = 0u;
  killeaterscoretype_ = 0u;
  killeatervalue_ = 0u;
  customname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inventory_ = 0u;
  origin_ = 0u;
  questid_ = 0u;
  dropreason_ = 0u;
  musicindex_ = 0u;
  entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  SharedDtor();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  if (customname_ != &::google::protobuf::internal::kEmptyString) {
    delete customname_;
  }
  if (this != default_instance_) {
  }
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEconItemPreviewDataBlock_descriptor_;
}

const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::default_instance_ = NULL;

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::New() const {
  return new CEconItemPreviewDataBlock;
}

void CEconItemPreviewDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    itemid_ = GOOGLE_ULONGLONG(0);
    defindex_ = 0u;
    paintindex_ = 0u;
    rarity_ = 0u;
    quality_ = 0u;
    paintwear_ = 0u;
    paintseed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killeaterscoretype_ = 0u;
    killeatervalue_ = 0u;
    if (has_customname()) {
      if (customname_ != &::google::protobuf::internal::kEmptyString) {
        customname_->clear();
      }
    }
    inventory_ = 0u;
    origin_ = 0u;
    questid_ = 0u;
    dropreason_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    musicindex_ = 0u;
    entindex_ = 0;
  }
  stickers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEconItemPreviewDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defindex;
        break;
      }

      // optional uint32 defindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          set_has_defindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paintindex;
        break;
      }

      // optional uint32 paintindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintindex_)));
          set_has_paintindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rarity;
        break;
      }

      // optional uint32 rarity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
          set_has_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_paintwear;
        break;
      }

      // optional uint32 paintwear = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintwear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintwear_)));
          set_has_paintwear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_paintseed;
        break;
      }

      // optional uint32 paintseed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintseed_)));
          set_has_paintseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_killeaterscoretype;
        break;
      }

      // optional uint32 killeaterscoretype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killeaterscoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeaterscoretype_)));
          set_has_killeaterscoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killeatervalue;
        break;
      }

      // optional uint32 killeatervalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killeatervalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeatervalue_)));
          set_has_killeatervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_customname;
        break;
      }

      // optional string customname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customname().data(), this->customname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stickers;
        break;
      }

      // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stickers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stickers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stickers;
        if (input->ExpectTag(104)) goto parse_inventory;
        break;
      }

      // optional uint32 inventory = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          set_has_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_origin;
        break;
      }

      // optional uint32 origin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dropreason;
        break;
      }

      // optional uint32 dropreason = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropreason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropreason_)));
          set_has_dropreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_musicindex;
        break;
      }

      // optional uint32 musicindex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicindex_)));
          set_has_musicindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CEconItemPreviewDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 defindex = 3;
  if (has_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defindex(), output);
  }

  // optional uint32 paintindex = 4;
  if (has_paintindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paintindex(), output);
  }

  // optional uint32 rarity = 5;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }

  // optional uint32 paintwear = 7;
  if (has_paintwear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->paintwear(), output);
  }

  // optional uint32 paintseed = 8;
  if (has_paintseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paintseed(), output);
  }

  // optional uint32 killeaterscoretype = 9;
  if (has_killeaterscoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->killeaterscoretype(), output);
  }

  // optional uint32 killeatervalue = 10;
  if (has_killeatervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killeatervalue(), output);
  }

  // optional string customname = 11;
  if (has_customname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customname().data(), this->customname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->customname(), output);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (int i = 0; i < this->stickers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stickers(i), output);
  }

  // optional uint32 inventory = 13;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->inventory(), output);
  }

  // optional uint32 origin = 14;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->origin(), output);
  }

  // optional uint32 questid = 15;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->questid(), output);
  }

  // optional uint32 dropreason = 16;
  if (has_dropreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dropreason(), output);
  }

  // optional uint32 musicindex = 17;
  if (has_musicindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->musicindex(), output);
  }

  // optional int32 entindex = 18;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CEconItemPreviewDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 defindex = 3;
  if (has_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defindex(), target);
  }

  // optional uint32 paintindex = 4;
  if (has_paintindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paintindex(), target);
  }

  // optional uint32 rarity = 5;
  if (has_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quality(), target);
  }

  // optional uint32 paintwear = 7;
  if (has_paintwear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->paintwear(), target);
  }

  // optional uint32 paintseed = 8;
  if (has_paintseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paintseed(), target);
  }

  // optional uint32 killeaterscoretype = 9;
  if (has_killeaterscoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->killeaterscoretype(), target);
  }

  // optional uint32 killeatervalue = 10;
  if (has_killeatervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killeatervalue(), target);
  }

  // optional string customname = 11;
  if (has_customname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customname().data(), this->customname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->customname(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (int i = 0; i < this->stickers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stickers(i), target);
  }

  // optional uint32 inventory = 13;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->inventory(), target);
  }

  // optional uint32 origin = 14;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->origin(), target);
  }

  // optional uint32 questid = 15;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->questid(), target);
  }

  // optional uint32 dropreason = 16;
  if (has_dropreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dropreason(), target);
  }

  // optional uint32 musicindex = 17;
  if (has_musicindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->musicindex(), target);
  }

  // optional int32 entindex = 18;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CEconItemPreviewDataBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 defindex = 3;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

    // optional uint32 paintindex = 4;
    if (has_paintindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintindex());
    }

    // optional uint32 rarity = 5;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }

    // optional uint32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 paintwear = 7;
    if (has_paintwear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintwear());
    }

    // optional uint32 paintseed = 8;
    if (has_paintseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintseed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 killeaterscoretype = 9;
    if (has_killeaterscoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeaterscoretype());
    }

    // optional uint32 killeatervalue = 10;
    if (has_killeatervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeatervalue());
    }

    // optional string customname = 11;
    if (has_customname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customname());
    }

    // optional uint32 inventory = 13;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 origin = 14;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // optional uint32 questid = 15;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 dropreason = 16;
    if (has_dropreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropreason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 musicindex = 17;
    if (has_musicindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musicindex());
    }

    // optional int32 entindex = 18;
    if (has_entindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

  }
  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  total_size += 1 * this->stickers_size();
  for (int i = 0; i < this->stickers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stickers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEconItemPreviewDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  stickers_.MergeFrom(from.stickers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_defindex()) {
      set_defindex(from.defindex());
    }
    if (from.has_paintindex()) {
      set_paintindex(from.paintindex());
    }
    if (from.has_rarity()) {
      set_rarity(from.rarity());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_paintwear()) {
      set_paintwear(from.paintwear());
    }
    if (from.has_paintseed()) {
      set_paintseed(from.paintseed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killeaterscoretype()) {
      set_killeaterscoretype(from.killeaterscoretype());
    }
    if (from.has_killeatervalue()) {
      set_killeatervalue(from.killeatervalue());
    }
    if (from.has_customname()) {
      set_customname(from.customname());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_dropreason()) {
      set_dropreason(from.dropreason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_musicindex()) {
      set_musicindex(from.musicindex());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEconItemPreviewDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {

  return true;
}

void CEconItemPreviewDataBlock::Swap(CEconItemPreviewDataBlock* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(itemid_, other->itemid_);
    std::swap(defindex_, other->defindex_);
    std::swap(paintindex_, other->paintindex_);
    std::swap(rarity_, other->rarity_);
    std::swap(quality_, other->quality_);
    std::swap(paintwear_, other->paintwear_);
    std::swap(paintseed_, other->paintseed_);
    std::swap(killeaterscoretype_, other->killeaterscoretype_);
    std::swap(killeatervalue_, other->killeatervalue_);
    std::swap(customname_, other->customname_);
    stickers_.Swap(&other->stickers_);
    std::swap(inventory_, other->inventory_);
    std::swap(origin_, other->origin_);
    std::swap(questid_, other->questid_);
    std::swap(dropreason_, other->dropreason_);
    std::swap(musicindex_, other->musicindex_);
    std::swap(entindex_, other->entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEconItemPreviewDataBlock_descriptor_;
  metadata.reflection = CEconItemPreviewDataBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SendPlayerItemDrops::kEntityUpdatesFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendPlayerItemDrops::InitAsDefaultInstance() {
}

CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(const CCSUsrMsg_SendPlayerItemDrops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendPlayerItemDrops::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendPlayerItemDrops::~CCSUsrMsg_SendPlayerItemDrops() {
  SharedDtor();
}

void CCSUsrMsg_SendPlayerItemDrops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SendPlayerItemDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendPlayerItemDrops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendPlayerItemDrops_descriptor_;
}

const CCSUsrMsg_SendPlayerItemDrops& CCSUsrMsg_SendPlayerItemDrops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SendPlayerItemDrops* CCSUsrMsg_SendPlayerItemDrops::default_instance_ = NULL;

CCSUsrMsg_SendPlayerItemDrops* CCSUsrMsg_SendPlayerItemDrops::New() const {
  return new CCSUsrMsg_SendPlayerItemDrops;
}

void CCSUsrMsg_SendPlayerItemDrops::Clear() {
  entity_updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendPlayerItemDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CEconItemPreviewDataBlock entity_updates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entity_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendPlayerItemDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity_updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendPlayerItemDrops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendPlayerItemDrops::ByteSize() const {
  int total_size = 0;

  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  total_size += 1 * this->entity_updates_size();
  for (int i = 0; i < this->entity_updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity_updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendPlayerItemDrops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendPlayerItemDrops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendPlayerItemDrops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendPlayerItemDrops::MergeFrom(const CCSUsrMsg_SendPlayerItemDrops& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_updates_.MergeFrom(from.entity_updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendPlayerItemDrops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendPlayerItemDrops::CopyFrom(const CCSUsrMsg_SendPlayerItemDrops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemDrops::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SendPlayerItemDrops::Swap(CCSUsrMsg_SendPlayerItemDrops* other) {
  if (other != this) {
    entity_updates_.Swap(&other->entity_updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendPlayerItemDrops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendPlayerItemDrops_descriptor_;
  metadata.reflection = CCSUsrMsg_SendPlayerItemDrops_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SendPlayerItemFound::kIteminfoFieldNumber;
const int CCSUsrMsg_SendPlayerItemFound::kEntindexFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendPlayerItemFound::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(&::CEconItemPreviewDataBlock::default_instance());
}

CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(const CCSUsrMsg_SendPlayerItemFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendPlayerItemFound::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendPlayerItemFound::~CCSUsrMsg_SendPlayerItemFound() {
  SharedDtor();
}

void CCSUsrMsg_SendPlayerItemFound::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CCSUsrMsg_SendPlayerItemFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendPlayerItemFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendPlayerItemFound_descriptor_;
}

const CCSUsrMsg_SendPlayerItemFound& CCSUsrMsg_SendPlayerItemFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SendPlayerItemFound* CCSUsrMsg_SendPlayerItemFound::default_instance_ = NULL;

CCSUsrMsg_SendPlayerItemFound* CCSUsrMsg_SendPlayerItemFound::New() const {
  return new CCSUsrMsg_SendPlayerItemFound;
}

void CCSUsrMsg_SendPlayerItemFound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
    }
    entindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendPlayerItemFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendPlayerItemFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }

  // optional int32 entindex = 2;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendPlayerItemFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }

  // optional int32 entindex = 2;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendPlayerItemFound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 entindex = 2;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendPlayerItemFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendPlayerItemFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendPlayerItemFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendPlayerItemFound::MergeFrom(const CCSUsrMsg_SendPlayerItemFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendPlayerItemFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendPlayerItemFound::CopyFrom(const CCSUsrMsg_SendPlayerItemFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemFound::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SendPlayerItemFound::Swap(CCSUsrMsg_SendPlayerItemFound* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(entindex_, other->entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendPlayerItemFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendPlayerItemFound_descriptor_;
  metadata.reflection = CCSUsrMsg_SendPlayerItemFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ReloadEffect::kEntidxFieldNumber;
const int CCSUsrMsg_ReloadEffect::kActanimFieldNumber;
const int CCSUsrMsg_ReloadEffect::kOriginXFieldNumber;
const int CCSUsrMsg_ReloadEffect::kOriginYFieldNumber;
const int CCSUsrMsg_ReloadEffect::kOriginZFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ReloadEffect::InitAsDefaultInstance() {
}

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(const CCSUsrMsg_ReloadEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ReloadEffect::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  actanim_ = 0;
  origin_x_ = 0;
  origin_y_ = 0;
  origin_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ReloadEffect::~CCSUsrMsg_ReloadEffect() {
  SharedDtor();
}

void CCSUsrMsg_ReloadEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ReloadEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ReloadEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ReloadEffect_descriptor_;
}

const CCSUsrMsg_ReloadEffect& CCSUsrMsg_ReloadEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ReloadEffect* CCSUsrMsg_ReloadEffect::default_instance_ = NULL;

CCSUsrMsg_ReloadEffect* CCSUsrMsg_ReloadEffect::New() const {
  return new CCSUsrMsg_ReloadEffect;
}

void CCSUsrMsg_ReloadEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
    actanim_ = 0;
    origin_x_ = 0;
    origin_y_ = 0;
    origin_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ReloadEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actanim;
        break;
      }

      // optional int32 actanim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actanim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actanim_)));
          set_has_actanim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_origin_x;
        break;
      }

      // optional float origin_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_x_)));
          set_has_origin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_origin_y;
        break;
      }

      // optional float origin_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_y_)));
          set_has_origin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_origin_z;
        break;
      }

      // optional float origin_z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_z_)));
          set_has_origin_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ReloadEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  // optional int32 actanim = 2;
  if (has_actanim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actanim(), output);
  }

  // optional float origin_x = 3;
  if (has_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->origin_x(), output);
  }

  // optional float origin_y = 4;
  if (has_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->origin_y(), output);
  }

  // optional float origin_z = 5;
  if (has_origin_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->origin_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ReloadEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  // optional int32 actanim = 2;
  if (has_actanim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actanim(), target);
  }

  // optional float origin_x = 3;
  if (has_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->origin_x(), target);
  }

  // optional float origin_y = 4;
  if (has_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->origin_y(), target);
  }

  // optional float origin_z = 5;
  if (has_origin_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->origin_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ReloadEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

    // optional int32 actanim = 2;
    if (has_actanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actanim());
    }

    // optional float origin_x = 3;
    if (has_origin_x()) {
      total_size += 1 + 4;
    }

    // optional float origin_y = 4;
    if (has_origin_y()) {
      total_size += 1 + 4;
    }

    // optional float origin_z = 5;
    if (has_origin_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ReloadEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ReloadEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ReloadEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ReloadEffect::MergeFrom(const CCSUsrMsg_ReloadEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
    if (from.has_actanim()) {
      set_actanim(from.actanim());
    }
    if (from.has_origin_x()) {
      set_origin_x(from.origin_x());
    }
    if (from.has_origin_y()) {
      set_origin_y(from.origin_y());
    }
    if (from.has_origin_z()) {
      set_origin_z(from.origin_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const CCSUsrMsg_ReloadEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReloadEffect::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ReloadEffect::Swap(CCSUsrMsg_ReloadEffect* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(actanim_, other->actanim_);
    std::swap(origin_x_, other->origin_x_);
    std::swap(origin_y_, other->origin_y_);
    std::swap(origin_z_, other->origin_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ReloadEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ReloadEffect_descriptor_;
  metadata.reflection = CCSUsrMsg_ReloadEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AdjustMoney::kAmountFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AdjustMoney::InitAsDefaultInstance() {
}

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(const CCSUsrMsg_AdjustMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AdjustMoney::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AdjustMoney::~CCSUsrMsg_AdjustMoney() {
  SharedDtor();
}

void CCSUsrMsg_AdjustMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AdjustMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AdjustMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AdjustMoney_descriptor_;
}

const CCSUsrMsg_AdjustMoney& CCSUsrMsg_AdjustMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_AdjustMoney* CCSUsrMsg_AdjustMoney::default_instance_ = NULL;

CCSUsrMsg_AdjustMoney* CCSUsrMsg_AdjustMoney::New() const {
  return new CCSUsrMsg_AdjustMoney;
}

void CCSUsrMsg_AdjustMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AdjustMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AdjustMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AdjustMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AdjustMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AdjustMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AdjustMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AdjustMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AdjustMoney::MergeFrom(const CCSUsrMsg_AdjustMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const CCSUsrMsg_AdjustMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AdjustMoney::IsInitialized() const {

  return true;
}

void CCSUsrMsg_AdjustMoney::Swap(CCSUsrMsg_AdjustMoney* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AdjustMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AdjustMoney_descriptor_;
  metadata.reflection = CCSUsrMsg_AdjustMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ReportHit::kPosXFieldNumber;
const int CCSUsrMsg_ReportHit::kPosYFieldNumber;
const int CCSUsrMsg_ReportHit::kTimestampFieldNumber;
const int CCSUsrMsg_ReportHit::kPosZFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ReportHit::InitAsDefaultInstance() {
}

CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(const CCSUsrMsg_ReportHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ReportHit::SharedCtor() {
  _cached_size_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  timestamp_ = 0;
  pos_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ReportHit::~CCSUsrMsg_ReportHit() {
  SharedDtor();
}

void CCSUsrMsg_ReportHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ReportHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ReportHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ReportHit_descriptor_;
}

const CCSUsrMsg_ReportHit& CCSUsrMsg_ReportHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ReportHit* CCSUsrMsg_ReportHit::default_instance_ = NULL;

CCSUsrMsg_ReportHit* CCSUsrMsg_ReportHit::New() const {
  return new CCSUsrMsg_ReportHit;
}

void CCSUsrMsg_ReportHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_x_ = 0;
    pos_y_ = 0;
    timestamp_ = 0;
    pos_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ReportHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pos_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pos_y;
        break;
      }

      // optional float pos_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pos_z;
        break;
      }

      // optional float pos_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_timestamp;
        break;
      }

      // optional float timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ReportHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float pos_x = 1;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pos_x(), output);
  }

  // optional float pos_y = 2;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_y(), output);
  }

  // optional float pos_z = 3;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_z(), output);
  }

  // optional float timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ReportHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float pos_x = 1;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pos_x(), target);
  }

  // optional float pos_y = 2;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_y(), target);
  }

  // optional float pos_z = 3;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_z(), target);
  }

  // optional float timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ReportHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float pos_x = 1;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 2;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 3;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ReportHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ReportHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ReportHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ReportHit::MergeFrom(const CCSUsrMsg_ReportHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ReportHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ReportHit::CopyFrom(const CCSUsrMsg_ReportHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReportHit::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ReportHit::Swap(CCSUsrMsg_ReportHit* other) {
  if (other != this) {
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ReportHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ReportHit_descriptor_;
  metadata.reflection = CCSUsrMsg_ReportHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_KillCam::kObsModeFieldNumber;
const int CCSUsrMsg_KillCam::kFirstTargetFieldNumber;
const int CCSUsrMsg_KillCam::kSecondTargetFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_KillCam::InitAsDefaultInstance() {
}

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(const CCSUsrMsg_KillCam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_KillCam::SharedCtor() {
  _cached_size_ = 0;
  obs_mode_ = 0;
  first_target_ = 0;
  second_target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_KillCam::~CCSUsrMsg_KillCam() {
  SharedDtor();
}

void CCSUsrMsg_KillCam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_KillCam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_KillCam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_KillCam_descriptor_;
}

const CCSUsrMsg_KillCam& CCSUsrMsg_KillCam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_KillCam* CCSUsrMsg_KillCam::default_instance_ = NULL;

CCSUsrMsg_KillCam* CCSUsrMsg_KillCam::New() const {
  return new CCSUsrMsg_KillCam;
}

void CCSUsrMsg_KillCam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obs_mode_ = 0;
    first_target_ = 0;
    second_target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_KillCam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obs_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obs_mode_)));
          set_has_obs_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_target;
        break;
      }

      // optional int32 first_target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_target_)));
          set_has_first_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_target;
        break;
      }

      // optional int32 second_target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_target_)));
          set_has_second_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_KillCam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obs_mode = 1;
  if (has_obs_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obs_mode(), output);
  }

  // optional int32 first_target = 2;
  if (has_first_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_target(), output);
  }

  // optional int32 second_target = 3;
  if (has_second_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_KillCam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obs_mode = 1;
  if (has_obs_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obs_mode(), target);
  }

  // optional int32 first_target = 2;
  if (has_first_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_target(), target);
  }

  // optional int32 second_target = 3;
  if (has_second_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_KillCam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obs_mode = 1;
    if (has_obs_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obs_mode());
    }

    // optional int32 first_target = 2;
    if (has_first_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_target());
    }

    // optional int32 second_target = 3;
    if (has_second_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_KillCam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_KillCam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_KillCam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_KillCam::MergeFrom(const CCSUsrMsg_KillCam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obs_mode()) {
      set_obs_mode(from.obs_mode());
    }
    if (from.has_first_target()) {
      set_first_target(from.first_target());
    }
    if (from.has_second_target()) {
      set_second_target(from.second_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_KillCam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_KillCam::CopyFrom(const CCSUsrMsg_KillCam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KillCam::IsInitialized() const {

  return true;
}

void CCSUsrMsg_KillCam::Swap(CCSUsrMsg_KillCam* other) {
  if (other != this) {
    std::swap(obs_mode_, other->obs_mode_);
    std::swap(first_target_, other->first_target_);
    std::swap(second_target_, other->second_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_KillCam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_KillCam_descriptor_;
  metadata.reflection = CCSUsrMsg_KillCam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DesiredTimescale::kDesiredTimescaleFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kDurationRealtimeSecFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kInterpolatorTypeFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kStartBlendTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DesiredTimescale::InitAsDefaultInstance() {
}

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(const CCSUsrMsg_DesiredTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  desired_timescale_ = 0;
  duration_realtime_sec_ = 0;
  interpolator_type_ = 0;
  start_blend_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DesiredTimescale::~CCSUsrMsg_DesiredTimescale() {
  SharedDtor();
}

void CCSUsrMsg_DesiredTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DesiredTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DesiredTimescale_descriptor_;
}

const CCSUsrMsg_DesiredTimescale& CCSUsrMsg_DesiredTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_DesiredTimescale* CCSUsrMsg_DesiredTimescale::default_instance_ = NULL;

CCSUsrMsg_DesiredTimescale* CCSUsrMsg_DesiredTimescale::New() const {
  return new CCSUsrMsg_DesiredTimescale;
}

void CCSUsrMsg_DesiredTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desired_timescale_ = 0;
    duration_realtime_sec_ = 0;
    interpolator_type_ = 0;
    start_blend_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_timescale_)));
          set_has_desired_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration_realtime_sec;
        break;
      }

      // optional float duration_realtime_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration_realtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_realtime_sec_)));
          set_has_duration_realtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interpolator_type;
        break;
      }

      // optional int32 interpolator_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolator_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interpolator_type_)));
          set_has_interpolator_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_blend_time;
        break;
      }

      // optional float start_blend_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_blend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_blend_time_)));
          set_has_start_blend_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float desired_timescale = 1;
  if (has_desired_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired_timescale(), output);
  }

  // optional float duration_realtime_sec = 2;
  if (has_duration_realtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration_realtime_sec(), output);
  }

  // optional int32 interpolator_type = 3;
  if (has_interpolator_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interpolator_type(), output);
  }

  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_blend_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DesiredTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float desired_timescale = 1;
  if (has_desired_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired_timescale(), target);
  }

  // optional float duration_realtime_sec = 2;
  if (has_duration_realtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration_realtime_sec(), target);
  }

  // optional int32 interpolator_type = 3;
  if (has_interpolator_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interpolator_type(), target);
  }

  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_blend_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DesiredTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float desired_timescale = 1;
    if (has_desired_timescale()) {
      total_size += 1 + 4;
    }

    // optional float duration_realtime_sec = 2;
    if (has_duration_realtime_sec()) {
      total_size += 1 + 4;
    }

    // optional int32 interpolator_type = 3;
    if (has_interpolator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interpolator_type());
    }

    // optional float start_blend_time = 4;
    if (has_start_blend_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DesiredTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DesiredTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DesiredTimescale::MergeFrom(const CCSUsrMsg_DesiredTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desired_timescale()) {
      set_desired_timescale(from.desired_timescale());
    }
    if (from.has_duration_realtime_sec()) {
      set_duration_realtime_sec(from.duration_realtime_sec());
    }
    if (from.has_interpolator_type()) {
      set_interpolator_type(from.interpolator_type());
    }
    if (from.has_start_blend_time()) {
      set_start_blend_time(from.start_blend_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const CCSUsrMsg_DesiredTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DesiredTimescale::IsInitialized() const {

  return true;
}

void CCSUsrMsg_DesiredTimescale::Swap(CCSUsrMsg_DesiredTimescale* other) {
  if (other != this) {
    std::swap(desired_timescale_, other->desired_timescale_);
    std::swap(duration_realtime_sec_, other->duration_realtime_sec_);
    std::swap(interpolator_type_, other->interpolator_type_);
    std::swap(start_blend_time_, other->start_blend_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DesiredTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DesiredTimescale_descriptor_;
  metadata.reflection = CCSUsrMsg_DesiredTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CurrentTimescale::kCurTimescaleFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CurrentTimescale::InitAsDefaultInstance() {
}

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(const CCSUsrMsg_CurrentTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  cur_timescale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CurrentTimescale::~CCSUsrMsg_CurrentTimescale() {
  SharedDtor();
}

void CCSUsrMsg_CurrentTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CurrentTimescale_descriptor_;
}

const CCSUsrMsg_CurrentTimescale& CCSUsrMsg_CurrentTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_CurrentTimescale* CCSUsrMsg_CurrentTimescale::default_instance_ = NULL;

CCSUsrMsg_CurrentTimescale* CCSUsrMsg_CurrentTimescale::New() const {
  return new CCSUsrMsg_CurrentTimescale;
}

void CCSUsrMsg_CurrentTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_timescale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cur_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_timescale_)));
          set_has_cur_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cur_timescale = 1;
  if (has_cur_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cur_timescale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CurrentTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cur_timescale = 1;
  if (has_cur_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cur_timescale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CurrentTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cur_timescale = 1;
    if (has_cur_timescale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CurrentTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CurrentTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CurrentTimescale::MergeFrom(const CCSUsrMsg_CurrentTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_timescale()) {
      set_cur_timescale(from.cur_timescale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const CCSUsrMsg_CurrentTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentTimescale::IsInitialized() const {

  return true;
}

void CCSUsrMsg_CurrentTimescale::Swap(CCSUsrMsg_CurrentTimescale* other) {
  if (other != this) {
    std::swap(cur_timescale_, other->cur_timescale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CurrentTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CurrentTimescale_descriptor_;
  metadata.reflection = CCSUsrMsg_CurrentTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AchievementEvent::kAchievementFieldNumber;
const int CCSUsrMsg_AchievementEvent::kCountFieldNumber;
const int CCSUsrMsg_AchievementEvent::kUserIdFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AchievementEvent::InitAsDefaultInstance() {
}

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(const CCSUsrMsg_AchievementEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0;
  count_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AchievementEvent::~CCSUsrMsg_AchievementEvent() {
  SharedDtor();
}

void CCSUsrMsg_AchievementEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AchievementEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AchievementEvent_descriptor_;
}

const CCSUsrMsg_AchievementEvent& CCSUsrMsg_AchievementEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_AchievementEvent* CCSUsrMsg_AchievementEvent::default_instance_ = NULL;

CCSUsrMsg_AchievementEvent* CCSUsrMsg_AchievementEvent::New() const {
  return new CCSUsrMsg_AchievementEvent;
}

void CCSUsrMsg_AchievementEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_ = 0;
    count_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achievement(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AchievementEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achievement = 1;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achievement(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AchievementEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievement());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AchievementEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AchievementEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AchievementEvent::MergeFrom(const CCSUsrMsg_AchievementEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const CCSUsrMsg_AchievementEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AchievementEvent::IsInitialized() const {

  return true;
}

void CCSUsrMsg_AchievementEvent::Swap(CCSUsrMsg_AchievementEvent* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(count_, other->count_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AchievementEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AchievementEvent_descriptor_;
  metadata.reflection = CCSUsrMsg_AchievementEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_MatchEndConditions::kFraglimitFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpMaxroundsFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpWinlimitFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpTimelimitFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MatchEndConditions::InitAsDefaultInstance() {
}

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(const CCSUsrMsg_MatchEndConditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MatchEndConditions::SharedCtor() {
  _cached_size_ = 0;
  fraglimit_ = 0;
  mp_maxrounds_ = 0;
  mp_winlimit_ = 0;
  mp_timelimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MatchEndConditions::~CCSUsrMsg_MatchEndConditions() {
  SharedDtor();
}

void CCSUsrMsg_MatchEndConditions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MatchEndConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchEndConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MatchEndConditions_descriptor_;
}

const CCSUsrMsg_MatchEndConditions& CCSUsrMsg_MatchEndConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_MatchEndConditions* CCSUsrMsg_MatchEndConditions::default_instance_ = NULL;

CCSUsrMsg_MatchEndConditions* CCSUsrMsg_MatchEndConditions::New() const {
  return new CCSUsrMsg_MatchEndConditions;
}

void CCSUsrMsg_MatchEndConditions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fraglimit_ = 0;
    mp_maxrounds_ = 0;
    mp_winlimit_ = 0;
    mp_timelimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MatchEndConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fraglimit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fraglimit_)));
          set_has_fraglimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mp_maxrounds;
        break;
      }

      // optional int32 mp_maxrounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_maxrounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_maxrounds_)));
          set_has_mp_maxrounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp_winlimit;
        break;
      }

      // optional int32 mp_winlimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_winlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_winlimit_)));
          set_has_mp_winlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp_timelimit;
        break;
      }

      // optional int32 mp_timelimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_timelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_timelimit_)));
          set_has_mp_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MatchEndConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fraglimit = 1;
  if (has_fraglimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fraglimit(), output);
  }

  // optional int32 mp_maxrounds = 2;
  if (has_mp_maxrounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mp_maxrounds(), output);
  }

  // optional int32 mp_winlimit = 3;
  if (has_mp_winlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp_winlimit(), output);
  }

  // optional int32 mp_timelimit = 4;
  if (has_mp_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp_timelimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MatchEndConditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fraglimit = 1;
  if (has_fraglimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fraglimit(), target);
  }

  // optional int32 mp_maxrounds = 2;
  if (has_mp_maxrounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mp_maxrounds(), target);
  }

  // optional int32 mp_winlimit = 3;
  if (has_mp_winlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp_winlimit(), target);
  }

  // optional int32 mp_timelimit = 4;
  if (has_mp_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp_timelimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MatchEndConditions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fraglimit = 1;
    if (has_fraglimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fraglimit());
    }

    // optional int32 mp_maxrounds = 2;
    if (has_mp_maxrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_maxrounds());
    }

    // optional int32 mp_winlimit = 3;
    if (has_mp_winlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_winlimit());
    }

    // optional int32 mp_timelimit = 4;
    if (has_mp_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_timelimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MatchEndConditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MatchEndConditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MatchEndConditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MatchEndConditions::MergeFrom(const CCSUsrMsg_MatchEndConditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fraglimit()) {
      set_fraglimit(from.fraglimit());
    }
    if (from.has_mp_maxrounds()) {
      set_mp_maxrounds(from.mp_maxrounds());
    }
    if (from.has_mp_winlimit()) {
      set_mp_winlimit(from.mp_winlimit());
    }
    if (from.has_mp_timelimit()) {
      set_mp_timelimit(from.mp_timelimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const CCSUsrMsg_MatchEndConditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchEndConditions::IsInitialized() const {

  return true;
}

void CCSUsrMsg_MatchEndConditions::Swap(CCSUsrMsg_MatchEndConditions* other) {
  if (other != this) {
    std::swap(fraglimit_, other->fraglimit_);
    std::swap(mp_maxrounds_, other->mp_maxrounds_);
    std::swap(mp_winlimit_, other->mp_winlimit_);
    std::swap(mp_timelimit_, other->mp_timelimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MatchEndConditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MatchEndConditions_descriptor_;
  metadata.reflection = CCSUsrMsg_MatchEndConditions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_PlayerStatsUpdate_Stat::kIdxFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate_Stat::kDeltaFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::InitAsDefaultInstance() {
}

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(const CCSUsrMsg_PlayerStatsUpdate_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_PlayerStatsUpdate_Stat::~CCSUsrMsg_PlayerStatsUpdate_Stat() {
  SharedDtor();
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
}

const CCSUsrMsg_PlayerStatsUpdate_Stat& CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_PlayerStatsUpdate_Stat* CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = NULL;

CCSUsrMsg_PlayerStatsUpdate_Stat* CCSUsrMsg_PlayerStatsUpdate_Stat::New() const {
  return new CCSUsrMsg_PlayerStatsUpdate_Stat;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }

      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_PlayerStatsUpdate_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_PlayerStatsUpdate_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_PlayerStatsUpdate_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::IsInitialized() const {

  return true;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Swap(CCSUsrMsg_PlayerStatsUpdate_Stat* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_PlayerStatsUpdate_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
  metadata.reflection = CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_PlayerStatsUpdate::kVersionFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kStatsFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kUserIdFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kCrcFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_PlayerStatsUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(const CCSUsrMsg_PlayerStatsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  user_id_ = 0;
  crc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_PlayerStatsUpdate::~CCSUsrMsg_PlayerStatsUpdate() {
  SharedDtor();
}

void CCSUsrMsg_PlayerStatsUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_PlayerStatsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_PlayerStatsUpdate_descriptor_;
}

const CCSUsrMsg_PlayerStatsUpdate& CCSUsrMsg_PlayerStatsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_PlayerStatsUpdate* CCSUsrMsg_PlayerStatsUpdate::default_instance_ = NULL;

CCSUsrMsg_PlayerStatsUpdate* CCSUsrMsg_PlayerStatsUpdate::New() const {
  return new CCSUsrMsg_PlayerStatsUpdate;
}

void CCSUsrMsg_PlayerStatsUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    user_id_ = 0;
    crc_ = 0;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_PlayerStatsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        break;
      }

      // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crc;
        break;
      }

      // optional int32 crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats(i), output);
  }

  // optional int32 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_id(), output);
  }

  // optional int32 crc = 6;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stats(i), target);
  }

  // optional int32 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_id(), target);
  }

  // optional int32 crc = 6;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_PlayerStatsUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 crc = 6;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crc());
    }

  }
  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_PlayerStatsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_PlayerStatsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_PlayerStatsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_PlayerStatsUpdate::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_PlayerStatsUpdate::Swap(CCSUsrMsg_PlayerStatsUpdate* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    stats_.Swap(&other->stats_);
    std::swap(user_id_, other->user_id_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_PlayerStatsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_PlayerStatsUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_PlayerStatsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DisplayInventory::kDisplayFieldNumber;
const int CCSUsrMsg_DisplayInventory::kUserIdFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DisplayInventory::InitAsDefaultInstance() {
}

CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory(const CCSUsrMsg_DisplayInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DisplayInventory::SharedCtor() {
  _cached_size_ = 0;
  display_ = false;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DisplayInventory::~CCSUsrMsg_DisplayInventory() {
  SharedDtor();
}

void CCSUsrMsg_DisplayInventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DisplayInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DisplayInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DisplayInventory_descriptor_;
}

const CCSUsrMsg_DisplayInventory& CCSUsrMsg_DisplayInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_DisplayInventory* CCSUsrMsg_DisplayInventory::default_instance_ = NULL;

CCSUsrMsg_DisplayInventory* CCSUsrMsg_DisplayInventory::New() const {
  return new CCSUsrMsg_DisplayInventory;
}

void CCSUsrMsg_DisplayInventory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    display_ = false;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DisplayInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DisplayInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->display(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DisplayInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->display(), target);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DisplayInventory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool display = 1;
    if (has_display()) {
      total_size += 1 + 1;
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DisplayInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DisplayInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DisplayInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DisplayInventory::MergeFrom(const CCSUsrMsg_DisplayInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DisplayInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DisplayInventory::CopyFrom(const CCSUsrMsg_DisplayInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisplayInventory::IsInitialized() const {

  return true;
}

void CCSUsrMsg_DisplayInventory::Swap(CCSUsrMsg_DisplayInventory* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DisplayInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DisplayInventory_descriptor_;
  metadata.reflection = CCSUsrMsg_DisplayInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_XRankGet::kModeIdxFieldNumber;
const int CCSUsrMsg_XRankGet::kControllerFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_XRankGet::InitAsDefaultInstance() {
}

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(const CCSUsrMsg_XRankGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_XRankGet::SharedCtor() {
  _cached_size_ = 0;
  mode_idx_ = 0;
  controller_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_XRankGet::~CCSUsrMsg_XRankGet() {
  SharedDtor();
}

void CCSUsrMsg_XRankGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_XRankGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_XRankGet_descriptor_;
}

const CCSUsrMsg_XRankGet& CCSUsrMsg_XRankGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_XRankGet* CCSUsrMsg_XRankGet::default_instance_ = NULL;

CCSUsrMsg_XRankGet* CCSUsrMsg_XRankGet::New() const {
  return new CCSUsrMsg_XRankGet;
}

void CCSUsrMsg_XRankGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_idx_ = 0;
    controller_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_XRankGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_idx_)));
          set_has_mode_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_controller;
        break;
      }

      // optional int32 controller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_)));
          set_has_controller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_XRankGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode_idx = 1;
  if (has_mode_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode_idx(), output);
  }

  // optional int32 controller = 2;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->controller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_XRankGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mode_idx = 1;
  if (has_mode_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->controller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_XRankGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode_idx = 1;
    if (has_mode_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_idx());
    }

    // optional int32 controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_XRankGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_XRankGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_XRankGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_XRankGet::MergeFrom(const CCSUsrMsg_XRankGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_idx()) {
      set_mode_idx(from.mode_idx());
    }
    if (from.has_controller()) {
      set_controller(from.controller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_XRankGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_XRankGet::CopyFrom(const CCSUsrMsg_XRankGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankGet::IsInitialized() const {

  return true;
}

void CCSUsrMsg_XRankGet::Swap(CCSUsrMsg_XRankGet* other) {
  if (other != this) {
    std::swap(mode_idx_, other->mode_idx_);
    std::swap(controller_, other->controller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_XRankGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_XRankGet_descriptor_;
  metadata.reflection = CCSUsrMsg_XRankGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_XRankUpd::kModeIdxFieldNumber;
const int CCSUsrMsg_XRankUpd::kControllerFieldNumber;
const int CCSUsrMsg_XRankUpd::kRankingFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_XRankUpd::InitAsDefaultInstance() {
}

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(const CCSUsrMsg_XRankUpd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_XRankUpd::SharedCtor() {
  _cached_size_ = 0;
  mode_idx_ = 0;
  controller_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_XRankUpd::~CCSUsrMsg_XRankUpd() {
  SharedDtor();
}

void CCSUsrMsg_XRankUpd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_XRankUpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankUpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_XRankUpd_descriptor_;
}

const CCSUsrMsg_XRankUpd& CCSUsrMsg_XRankUpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_XRankUpd* CCSUsrMsg_XRankUpd::default_instance_ = NULL;

CCSUsrMsg_XRankUpd* CCSUsrMsg_XRankUpd::New() const {
  return new CCSUsrMsg_XRankUpd;
}

void CCSUsrMsg_XRankUpd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_idx_ = 0;
    controller_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_XRankUpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_idx_)));
          set_has_mode_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_controller;
        break;
      }

      // optional int32 controller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_)));
          set_has_controller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_XRankUpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode_idx = 1;
  if (has_mode_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode_idx(), output);
  }

  // optional int32 controller = 2;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->controller(), output);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_XRankUpd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mode_idx = 1;
  if (has_mode_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->controller(), target);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_XRankUpd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode_idx = 1;
    if (has_mode_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_idx());
    }

    // optional int32 controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller());
    }

    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_XRankUpd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_XRankUpd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_XRankUpd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_XRankUpd::MergeFrom(const CCSUsrMsg_XRankUpd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_idx()) {
      set_mode_idx(from.mode_idx());
    }
    if (from.has_controller()) {
      set_controller(from.controller());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_XRankUpd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_XRankUpd::CopyFrom(const CCSUsrMsg_XRankUpd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankUpd::IsInitialized() const {

  return true;
}

void CCSUsrMsg_XRankUpd::Swap(CCSUsrMsg_XRankUpd* other) {
  if (other != this) {
    std::swap(mode_idx_, other->mode_idx_);
    std::swap(controller_, other->controller_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_XRankUpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_XRankUpd_descriptor_;
  metadata.reflection = CCSUsrMsg_XRankUpd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CallVoteFailed::kReasonFieldNumber;
const int CCSUsrMsg_CallVoteFailed::kTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CallVoteFailed::InitAsDefaultInstance() {
}

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(const CCSUsrMsg_CallVoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CallVoteFailed::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CallVoteFailed::~CCSUsrMsg_CallVoteFailed() {
  SharedDtor();
}

void CCSUsrMsg_CallVoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CallVoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CallVoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CallVoteFailed_descriptor_;
}

const CCSUsrMsg_CallVoteFailed& CCSUsrMsg_CallVoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_CallVoteFailed* CCSUsrMsg_CallVoteFailed::default_instance_ = NULL;

CCSUsrMsg_CallVoteFailed* CCSUsrMsg_CallVoteFailed::New() const {
  return new CCSUsrMsg_CallVoteFailed;
}

void CCSUsrMsg_CallVoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CallVoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CallVoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CallVoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CallVoteFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CallVoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CallVoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CallVoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CallVoteFailed::MergeFrom(const CCSUsrMsg_CallVoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const CCSUsrMsg_CallVoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CallVoteFailed::IsInitialized() const {

  return true;
}

void CCSUsrMsg_CallVoteFailed::Swap(CCSUsrMsg_CallVoteFailed* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CallVoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CallVoteFailed_descriptor_;
  metadata.reflection = CCSUsrMsg_CallVoteFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoteStart::kTeamFieldNumber;
const int CCSUsrMsg_VoteStart::kEntIdxFieldNumber;
const int CCSUsrMsg_VoteStart::kVoteTypeFieldNumber;
const int CCSUsrMsg_VoteStart::kDispStrFieldNumber;
const int CCSUsrMsg_VoteStart::kDetailsStrFieldNumber;
const int CCSUsrMsg_VoteStart::kOtherTeamStrFieldNumber;
const int CCSUsrMsg_VoteStart::kIsYesNoVoteFieldNumber;
const int CCSUsrMsg_VoteStart::kEntidxTargetFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteStart::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(const CCSUsrMsg_VoteStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteStart::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  ent_idx_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  details_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_team_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_yes_no_vote_ = false;
  entidx_target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteStart::~CCSUsrMsg_VoteStart() {
  SharedDtor();
}

void CCSUsrMsg_VoteStart::SharedDtor() {
  if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
    delete disp_str_;
  }
  if (details_str_ != &::google::protobuf::internal::kEmptyString) {
    delete details_str_;
  }
  if (other_team_str_ != &::google::protobuf::internal::kEmptyString) {
    delete other_team_str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteStart_descriptor_;
}

const CCSUsrMsg_VoteStart& CCSUsrMsg_VoteStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VoteStart* CCSUsrMsg_VoteStart::default_instance_ = NULL;

CCSUsrMsg_VoteStart* CCSUsrMsg_VoteStart::New() const {
  return new CCSUsrMsg_VoteStart;
}

void CCSUsrMsg_VoteStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    ent_idx_ = 0;
    vote_type_ = 0;
    if (has_disp_str()) {
      if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
        disp_str_->clear();
      }
    }
    if (has_details_str()) {
      if (details_str_ != &::google::protobuf::internal::kEmptyString) {
        details_str_->clear();
      }
    }
    if (has_other_team_str()) {
      if (other_team_str_ != &::google::protobuf::internal::kEmptyString) {
        other_team_str_->clear();
      }
    }
    is_yes_no_vote_ = false;
    entidx_target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ent_idx;
        break;
      }

      // optional int32 ent_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ent_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vote_type;
        break;
      }

      // optional int32 vote_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          set_has_vote_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disp_str;
        break;
      }

      // optional string disp_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_details_str;
        break;
      }

      // optional string details_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other_team_str;
        break;
      }

      // optional string other_team_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_team_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_team_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_team_str().data(), this->other_team_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_yes_no_vote;
        break;
      }

      // optional bool is_yes_no_vote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yes_no_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yes_no_vote_)));
          set_has_is_yes_no_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_entidx_target;
        break;
      }

      // optional int32 entidx_target = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entidx_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_target_)));
          set_has_entidx_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 ent_idx = 2;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ent_idx(), output);
  }

  // optional int32 vote_type = 3;
  if (has_vote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vote_type(), output);
  }

  // optional string disp_str = 4;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disp_str(), output);
  }

  // optional string details_str = 5;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->details_str(), output);
  }

  // optional string other_team_str = 6;
  if (has_other_team_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->other_team_str(), output);
  }

  // optional bool is_yes_no_vote = 7;
  if (has_is_yes_no_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yes_no_vote(), output);
  }

  // optional int32 entidx_target = 8;
  if (has_entidx_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->entidx_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 ent_idx = 2;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ent_idx(), target);
  }

  // optional int32 vote_type = 3;
  if (has_vote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vote_type(), target);
  }

  // optional string disp_str = 4;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disp_str(), target);
  }

  // optional string details_str = 5;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->details_str(), target);
  }

  // optional string other_team_str = 6;
  if (has_other_team_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->other_team_str(), target);
  }

  // optional bool is_yes_no_vote = 7;
  if (has_is_yes_no_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yes_no_vote(), target);
  }

  // optional int32 entidx_target = 8;
  if (has_entidx_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->entidx_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 ent_idx = 2;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional int32 vote_type = 3;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }

    // optional string disp_str = 4;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }

    // optional string details_str = 5;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }

    // optional string other_team_str = 6;
    if (has_other_team_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_team_str());
    }

    // optional bool is_yes_no_vote = 7;
    if (has_is_yes_no_vote()) {
      total_size += 1 + 1;
    }

    // optional int32 entidx_target = 8;
    if (has_entidx_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteStart::MergeFrom(const CCSUsrMsg_VoteStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_vote_type()) {
      set_vote_type(from.vote_type());
    }
    if (from.has_disp_str()) {
      set_disp_str(from.disp_str());
    }
    if (from.has_details_str()) {
      set_details_str(from.details_str());
    }
    if (from.has_other_team_str()) {
      set_other_team_str(from.other_team_str());
    }
    if (from.has_is_yes_no_vote()) {
      set_is_yes_no_vote(from.is_yes_no_vote());
    }
    if (from.has_entidx_target()) {
      set_entidx_target(from.entidx_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteStart::CopyFrom(const CCSUsrMsg_VoteStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteStart::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VoteStart::Swap(CCSUsrMsg_VoteStart* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(other_team_str_, other->other_team_str_);
    std::swap(is_yes_no_vote_, other->is_yes_no_vote_);
    std::swap(entidx_target_, other->entidx_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteStart_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VotePass::kTeamFieldNumber;
const int CCSUsrMsg_VotePass::kVoteTypeFieldNumber;
const int CCSUsrMsg_VotePass::kDispStrFieldNumber;
const int CCSUsrMsg_VotePass::kDetailsStrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VotePass::InitAsDefaultInstance() {
}

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(const CCSUsrMsg_VotePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VotePass::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  details_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VotePass::~CCSUsrMsg_VotePass() {
  SharedDtor();
}

void CCSUsrMsg_VotePass::SharedDtor() {
  if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
    delete disp_str_;
  }
  if (details_str_ != &::google::protobuf::internal::kEmptyString) {
    delete details_str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VotePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VotePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VotePass_descriptor_;
}

const CCSUsrMsg_VotePass& CCSUsrMsg_VotePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VotePass* CCSUsrMsg_VotePass::default_instance_ = NULL;

CCSUsrMsg_VotePass* CCSUsrMsg_VotePass::New() const {
  return new CCSUsrMsg_VotePass;
}

void CCSUsrMsg_VotePass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    vote_type_ = 0;
    if (has_disp_str()) {
      if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
        disp_str_->clear();
      }
    }
    if (has_details_str()) {
      if (details_str_ != &::google::protobuf::internal::kEmptyString) {
        details_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VotePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_type;
        break;
      }

      // optional int32 vote_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          set_has_vote_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp_str;
        break;
      }

      // optional string disp_str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_details_str;
        break;
      }

      // optional string details_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VotePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 vote_type = 2;
  if (has_vote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote_type(), output);
  }

  // optional string disp_str = 3;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disp_str(), output);
  }

  // optional string details_str = 4;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->details_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VotePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 vote_type = 2;
  if (has_vote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote_type(), target);
  }

  // optional string disp_str = 3;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disp_str(), target);
  }

  // optional string details_str = 4;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->details_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VotePass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 vote_type = 2;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }

    // optional string disp_str = 3;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }

    // optional string details_str = 4;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VotePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VotePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VotePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VotePass::MergeFrom(const CCSUsrMsg_VotePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_vote_type()) {
      set_vote_type(from.vote_type());
    }
    if (from.has_disp_str()) {
      set_disp_str(from.disp_str());
    }
    if (from.has_details_str()) {
      set_details_str(from.details_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VotePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VotePass::CopyFrom(const CCSUsrMsg_VotePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VotePass::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VotePass::Swap(CCSUsrMsg_VotePass* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VotePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VotePass_descriptor_;
  metadata.reflection = CCSUsrMsg_VotePass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoteFailed::kTeamFieldNumber;
const int CCSUsrMsg_VoteFailed::kReasonFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteFailed::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(const CCSUsrMsg_VoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteFailed::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteFailed::~CCSUsrMsg_VoteFailed() {
  SharedDtor();
}

void CCSUsrMsg_VoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteFailed_descriptor_;
}

const CCSUsrMsg_VoteFailed& CCSUsrMsg_VoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VoteFailed* CCSUsrMsg_VoteFailed::default_instance_ = NULL;

CCSUsrMsg_VoteFailed* CCSUsrMsg_VoteFailed::New() const {
  return new CCSUsrMsg_VoteFailed;
}

void CCSUsrMsg_VoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteFailed::MergeFrom(const CCSUsrMsg_VoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteFailed::CopyFrom(const CCSUsrMsg_VoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteFailed::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VoteFailed::Swap(CCSUsrMsg_VoteFailed* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteFailed_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoteSetup::kPotentialIssuesFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteSetup::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(const CCSUsrMsg_VoteSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteSetup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteSetup::~CCSUsrMsg_VoteSetup() {
  SharedDtor();
}

void CCSUsrMsg_VoteSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteSetup_descriptor_;
}

const CCSUsrMsg_VoteSetup& CCSUsrMsg_VoteSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_VoteSetup* CCSUsrMsg_VoteSetup::default_instance_ = NULL;

CCSUsrMsg_VoteSetup* CCSUsrMsg_VoteSetup::New() const {
  return new CCSUsrMsg_VoteSetup;
}

void CCSUsrMsg_VoteSetup::Clear() {
  potential_issues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string potential_issues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_potential_issues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_potential_issues()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->potential_issues(this->potential_issues_size() - 1).data(),
            this->potential_issues(this->potential_issues_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_potential_issues;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->potential_issues(i).data(), this->potential_issues(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->potential_issues(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->potential_issues(i).data(), this->potential_issues(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->potential_issues(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteSetup::ByteSize() const {
  int total_size = 0;

  // repeated string potential_issues = 1;
  total_size += 1 * this->potential_issues_size();
  for (int i = 0; i < this->potential_issues_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->potential_issues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteSetup::MergeFrom(const CCSUsrMsg_VoteSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  potential_issues_.MergeFrom(from.potential_issues_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteSetup::CopyFrom(const CCSUsrMsg_VoteSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteSetup::IsInitialized() const {

  return true;
}

void CCSUsrMsg_VoteSetup::Swap(CCSUsrMsg_VoteSetup* other) {
  if (other != this) {
    potential_issues_.Swap(&other->potential_issues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteSetup_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SendLastKillerDamageToClient::kNumHitsGivenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kDamageGivenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kNumHitsTakenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kDamageTakenFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendLastKillerDamageToClient::InitAsDefaultInstance() {
}

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(const CCSUsrMsg_SendLastKillerDamageToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendLastKillerDamageToClient::SharedCtor() {
  _cached_size_ = 0;
  num_hits_given_ = 0;
  damage_given_ = 0;
  num_hits_taken_ = 0;
  damage_taken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendLastKillerDamageToClient::~CCSUsrMsg_SendLastKillerDamageToClient() {
  SharedDtor();
}

void CCSUsrMsg_SendLastKillerDamageToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SendLastKillerDamageToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendLastKillerDamageToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendLastKillerDamageToClient_descriptor_;
}

const CCSUsrMsg_SendLastKillerDamageToClient& CCSUsrMsg_SendLastKillerDamageToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SendLastKillerDamageToClient* CCSUsrMsg_SendLastKillerDamageToClient::default_instance_ = NULL;

CCSUsrMsg_SendLastKillerDamageToClient* CCSUsrMsg_SendLastKillerDamageToClient::New() const {
  return new CCSUsrMsg_SendLastKillerDamageToClient;
}

void CCSUsrMsg_SendLastKillerDamageToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_hits_given_ = 0;
    damage_given_ = 0;
    num_hits_taken_ = 0;
    damage_taken_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendLastKillerDamageToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hits_given = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_given_)));
          set_has_num_hits_given();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_given;
        break;
      }

      // optional int32 damage_given = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_given:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_given_)));
          set_has_damage_given();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_hits_taken;
        break;
      }

      // optional int32 num_hits_taken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hits_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_taken_)));
          set_has_num_hits_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage_taken;
        break;
      }

      // optional int32 damage_taken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_taken_)));
          set_has_damage_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_hits_given = 1;
  if (has_num_hits_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hits_given(), output);
  }

  // optional int32 damage_given = 2;
  if (has_damage_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_given(), output);
  }

  // optional int32 num_hits_taken = 3;
  if (has_num_hits_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_hits_taken(), output);
  }

  // optional int32 damage_taken = 4;
  if (has_damage_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage_taken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_hits_given = 1;
  if (has_num_hits_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hits_given(), target);
  }

  // optional int32 damage_given = 2;
  if (has_damage_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_given(), target);
  }

  // optional int32 num_hits_taken = 3;
  if (has_num_hits_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_hits_taken(), target);
  }

  // optional int32 damage_taken = 4;
  if (has_damage_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage_taken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendLastKillerDamageToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_hits_given = 1;
    if (has_num_hits_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_given());
    }

    // optional int32 damage_given = 2;
    if (has_damage_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_given());
    }

    // optional int32 num_hits_taken = 3;
    if (has_num_hits_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_taken());
    }

    // optional int32 damage_taken = 4;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_taken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendLastKillerDamageToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendLastKillerDamageToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendLastKillerDamageToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendLastKillerDamageToClient::MergeFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_hits_given()) {
      set_num_hits_given(from.num_hits_given());
    }
    if (from.has_damage_given()) {
      set_damage_given(from.damage_given());
    }
    if (from.has_num_hits_taken()) {
      set_num_hits_taken(from.num_hits_taken());
    }
    if (from.has_damage_taken()) {
      set_damage_taken(from.damage_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendLastKillerDamageToClient::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SendLastKillerDamageToClient::Swap(CCSUsrMsg_SendLastKillerDamageToClient* other) {
  if (other != this) {
    std::swap(num_hits_given_, other->num_hits_given_);
    std::swap(damage_given_, other->damage_given_);
    std::swap(num_hits_taken_, other->num_hits_taken_);
    std::swap(damage_taken_, other->damage_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendLastKillerDamageToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendLastKillerDamageToClient_descriptor_;
  metadata.reflection = CCSUsrMsg_SendLastKillerDamageToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kAccountIdFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankOldFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankNewFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kNumWinsFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankChangeFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankTypeIdFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0;
  rank_old_ = 0;
  rank_new_ = 0;
  num_wins_ = 0;
  rank_change_ = 0;
  rank_type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::~CCSUsrMsg_ServerRankUpdate_RankUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_RankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_;
}

const CCSUsrMsg_ServerRankUpdate_RankUpdate& CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ServerRankUpdate_RankUpdate* CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_ = NULL;

CCSUsrMsg_ServerRankUpdate_RankUpdate* CCSUsrMsg_ServerRankUpdate_RankUpdate::New() const {
  return new CCSUsrMsg_ServerRankUpdate_RankUpdate;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0;
    rank_old_ = 0;
    rank_new_ = 0;
    num_wins_ = 0;
    rank_change_ = 0;
    rank_type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_old;
        break;
      }

      // optional int32 rank_old = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_old_)));
          set_has_rank_old();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_new;
        break;
      }

      // optional int32 rank_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_new_)));
          set_has_rank_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_wins;
        break;
      }

      // optional int32 num_wins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_wins_)));
          set_has_num_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rank_change;
        break;
      }

      // optional float rank_change = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_type_id;
        break;
      }

      // optional int32 rank_type_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_id_)));
          set_has_rank_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }

  // optional int32 rank_old = 2;
  if (has_rank_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_old(), output);
  }

  // optional int32 rank_new = 3;
  if (has_rank_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_new(), output);
  }

  // optional int32 num_wins = 4;
  if (has_num_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_wins(), output);
  }

  // optional float rank_change = 5;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rank_change(), output);
  }

  // optional int32 rank_type_id = 6;
  if (has_rank_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankUpdate_RankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 rank_old = 2;
  if (has_rank_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_old(), target);
  }

  // optional int32 rank_new = 3;
  if (has_rank_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_new(), target);
  }

  // optional int32 num_wins = 4;
  if (has_num_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_wins(), target);
  }

  // optional float rank_change = 5;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rank_change(), target);
  }

  // optional int32 rank_type_id = 6;
  if (has_rank_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankUpdate_RankUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional int32 rank_old = 2;
    if (has_rank_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_old());
    }

    // optional int32 rank_new = 3;
    if (has_rank_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_new());
    }

    // optional int32 num_wins = 4;
    if (has_num_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_wins());
    }

    // optional float rank_change = 5;
    if (has_rank_change()) {
      total_size += 1 + 4;
    }

    // optional int32 rank_type_id = 6;
    if (has_rank_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankUpdate_RankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankUpdate_RankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_rank_old()) {
      set_rank_old(from.rank_old());
    }
    if (from.has_rank_new()) {
      set_rank_new(from.rank_new());
    }
    if (from.has_num_wins()) {
      set_num_wins(from.num_wins());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_rank_type_id()) {
      set_rank_type_id(from.rank_type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Swap(CCSUsrMsg_ServerRankUpdate_RankUpdate* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rank_old_, other->rank_old_);
    std::swap(rank_new_, other->rank_new_);
    std::swap(num_wins_, other->num_wins_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(rank_type_id_, other->rank_type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankUpdate_RankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankUpdate::kRankUpdateFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(const CCSUsrMsg_ServerRankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankUpdate::~CCSUsrMsg_ServerRankUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ServerRankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankUpdate_descriptor_;
}

const CCSUsrMsg_ServerRankUpdate& CCSUsrMsg_ServerRankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ServerRankUpdate* CCSUsrMsg_ServerRankUpdate::default_instance_ = NULL;

CCSUsrMsg_ServerRankUpdate* CCSUsrMsg_ServerRankUpdate::New() const {
  return new CCSUsrMsg_ServerRankUpdate;
}

void CCSUsrMsg_ServerRankUpdate::Clear() {
  rank_update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_update;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (int i = 0; i < this->rank_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_update(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (int i = 0; i < this->rank_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_update(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  total_size += 1 * this->rank_update_size();
  for (int i = 0; i < this->rank_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_update(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_update_.MergeFrom(from.rank_update_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ServerRankUpdate::Swap(CCSUsrMsg_ServerRankUpdate* other) {
  if (other != this) {
    rank_update_.Swap(&other->rank_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ItemPickup::kItemFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ItemPickup::InitAsDefaultInstance() {
}

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(const CCSUsrMsg_ItemPickup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ItemPickup::SharedCtor() {
  _cached_size_ = 0;
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ItemPickup::~CCSUsrMsg_ItemPickup() {
  SharedDtor();
}

void CCSUsrMsg_ItemPickup::SharedDtor() {
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    delete item_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ItemPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ItemPickup_descriptor_;
}

const CCSUsrMsg_ItemPickup& CCSUsrMsg_ItemPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ItemPickup* CCSUsrMsg_ItemPickup::default_instance_ = NULL;

CCSUsrMsg_ItemPickup* CCSUsrMsg_ItemPickup::New() const {
  return new CCSUsrMsg_ItemPickup;
}

void CCSUsrMsg_ItemPickup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::kEmptyString) {
        item_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ItemPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ItemPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ItemPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ItemPickup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ItemPickup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ItemPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ItemPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ItemPickup::MergeFrom(const CCSUsrMsg_ItemPickup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ItemPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ItemPickup::CopyFrom(const CCSUsrMsg_ItemPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemPickup::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ItemPickup::Swap(CCSUsrMsg_ItemPickup* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ItemPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ItemPickup_descriptor_;
  metadata.reflection = CCSUsrMsg_ItemPickup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ShowMenu::kBitsValidSlotsFieldNumber;
const int CCSUsrMsg_ShowMenu::kDisplayTimeFieldNumber;
const int CCSUsrMsg_ShowMenu::kMenuStringFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ShowMenu::InitAsDefaultInstance() {
}

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(const CCSUsrMsg_ShowMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ShowMenu::SharedCtor() {
  _cached_size_ = 0;
  bits_valid_slots_ = 0;
  display_time_ = 0;
  menu_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ShowMenu::~CCSUsrMsg_ShowMenu() {
  SharedDtor();
}

void CCSUsrMsg_ShowMenu::SharedDtor() {
  if (menu_string_ != &::google::protobuf::internal::kEmptyString) {
    delete menu_string_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ShowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ShowMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ShowMenu_descriptor_;
}

const CCSUsrMsg_ShowMenu& CCSUsrMsg_ShowMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ShowMenu* CCSUsrMsg_ShowMenu::default_instance_ = NULL;

CCSUsrMsg_ShowMenu* CCSUsrMsg_ShowMenu::New() const {
  return new CCSUsrMsg_ShowMenu;
}

void CCSUsrMsg_ShowMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bits_valid_slots_ = 0;
    display_time_ = 0;
    if (has_menu_string()) {
      if (menu_string_ != &::google::protobuf::internal::kEmptyString) {
        menu_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bits_valid_slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_valid_slots_)));
          set_has_bits_valid_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_time;
        break;
      }

      // optional int32 display_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_time_)));
          set_has_display_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_menu_string;
        break;
      }

      // optional string menu_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menu_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu_string().data(), this->menu_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bits_valid_slots = 1;
  if (has_bits_valid_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bits_valid_slots(), output);
  }

  // optional int32 display_time = 2;
  if (has_display_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display_time(), output);
  }

  // optional string menu_string = 3;
  if (has_menu_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->menu_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ShowMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bits_valid_slots = 1;
  if (has_bits_valid_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bits_valid_slots(), target);
  }

  // optional int32 display_time = 2;
  if (has_display_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display_time(), target);
  }

  // optional string menu_string = 3;
  if (has_menu_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->menu_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ShowMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bits_valid_slots = 1;
    if (has_bits_valid_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_valid_slots());
    }

    // optional int32 display_time = 2;
    if (has_display_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_time());
    }

    // optional string menu_string = 3;
    if (has_menu_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menu_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ShowMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ShowMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ShowMenu::MergeFrom(const CCSUsrMsg_ShowMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bits_valid_slots()) {
      set_bits_valid_slots(from.bits_valid_slots());
    }
    if (from.has_display_time()) {
      set_display_time(from.display_time());
    }
    if (from.has_menu_string()) {
      set_menu_string(from.menu_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ShowMenu::CopyFrom(const CCSUsrMsg_ShowMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ShowMenu::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ShowMenu::Swap(CCSUsrMsg_ShowMenu* other) {
  if (other != this) {
    std::swap(bits_valid_slots_, other->bits_valid_slots_);
    std::swap(display_time_, other->display_time_);
    std::swap(menu_string_, other->menu_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ShowMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ShowMenu_descriptor_;
  metadata.reflection = CCSUsrMsg_ShowMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_BarTime::kTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_BarTime::InitAsDefaultInstance() {
}

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(const CCSUsrMsg_BarTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_BarTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_BarTime::~CCSUsrMsg_BarTime() {
  SharedDtor();
}

void CCSUsrMsg_BarTime::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_BarTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_BarTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_BarTime_descriptor_;
}

const CCSUsrMsg_BarTime& CCSUsrMsg_BarTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_BarTime* CCSUsrMsg_BarTime::default_instance_ = NULL;

CCSUsrMsg_BarTime* CCSUsrMsg_BarTime::New() const {
  return new CCSUsrMsg_BarTime;
}

void CCSUsrMsg_BarTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_BarTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_BarTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_BarTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_BarTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_BarTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_BarTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_BarTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_BarTime::MergeFrom(const CCSUsrMsg_BarTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_BarTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_BarTime::CopyFrom(const CCSUsrMsg_BarTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_BarTime::IsInitialized() const {

  return true;
}

void CCSUsrMsg_BarTime::Swap(CCSUsrMsg_BarTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_BarTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_BarTime_descriptor_;
  metadata.reflection = CCSUsrMsg_BarTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AmmoDenied::kAmmoIdxFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AmmoDenied::InitAsDefaultInstance() {
}

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(const CCSUsrMsg_AmmoDenied& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AmmoDenied::SharedCtor() {
  _cached_size_ = 0;
  ammoidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AmmoDenied::~CCSUsrMsg_AmmoDenied() {
  SharedDtor();
}

void CCSUsrMsg_AmmoDenied::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AmmoDenied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AmmoDenied::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AmmoDenied_descriptor_;
}

const CCSUsrMsg_AmmoDenied& CCSUsrMsg_AmmoDenied::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_AmmoDenied* CCSUsrMsg_AmmoDenied::default_instance_ = NULL;

CCSUsrMsg_AmmoDenied* CCSUsrMsg_AmmoDenied::New() const {
  return new CCSUsrMsg_AmmoDenied;
}

void CCSUsrMsg_AmmoDenied::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ammoidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AmmoDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ammoIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammoidx_)));
          set_has_ammoidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AmmoDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ammoIdx = 1;
  if (has_ammoidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ammoidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AmmoDenied::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ammoIdx = 1;
  if (has_ammoidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ammoidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AmmoDenied::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ammoIdx = 1;
    if (has_ammoidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammoidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AmmoDenied::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AmmoDenied* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AmmoDenied*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AmmoDenied::MergeFrom(const CCSUsrMsg_AmmoDenied& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ammoidx()) {
      set_ammoidx(from.ammoidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const CCSUsrMsg_AmmoDenied& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AmmoDenied::IsInitialized() const {

  return true;
}

void CCSUsrMsg_AmmoDenied::Swap(CCSUsrMsg_AmmoDenied* other) {
  if (other != this) {
    std::swap(ammoidx_, other->ammoidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AmmoDenied::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AmmoDenied_descriptor_;
  metadata.reflection = CCSUsrMsg_AmmoDenied_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_MarkAchievement::kAchievementFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MarkAchievement::InitAsDefaultInstance() {
}

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(const CCSUsrMsg_MarkAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MarkAchievement::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MarkAchievement::~CCSUsrMsg_MarkAchievement() {
  SharedDtor();
}

void CCSUsrMsg_MarkAchievement::SharedDtor() {
  if (achievement_ != &::google::protobuf::internal::kEmptyString) {
    delete achievement_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MarkAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MarkAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MarkAchievement_descriptor_;
}

const CCSUsrMsg_MarkAchievement& CCSUsrMsg_MarkAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_MarkAchievement* CCSUsrMsg_MarkAchievement::default_instance_ = NULL;

CCSUsrMsg_MarkAchievement* CCSUsrMsg_MarkAchievement::New() const {
  return new CCSUsrMsg_MarkAchievement;
}

void CCSUsrMsg_MarkAchievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_achievement()) {
      if (achievement_ != &::google::protobuf::internal::kEmptyString) {
        achievement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MarkAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achievement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achievement().data(), this->achievement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MarkAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->achievement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MarkAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->achievement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MarkAchievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achievement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MarkAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MarkAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MarkAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MarkAchievement::MergeFrom(const CCSUsrMsg_MarkAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const CCSUsrMsg_MarkAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MarkAchievement::IsInitialized() const {

  return true;
}

void CCSUsrMsg_MarkAchievement::Swap(CCSUsrMsg_MarkAchievement* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MarkAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MarkAchievement_descriptor_;
  metadata.reflection = CCSUsrMsg_MarkAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_MatchStatsUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MatchStatsUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(const CCSUsrMsg_MatchStatsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MatchStatsUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MatchStatsUpdate::~CCSUsrMsg_MatchStatsUpdate() {
  SharedDtor();
}

void CCSUsrMsg_MatchStatsUpdate::SharedDtor() {
  if (update_ != &::google::protobuf::internal::kEmptyString) {
    delete update_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MatchStatsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchStatsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MatchStatsUpdate_descriptor_;
}

const CCSUsrMsg_MatchStatsUpdate& CCSUsrMsg_MatchStatsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_MatchStatsUpdate* CCSUsrMsg_MatchStatsUpdate::default_instance_ = NULL;

CCSUsrMsg_MatchStatsUpdate* CCSUsrMsg_MatchStatsUpdate::New() const {
  return new CCSUsrMsg_MatchStatsUpdate;
}

void CCSUsrMsg_MatchStatsUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_update()) {
      if (update_ != &::google::protobuf::internal::kEmptyString) {
        update_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MatchStatsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update().data(), this->update().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MatchStatsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string update = 1;
  if (has_update()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update().data(), this->update().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MatchStatsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string update = 1;
  if (has_update()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update().data(), this->update().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MatchStatsUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string update = 1;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MatchStatsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MatchStatsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MatchStatsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MatchStatsUpdate::MergeFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update()) {
      set_update(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchStatsUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_MatchStatsUpdate::Swap(CCSUsrMsg_MatchStatsUpdate* other) {
  if (other != this) {
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MatchStatsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MatchStatsUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_MatchStatsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ItemDrop::kItemidFieldNumber;
const int CCSUsrMsg_ItemDrop::kDeathFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ItemDrop::InitAsDefaultInstance() {
}

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(const CCSUsrMsg_ItemDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ItemDrop::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  death_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ItemDrop::~CCSUsrMsg_ItemDrop() {
  SharedDtor();
}

void CCSUsrMsg_ItemDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ItemDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ItemDrop_descriptor_;
}

const CCSUsrMsg_ItemDrop& CCSUsrMsg_ItemDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ItemDrop* CCSUsrMsg_ItemDrop::default_instance_ = NULL;

CCSUsrMsg_ItemDrop* CCSUsrMsg_ItemDrop::New() const {
  return new CCSUsrMsg_ItemDrop;
}

void CCSUsrMsg_ItemDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    death_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ItemDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_death;
        break;
      }

      // optional bool death = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &death_)));
          set_has_death();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ItemDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // optional bool death = 2;
  if (has_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->death(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ItemDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // optional bool death = 2;
  if (has_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->death(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ItemDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional bool death = 2;
    if (has_death()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ItemDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ItemDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ItemDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ItemDrop::MergeFrom(const CCSUsrMsg_ItemDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_death()) {
      set_death(from.death());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ItemDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ItemDrop::CopyFrom(const CCSUsrMsg_ItemDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemDrop::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ItemDrop::Swap(CCSUsrMsg_ItemDrop* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(death_, other->death_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ItemDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ItemDrop_descriptor_;
  metadata.reflection = CCSUsrMsg_ItemDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_GlowPropTurnOff::kEntidxFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_GlowPropTurnOff::InitAsDefaultInstance() {
}

CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(const CCSUsrMsg_GlowPropTurnOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_GlowPropTurnOff::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_GlowPropTurnOff::~CCSUsrMsg_GlowPropTurnOff() {
  SharedDtor();
}

void CCSUsrMsg_GlowPropTurnOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_GlowPropTurnOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_GlowPropTurnOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_GlowPropTurnOff_descriptor_;
}

const CCSUsrMsg_GlowPropTurnOff& CCSUsrMsg_GlowPropTurnOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_GlowPropTurnOff* CCSUsrMsg_GlowPropTurnOff::default_instance_ = NULL;

CCSUsrMsg_GlowPropTurnOff* CCSUsrMsg_GlowPropTurnOff::New() const {
  return new CCSUsrMsg_GlowPropTurnOff;
}

void CCSUsrMsg_GlowPropTurnOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_GlowPropTurnOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_GlowPropTurnOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_GlowPropTurnOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_GlowPropTurnOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_GlowPropTurnOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_GlowPropTurnOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_GlowPropTurnOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_GlowPropTurnOff::MergeFrom(const CCSUsrMsg_GlowPropTurnOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_GlowPropTurnOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_GlowPropTurnOff::CopyFrom(const CCSUsrMsg_GlowPropTurnOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GlowPropTurnOff::IsInitialized() const {

  return true;
}

void CCSUsrMsg_GlowPropTurnOff::Swap(CCSUsrMsg_GlowPropTurnOff* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_GlowPropTurnOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_GlowPropTurnOff_descriptor_;
  metadata.reflection = CCSUsrMsg_GlowPropTurnOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RoundBackupFilenames::kCountFieldNumber;
const int CCSUsrMsg_RoundBackupFilenames::kIndexFieldNumber;
const int CCSUsrMsg_RoundBackupFilenames::kFilenameFieldNumber;
const int CCSUsrMsg_RoundBackupFilenames::kNicenameFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundBackupFilenames::InitAsDefaultInstance() {
}

CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(const CCSUsrMsg_RoundBackupFilenames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundBackupFilenames::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  index_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundBackupFilenames::~CCSUsrMsg_RoundBackupFilenames() {
  SharedDtor();
}

void CCSUsrMsg_RoundBackupFilenames::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (nicename_ != &::google::protobuf::internal::kEmptyString) {
    delete nicename_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RoundBackupFilenames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundBackupFilenames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundBackupFilenames_descriptor_;
}

const CCSUsrMsg_RoundBackupFilenames& CCSUsrMsg_RoundBackupFilenames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundBackupFilenames* CCSUsrMsg_RoundBackupFilenames::default_instance_ = NULL;

CCSUsrMsg_RoundBackupFilenames* CCSUsrMsg_RoundBackupFilenames::New() const {
  return new CCSUsrMsg_RoundBackupFilenames;
}

void CCSUsrMsg_RoundBackupFilenames::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    index_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_nicename()) {
      if (nicename_ != &::google::protobuf::internal::kEmptyString) {
        nicename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundBackupFilenames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nicename;
        break;
      }

      // optional string nicename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicename().data(), this->nicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundBackupFilenames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional string nicename = 4;
  if (has_nicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicename().data(), this->nicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nicename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundBackupFilenames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string nicename = 4;
  if (has_nicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicename().data(), this->nicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nicename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundBackupFilenames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string nicename = 4;
    if (has_nicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nicename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundBackupFilenames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundBackupFilenames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundBackupFilenames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundBackupFilenames::MergeFrom(const CCSUsrMsg_RoundBackupFilenames& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_nicename()) {
      set_nicename(from.nicename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundBackupFilenames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundBackupFilenames::CopyFrom(const CCSUsrMsg_RoundBackupFilenames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundBackupFilenames::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundBackupFilenames::Swap(CCSUsrMsg_RoundBackupFilenames* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(filename_, other->filename_);
    std::swap(nicename_, other->nicename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundBackupFilenames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundBackupFilenames_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundBackupFilenames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XpProgressData::kXpPointsFieldNumber;
const int XpProgressData::kXpCategoryFieldNumber;
#endif  // !_MSC_VER

XpProgressData::XpProgressData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XpProgressData::InitAsDefaultInstance() {
}

XpProgressData::XpProgressData(const XpProgressData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XpProgressData::SharedCtor() {
  _cached_size_ = 0;
  xp_points_ = 0u;
  xp_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XpProgressData::~XpProgressData() {
  SharedDtor();
}

void XpProgressData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XpProgressData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XpProgressData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XpProgressData_descriptor_;
}

const XpProgressData& XpProgressData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

XpProgressData* XpProgressData::default_instance_ = NULL;

XpProgressData* XpProgressData::New() const {
  return new XpProgressData;
}

void XpProgressData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xp_points_ = 0u;
    xp_category_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XpProgressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 xp_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_points_)));
          set_has_xp_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xp_category;
        break;
      }

      // optional int32 xp_category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_category_)));
          set_has_xp_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XpProgressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 xp_points = 1;
  if (has_xp_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xp_points(), output);
  }

  // optional int32 xp_category = 2;
  if (has_xp_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xp_category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XpProgressData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 xp_points = 1;
  if (has_xp_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xp_points(), target);
  }

  // optional int32 xp_category = 2;
  if (has_xp_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xp_category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XpProgressData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 xp_points = 1;
    if (has_xp_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_points());
    }

    // optional int32 xp_category = 2;
    if (has_xp_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp_category());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XpProgressData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XpProgressData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XpProgressData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XpProgressData::MergeFrom(const XpProgressData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xp_points()) {
      set_xp_points(from.xp_points());
    }
    if (from.has_xp_category()) {
      set_xp_category(from.xp_category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XpProgressData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XpProgressData::CopyFrom(const XpProgressData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpProgressData::IsInitialized() const {

  return true;
}

void XpProgressData::Swap(XpProgressData* other) {
  if (other != this) {
    std::swap(xp_points_, other->xp_points_);
    std::swap(xp_category_, other->xp_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XpProgressData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XpProgressData_descriptor_;
  metadata.reflection = XpProgressData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kXpProgressDataFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kAccountIdFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentXpFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentLevelFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kUpgradedDefidxFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kOperationPointsAwardedFieldNumber;
#endif  // !_MSC_VER

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance() {
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  current_xp_ = 0u;
  current_level_ = 0u;
  upgraded_defidx_ = 0u;
  operation_points_awarded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  SharedDtor();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_;
}

const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_ = NULL;

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::New() const {
  return new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    account_id_ = 0u;
    current_xp_ = 0u;
    current_level_ = 0u;
    upgraded_defidx_ = 0u;
    operation_points_awarded_ = 0u;
  }
  xp_progress_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XpProgressData xp_progress_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_progress_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_progress_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_xp_progress_data;
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_xp;
        break;
      }

      // optional uint32 current_xp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_xp_)));
          set_has_current_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_level;
        break;
      }

      // optional uint32 current_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_level_)));
          set_has_current_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upgraded_defidx;
        break;
      }

      // optional uint32 upgraded_defidx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgraded_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgraded_defidx_)));
          set_has_upgraded_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operation_points_awarded;
        break;
      }

      // optional uint32 operation_points_awarded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_points_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_points_awarded_)));
          set_has_operation_points_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .XpProgressData xp_progress_data = 1;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xp_progress_data(i), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 current_xp = 3;
  if (has_current_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_xp(), output);
  }

  // optional uint32 current_level = 4;
  if (has_current_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_level(), output);
  }

  // optional uint32 upgraded_defidx = 5;
  if (has_upgraded_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upgraded_defidx(), output);
  }

  // optional uint32 operation_points_awarded = 6;
  if (has_operation_points_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operation_points_awarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .XpProgressData xp_progress_data = 1;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xp_progress_data(i), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 current_xp = 3;
  if (has_current_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (has_current_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_level(), target);
  }

  // optional uint32 upgraded_defidx = 5;
  if (has_upgraded_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upgraded_defidx(), target);
  }

  // optional uint32 operation_points_awarded = 6;
  if (has_operation_points_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operation_points_awarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 current_xp = 3;
    if (has_current_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_xp());
    }

    // optional uint32 current_level = 4;
    if (has_current_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_level());
    }

    // optional uint32 upgraded_defidx = 5;
    if (has_upgraded_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgraded_defidx());
    }

    // optional uint32 operation_points_awarded = 6;
    if (has_operation_points_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation_points_awarded());
    }

  }
  // repeated .XpProgressData xp_progress_data = 1;
  total_size += 1 * this->xp_progress_data_size();
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_progress_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
  GOOGLE_CHECK_NE(&from, this);
  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_current_xp()) {
      set_current_xp(from.current_xp());
    }
    if (from.has_current_level()) {
      set_current_level(from.current_level());
    }
    if (from.has_upgraded_defidx()) {
      set_upgraded_defidx(from.upgraded_defidx());
    }
    if (from.has_operation_points_awarded()) {
      set_operation_points_awarded(from.operation_points_awarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::IsInitialized() const {

  return true;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  if (other != this) {
    xp_progress_data_.Swap(&other->xp_progress_data_);
    std::swap(account_id_, other->account_id_);
    std::swap(current_xp_, other->current_xp_);
    std::swap(current_level_, other->current_level_);
    std::swap(upgraded_defidx_, other->upgraded_defidx_);
    std::swap(operation_points_awarded_, other->operation_points_awarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_;
  metadata.reflection = CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_XpUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_XpUpdate::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*>(&::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance());
}

CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(const CCSUsrMsg_XpUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_XpUpdate::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_XpUpdate::~CCSUsrMsg_XpUpdate() {
  SharedDtor();
}

void CCSUsrMsg_XpUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CCSUsrMsg_XpUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_XpUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_XpUpdate_descriptor_;
}

const CCSUsrMsg_XpUpdate& CCSUsrMsg_XpUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_XpUpdate* CCSUsrMsg_XpUpdate::default_instance_ = NULL;

CCSUsrMsg_XpUpdate* CCSUsrMsg_XpUpdate::New() const {
  return new CCSUsrMsg_XpUpdate;
}

void CCSUsrMsg_XpUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_XpUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_XpUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_XpUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_XpUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_XpUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_XpUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_XpUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_XpUpdate::MergeFrom(const CCSUsrMsg_XpUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_XpUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_XpUpdate::CopyFrom(const CCSUsrMsg_XpUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XpUpdate::IsInitialized() const {

  return true;
}

void CCSUsrMsg_XpUpdate::Swap(CCSUsrMsg_XpUpdate* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_XpUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_XpUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_XpUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_QuestProgress::kQuestIdFieldNumber;
const int CCSUsrMsg_QuestProgress::kNormalPointsFieldNumber;
const int CCSUsrMsg_QuestProgress::kBonusPointsFieldNumber;
const int CCSUsrMsg_QuestProgress::kIsEventQuestFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_QuestProgress::InitAsDefaultInstance() {
}

CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(const CCSUsrMsg_QuestProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_QuestProgress::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0u;
  normal_points_ = 0u;
  bonus_points_ = 0u;
  is_event_quest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_QuestProgress::~CCSUsrMsg_QuestProgress() {
  SharedDtor();
}

void CCSUsrMsg_QuestProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_QuestProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_QuestProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_QuestProgress_descriptor_;
}

const CCSUsrMsg_QuestProgress& CCSUsrMsg_QuestProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_QuestProgress* CCSUsrMsg_QuestProgress::default_instance_ = NULL;

CCSUsrMsg_QuestProgress* CCSUsrMsg_QuestProgress::New() const {
  return new CCSUsrMsg_QuestProgress;
}

void CCSUsrMsg_QuestProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0u;
    normal_points_ = 0u;
    bonus_points_ = 0u;
    is_event_quest_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_QuestProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_normal_points;
        break;
      }

      // optional uint32 normal_points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
          set_has_normal_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bonus_points;
        break;
      }

      // optional uint32 bonus_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_points_)));
          set_has_bonus_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_event_quest;
        break;
      }

      // optional bool is_event_quest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_event_quest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_event_quest_)));
          set_has_is_event_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_QuestProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_points(), output);
  }

  // optional uint32 bonus_points = 3;
  if (has_bonus_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_points(), output);
  }

  // optional bool is_event_quest = 4;
  if (has_is_event_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_event_quest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_QuestProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_points(), target);
  }

  // optional uint32 bonus_points = 3;
  if (has_bonus_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_points(), target);
  }

  // optional bool is_event_quest = 4;
  if (has_is_event_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_event_quest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_QuestProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional uint32 normal_points = 2;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 bonus_points = 3;
    if (has_bonus_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_points());
    }

    // optional bool is_event_quest = 4;
    if (has_is_event_quest()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_QuestProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_QuestProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_QuestProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_QuestProgress::MergeFrom(const CCSUsrMsg_QuestProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_normal_points()) {
      set_normal_points(from.normal_points());
    }
    if (from.has_bonus_points()) {
      set_bonus_points(from.bonus_points());
    }
    if (from.has_is_event_quest()) {
      set_is_event_quest(from.is_event_quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_QuestProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_QuestProgress::CopyFrom(const CCSUsrMsg_QuestProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_QuestProgress::IsInitialized() const {

  return true;
}

void CCSUsrMsg_QuestProgress::Swap(CCSUsrMsg_QuestProgress* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(normal_points_, other->normal_points_);
    std::swap(bonus_points_, other->bonus_points_);
    std::swap(is_event_quest_, other->is_event_quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_QuestProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_QuestProgress_descriptor_;
  metadata.reflection = CCSUsrMsg_QuestProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreLeaderboardData_Entry::kTagFieldNumber;
const int ScoreLeaderboardData_Entry::kValFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData_Entry::InitAsDefaultInstance() {
}

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData_Entry::~ScoreLeaderboardData_Entry() {
  SharedDtor();
}

void ScoreLeaderboardData_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_Entry_descriptor_;
}

const ScoreLeaderboardData_Entry& ScoreLeaderboardData_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData_Entry* ScoreLeaderboardData_Entry::default_instance_ = NULL;

ScoreLeaderboardData_Entry* ScoreLeaderboardData_Entry::New() const {
  return new ScoreLeaderboardData_Entry;
}

void ScoreLeaderboardData_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_Entry::MergeFrom(const ScoreLeaderboardData_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::CopyFrom(const ScoreLeaderboardData_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_Entry::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData_Entry::Swap(ScoreLeaderboardData_Entry* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_Entry_descriptor_;
  metadata.reflection = ScoreLeaderboardData_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ScoreLeaderboardData_AccountEntries::kAccountidFieldNumber;
const int ScoreLeaderboardData_AccountEntries::kEntriesFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance() {
}

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData_AccountEntries::~ScoreLeaderboardData_AccountEntries() {
  SharedDtor();
}

void ScoreLeaderboardData_AccountEntries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData_AccountEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_AccountEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_AccountEntries_descriptor_;
}

const ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData_AccountEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData_AccountEntries::default_instance_ = NULL;

ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData_AccountEntries::New() const {
  return new ScoreLeaderboardData_AccountEntries;
}

void ScoreLeaderboardData_AccountEntries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData_AccountEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .ScoreLeaderboardData.Entry entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData_AccountEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData_AccountEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData_AccountEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  // repeated .ScoreLeaderboardData.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData_AccountEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData_AccountEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ScoreLeaderboardData_AccountEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ScoreLeaderboardData_AccountEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_AccountEntries::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData_AccountEntries::Swap(ScoreLeaderboardData_AccountEntries* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData_AccountEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_AccountEntries_descriptor_;
  metadata.reflection = ScoreLeaderboardData_AccountEntries_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ScoreLeaderboardData::kQuestIdFieldNumber;
const int ScoreLeaderboardData::kScoreFieldNumber;
const int ScoreLeaderboardData::kAccountentriesFieldNumber;
const int ScoreLeaderboardData::kMatchentriesFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData::ScoreLeaderboardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData::InitAsDefaultInstance() {
}

ScoreLeaderboardData::ScoreLeaderboardData(const ScoreLeaderboardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData::~ScoreLeaderboardData() {
  SharedDtor();
}

void ScoreLeaderboardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_descriptor_;
}

const ScoreLeaderboardData& ScoreLeaderboardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData* ScoreLeaderboardData::default_instance_ = NULL;

ScoreLeaderboardData* ScoreLeaderboardData::New() const {
  return new ScoreLeaderboardData;
}

void ScoreLeaderboardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
    score_ = 0u;
  }
  accountentries_.Clear();
  matchentries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountentries;
        break;
      }

      // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountentries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accountentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountentries;
        if (input->ExpectTag(42)) goto parse_matchentries;
        break;
      }

      // repeated .ScoreLeaderboardData.Entry matchentries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchentries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_matchentries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (int i = 0; i < this->accountentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accountentries(i), output);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (int i = 0; i < this->matchentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->matchentries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (int i = 0; i < this->accountentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accountentries(i), target);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (int i = 0; i < this->matchentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->matchentries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  total_size += 1 * this->accountentries_size();
  for (int i = 0; i < this->accountentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accountentries(i));
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  total_size += 1 * this->matchentries_size();
  for (int i = 0; i < this->matchentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchentries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData::MergeFrom(const ScoreLeaderboardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountentries_.MergeFrom(from.accountentries_);
  matchentries_.MergeFrom(from.matchentries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData::CopyFrom(const ScoreLeaderboardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData::Swap(ScoreLeaderboardData* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(score_, other->score_);
    accountentries_.Swap(&other->accountentries_);
    matchentries_.Swap(&other->matchentries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_descriptor_;
  metadata.reflection = ScoreLeaderboardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ScoreLeaderboardData::kDataFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ScoreLeaderboardData::InitAsDefaultInstance() {
  data_ = const_cast< ::ScoreLeaderboardData*>(&::ScoreLeaderboardData::default_instance());
}

CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(const CCSUsrMsg_ScoreLeaderboardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ScoreLeaderboardData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ScoreLeaderboardData::~CCSUsrMsg_ScoreLeaderboardData() {
  SharedDtor();
}

void CCSUsrMsg_ScoreLeaderboardData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CCSUsrMsg_ScoreLeaderboardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ScoreLeaderboardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ScoreLeaderboardData_descriptor_;
}

const CCSUsrMsg_ScoreLeaderboardData& CCSUsrMsg_ScoreLeaderboardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ScoreLeaderboardData* CCSUsrMsg_ScoreLeaderboardData::default_instance_ = NULL;

CCSUsrMsg_ScoreLeaderboardData* CCSUsrMsg_ScoreLeaderboardData::New() const {
  return new CCSUsrMsg_ScoreLeaderboardData;
}

void CCSUsrMsg_ScoreLeaderboardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::ScoreLeaderboardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ScoreLeaderboardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScoreLeaderboardData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ScoreLeaderboardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScoreLeaderboardData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ScoreLeaderboardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScoreLeaderboardData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ScoreLeaderboardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScoreLeaderboardData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ScoreLeaderboardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ScoreLeaderboardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ScoreLeaderboardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ScoreLeaderboardData::MergeFrom(const CCSUsrMsg_ScoreLeaderboardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::ScoreLeaderboardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ScoreLeaderboardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ScoreLeaderboardData::CopyFrom(const CCSUsrMsg_ScoreLeaderboardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ScoreLeaderboardData::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ScoreLeaderboardData::Swap(CCSUsrMsg_ScoreLeaderboardData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ScoreLeaderboardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ScoreLeaderboardData_descriptor_;
  metadata.reflection = CCSUsrMsg_ScoreLeaderboardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDecalDigitalSignature::kSignatureFieldNumber;
const int PlayerDecalDigitalSignature::kAccountidFieldNumber;
const int PlayerDecalDigitalSignature::kRtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEndposFieldNumber;
const int PlayerDecalDigitalSignature::kStartposFieldNumber;
const int PlayerDecalDigitalSignature::kRightFieldNumber;
const int PlayerDecalDigitalSignature::kTxDefidxFieldNumber;
const int PlayerDecalDigitalSignature::kEntindexFieldNumber;
const int PlayerDecalDigitalSignature::kHitboxFieldNumber;
const int PlayerDecalDigitalSignature::kCreationtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEquipslotFieldNumber;
const int PlayerDecalDigitalSignature::kTraceIdFieldNumber;
const int PlayerDecalDigitalSignature::kNormalFieldNumber;
const int PlayerDecalDigitalSignature::kTintIdFieldNumber;
#endif  // !_MSC_VER

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDecalDigitalSignature::InitAsDefaultInstance() {
}

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  rtime_ = 0u;
  tx_defidx_ = 0u;
  entindex_ = 0;
  hitbox_ = 0u;
  creationtime_ = 0;
  equipslot_ = 0u;
  trace_id_ = 0u;
  tint_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDecalDigitalSignature::~PlayerDecalDigitalSignature() {
  SharedDtor();
}

void PlayerDecalDigitalSignature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDecalDigitalSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDecalDigitalSignature_descriptor_;
}

const PlayerDecalDigitalSignature& PlayerDecalDigitalSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

PlayerDecalDigitalSignature* PlayerDecalDigitalSignature::default_instance_ = NULL;

PlayerDecalDigitalSignature* PlayerDecalDigitalSignature::New() const {
  return new PlayerDecalDigitalSignature;
}

void PlayerDecalDigitalSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    accountid_ = 0u;
    rtime_ = 0u;
    tx_defidx_ = 0u;
    entindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hitbox_ = 0u;
    creationtime_ = 0;
    equipslot_ = 0u;
    trace_id_ = 0u;
    tint_id_ = 0u;
  }
  endpos_.Clear();
  startpos_.Clear();
  right_.Clear();
  normal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDecalDigitalSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtime;
        break;
      }

      // optional uint32 rtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_endpos;
        break;
      }

      // repeated float endpos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_endpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_endpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_endpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_endpos;
        if (input->ExpectTag(45)) goto parse_startpos;
        break;
      }

      // repeated float startpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_startpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_startpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_startpos;
        if (input->ExpectTag(53)) goto parse_right;
        break;
      }

      // repeated float right = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_right())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_right())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_right;
        if (input->ExpectTag(56)) goto parse_tx_defidx;
        break;
      }

      // optional uint32 tx_defidx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_defidx_)));
          set_has_tx_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hitbox;
        break;
      }

      // optional uint32 hitbox = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbox_)));
          set_has_hitbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_creationtime;
        break;
      }

      // optional float creationtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_creationtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creationtime_)));
          set_has_creationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_equipslot;
        break;
      }

      // optional uint32 equipslot = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trace_id;
        break;
      }

      // optional uint32 trace_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_normal;
        break;
      }

      // repeated float normal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109, input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_normal;
        if (input->ExpectTag(112)) goto parse_tint_id;
        break;
      }

      // optional uint32 tint_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
          set_has_tint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDecalDigitalSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->signature(), output);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 rtime = 3;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtime(), output);
  }

  // repeated float endpos = 4;
  for (int i = 0; i < this->endpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->endpos(i), output);
  }

  // repeated float startpos = 5;
  for (int i = 0; i < this->startpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->startpos(i), output);
  }

  // repeated float right = 6;
  for (int i = 0; i < this->right_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->right(i), output);
  }

  // optional uint32 tx_defidx = 7;
  if (has_tx_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_defidx(), output);
  }

  // optional int32 entindex = 8;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->entindex(), output);
  }

  // optional uint32 hitbox = 9;
  if (has_hitbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hitbox(), output);
  }

  // optional float creationtime = 10;
  if (has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->creationtime(), output);
  }

  // optional uint32 equipslot = 11;
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->equipslot(), output);
  }

  // optional uint32 trace_id = 12;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->trace_id(), output);
  }

  // repeated float normal = 13;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->normal(i), output);
  }

  // optional uint32 tint_id = 14;
  if (has_tint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tint_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDecalDigitalSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 rtime = 3;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtime(), target);
  }

  // repeated float endpos = 4;
  for (int i = 0; i < this->endpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->endpos(i), target);
  }

  // repeated float startpos = 5;
  for (int i = 0; i < this->startpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->startpos(i), target);
  }

  // repeated float right = 6;
  for (int i = 0; i < this->right_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->right(i), target);
  }

  // optional uint32 tx_defidx = 7;
  if (has_tx_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_defidx(), target);
  }

  // optional int32 entindex = 8;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->entindex(), target);
  }

  // optional uint32 hitbox = 9;
  if (has_hitbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hitbox(), target);
  }

  // optional float creationtime = 10;
  if (has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->creationtime(), target);
  }

  // optional uint32 equipslot = 11;
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->equipslot(), target);
  }

  // optional uint32 trace_id = 12;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->trace_id(), target);
  }

  // repeated float normal = 13;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(13, this->normal(i), target);
  }

  // optional uint32 tint_id = 14;
  if (has_tint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tint_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDecalDigitalSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 rtime = 3;
    if (has_rtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime());
    }

    // optional uint32 tx_defidx = 7;
    if (has_tx_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_defidx());
    }

    // optional int32 entindex = 8;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hitbox = 9;
    if (has_hitbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbox());
    }

    // optional float creationtime = 10;
    if (has_creationtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 equipslot = 11;
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipslot());
    }

    // optional uint32 trace_id = 12;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_id());
    }

    // optional uint32 tint_id = 14;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  // repeated float endpos = 4;
  {
    int data_size = 0;
    data_size = 4 * this->endpos_size();
    total_size += 1 * this->endpos_size() + data_size;
  }

  // repeated float startpos = 5;
  {
    int data_size = 0;
    data_size = 4 * this->startpos_size();
    total_size += 1 * this->startpos_size() + data_size;
  }

  // repeated float right = 6;
  {
    int data_size = 0;
    data_size = 4 * this->right_size();
    total_size += 1 * this->right_size() + data_size;
  }

  // repeated float normal = 13;
  {
    int data_size = 0;
    data_size = 4 * this->normal_size();
    total_size += 1 * this->normal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDecalDigitalSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDecalDigitalSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDecalDigitalSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDecalDigitalSignature::MergeFrom(const PlayerDecalDigitalSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  endpos_.MergeFrom(from.endpos_);
  startpos_.MergeFrom(from.startpos_);
  right_.MergeFrom(from.right_);
  normal_.MergeFrom(from.normal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
    if (from.has_tx_defidx()) {
      set_tx_defidx(from.tx_defidx());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hitbox()) {
      set_hitbox(from.hitbox());
    }
    if (from.has_creationtime()) {
      set_creationtime(from.creationtime());
    }
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_tint_id()) {
      set_tint_id(from.tint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDecalDigitalSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::CopyFrom(const PlayerDecalDigitalSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDecalDigitalSignature::IsInitialized() const {

  return true;
}

void PlayerDecalDigitalSignature::Swap(PlayerDecalDigitalSignature* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(accountid_, other->accountid_);
    std::swap(rtime_, other->rtime_);
    endpos_.Swap(&other->endpos_);
    startpos_.Swap(&other->startpos_);
    right_.Swap(&other->right_);
    std::swap(tx_defidx_, other->tx_defidx_);
    std::swap(entindex_, other->entindex_);
    std::swap(hitbox_, other->hitbox_);
    std::swap(creationtime_, other->creationtime_);
    std::swap(equipslot_, other->equipslot_);
    std::swap(trace_id_, other->trace_id_);
    normal_.Swap(&other->normal_);
    std::swap(tint_id_, other->tint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDecalDigitalSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDecalDigitalSignature_descriptor_;
  metadata.reflection = PlayerDecalDigitalSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_PlayerDecalDigitalSignature::kDataFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_PlayerDecalDigitalSignature::InitAsDefaultInstance() {
  data_ = const_cast< ::PlayerDecalDigitalSignature*>(&::PlayerDecalDigitalSignature::default_instance());
}

CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(const CCSUsrMsg_PlayerDecalDigitalSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_PlayerDecalDigitalSignature::~CCSUsrMsg_PlayerDecalDigitalSignature() {
  SharedDtor();
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerDecalDigitalSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_;
}

const CCSUsrMsg_PlayerDecalDigitalSignature& CCSUsrMsg_PlayerDecalDigitalSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_PlayerDecalDigitalSignature* CCSUsrMsg_PlayerDecalDigitalSignature::default_instance_ = NULL;

CCSUsrMsg_PlayerDecalDigitalSignature* CCSUsrMsg_PlayerDecalDigitalSignature::New() const {
  return new CCSUsrMsg_PlayerDecalDigitalSignature;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::PlayerDecalDigitalSignature::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_PlayerDecalDigitalSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerDecalDigitalSignature data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_PlayerDecalDigitalSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerDecalDigitalSignature data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_PlayerDecalDigitalSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerDecalDigitalSignature data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_PlayerDecalDigitalSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_PlayerDecalDigitalSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_PlayerDecalDigitalSignature::MergeFrom(const CCSUsrMsg_PlayerDecalDigitalSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_PlayerDecalDigitalSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::CopyFrom(const CCSUsrMsg_PlayerDecalDigitalSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerDecalDigitalSignature::IsInitialized() const {

  return true;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::Swap(CCSUsrMsg_PlayerDecalDigitalSignature* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_PlayerDecalDigitalSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_PlayerDecalDigitalSignature_descriptor_;
  metadata.reflection = CCSUsrMsg_PlayerDecalDigitalSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_WeaponSound::kEntidxFieldNumber;
const int CCSUsrMsg_WeaponSound::kOriginXFieldNumber;
const int CCSUsrMsg_WeaponSound::kOriginYFieldNumber;
const int CCSUsrMsg_WeaponSound::kOriginZFieldNumber;
const int CCSUsrMsg_WeaponSound::kSoundFieldNumber;
const int CCSUsrMsg_WeaponSound::kTimestampFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_WeaponSound::CCSUsrMsg_WeaponSound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_WeaponSound::InitAsDefaultInstance() {
}

CCSUsrMsg_WeaponSound::CCSUsrMsg_WeaponSound(const CCSUsrMsg_WeaponSound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_WeaponSound::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  origin_x_ = 0;
  origin_y_ = 0;
  origin_z_ = 0;
  sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_WeaponSound::~CCSUsrMsg_WeaponSound() {
  SharedDtor();
}

void CCSUsrMsg_WeaponSound::SharedDtor() {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_WeaponSound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_WeaponSound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_WeaponSound_descriptor_;
}

const CCSUsrMsg_WeaponSound& CCSUsrMsg_WeaponSound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_WeaponSound* CCSUsrMsg_WeaponSound::default_instance_ = NULL;

CCSUsrMsg_WeaponSound* CCSUsrMsg_WeaponSound::New() const {
  return new CCSUsrMsg_WeaponSound;
}

void CCSUsrMsg_WeaponSound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
    origin_x_ = 0;
    origin_y_ = 0;
    origin_z_ = 0;
    if (has_sound()) {
      if (sound_ != &::google::protobuf::internal::kEmptyString) {
        sound_->clear();
      }
    }
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_WeaponSound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_origin_x;
        break;
      }

      // optional float origin_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_x_)));
          set_has_origin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_origin_y;
        break;
      }

      // optional float origin_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_y_)));
          set_has_origin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_origin_z;
        break;
      }

      // optional float origin_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_z_)));
          set_has_origin_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sound;
        break;
      }

      // optional string sound = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sound().data(), this->sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_timestamp;
        break;
      }

      // optional float timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_WeaponSound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  // optional float origin_x = 2;
  if (has_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->origin_x(), output);
  }

  // optional float origin_y = 3;
  if (has_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->origin_y(), output);
  }

  // optional float origin_z = 4;
  if (has_origin_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->origin_z(), output);
  }

  // optional string sound = 5;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sound(), output);
  }

  // optional float timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_WeaponSound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  // optional float origin_x = 2;
  if (has_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->origin_x(), target);
  }

  // optional float origin_y = 3;
  if (has_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->origin_y(), target);
  }

  // optional float origin_z = 4;
  if (has_origin_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->origin_z(), target);
  }

  // optional string sound = 5;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sound(), target);
  }

  // optional float timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_WeaponSound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

    // optional float origin_x = 2;
    if (has_origin_x()) {
      total_size += 1 + 4;
    }

    // optional float origin_y = 3;
    if (has_origin_y()) {
      total_size += 1 + 4;
    }

    // optional float origin_z = 4;
    if (has_origin_z()) {
      total_size += 1 + 4;
    }

    // optional string sound = 5;
    if (has_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

    // optional float timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_WeaponSound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_WeaponSound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_WeaponSound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_WeaponSound::MergeFrom(const CCSUsrMsg_WeaponSound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
    if (from.has_origin_x()) {
      set_origin_x(from.origin_x());
    }
    if (from.has_origin_y()) {
      set_origin_y(from.origin_y());
    }
    if (from.has_origin_z()) {
      set_origin_z(from.origin_z());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_WeaponSound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_WeaponSound::CopyFrom(const CCSUsrMsg_WeaponSound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WeaponSound::IsInitialized() const {

  return true;
}

void CCSUsrMsg_WeaponSound::Swap(CCSUsrMsg_WeaponSound* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(origin_x_, other->origin_x_);
    std::swap(origin_y_, other->origin_y_);
    std::swap(origin_z_, other->origin_z_);
    std::swap(sound_, other->sound_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_WeaponSound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_WeaponSound_descriptor_;
  metadata.reflection = CCSUsrMsg_WeaponSound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_UpdateScreenHealthBar::kEntidxFieldNumber;
const int CCSUsrMsg_UpdateScreenHealthBar::kHealthratioOldFieldNumber;
const int CCSUsrMsg_UpdateScreenHealthBar::kHealthratioNewFieldNumber;
const int CCSUsrMsg_UpdateScreenHealthBar::kStyleFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_UpdateScreenHealthBar::CCSUsrMsg_UpdateScreenHealthBar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_UpdateScreenHealthBar::InitAsDefaultInstance() {
}

CCSUsrMsg_UpdateScreenHealthBar::CCSUsrMsg_UpdateScreenHealthBar(const CCSUsrMsg_UpdateScreenHealthBar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_UpdateScreenHealthBar::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  healthratio_old_ = 0;
  healthratio_new_ = 0;
  style_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_UpdateScreenHealthBar::~CCSUsrMsg_UpdateScreenHealthBar() {
  SharedDtor();
}

void CCSUsrMsg_UpdateScreenHealthBar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_UpdateScreenHealthBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_UpdateScreenHealthBar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_UpdateScreenHealthBar_descriptor_;
}

const CCSUsrMsg_UpdateScreenHealthBar& CCSUsrMsg_UpdateScreenHealthBar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_UpdateScreenHealthBar* CCSUsrMsg_UpdateScreenHealthBar::default_instance_ = NULL;

CCSUsrMsg_UpdateScreenHealthBar* CCSUsrMsg_UpdateScreenHealthBar::New() const {
  return new CCSUsrMsg_UpdateScreenHealthBar;
}

void CCSUsrMsg_UpdateScreenHealthBar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
    healthratio_old_ = 0;
    healthratio_new_ = 0;
    style_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_UpdateScreenHealthBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_healthratio_old;
        break;
      }

      // optional float healthratio_old = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_healthratio_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthratio_old_)));
          set_has_healthratio_old();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_healthratio_new;
        break;
      }

      // optional float healthratio_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_healthratio_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthratio_new_)));
          set_has_healthratio_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }

      // optional int32 style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_UpdateScreenHealthBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  // optional float healthratio_old = 2;
  if (has_healthratio_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->healthratio_old(), output);
  }

  // optional float healthratio_new = 3;
  if (has_healthratio_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->healthratio_new(), output);
  }

  // optional int32 style = 4;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_UpdateScreenHealthBar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  // optional float healthratio_old = 2;
  if (has_healthratio_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->healthratio_old(), target);
  }

  // optional float healthratio_new = 3;
  if (has_healthratio_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->healthratio_new(), target);
  }

  // optional int32 style = 4;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_UpdateScreenHealthBar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

    // optional float healthratio_old = 2;
    if (has_healthratio_old()) {
      total_size += 1 + 4;
    }

    // optional float healthratio_new = 3;
    if (has_healthratio_new()) {
      total_size += 1 + 4;
    }

    // optional int32 style = 4;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_UpdateScreenHealthBar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_UpdateScreenHealthBar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_UpdateScreenHealthBar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_UpdateScreenHealthBar::MergeFrom(const CCSUsrMsg_UpdateScreenHealthBar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
    if (from.has_healthratio_old()) {
      set_healthratio_old(from.healthratio_old());
    }
    if (from.has_healthratio_new()) {
      set_healthratio_new(from.healthratio_new());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_UpdateScreenHealthBar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_UpdateScreenHealthBar::CopyFrom(const CCSUsrMsg_UpdateScreenHealthBar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_UpdateScreenHealthBar::IsInitialized() const {

  return true;
}

void CCSUsrMsg_UpdateScreenHealthBar::Swap(CCSUsrMsg_UpdateScreenHealthBar* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(healthratio_old_, other->healthratio_old_);
    std::swap(healthratio_new_, other->healthratio_new_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_UpdateScreenHealthBar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_UpdateScreenHealthBar_descriptor_;
  metadata.reflection = CCSUsrMsg_UpdateScreenHealthBar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_EntityOutlineHighlight::kEntidxFieldNumber;
const int CCSUsrMsg_EntityOutlineHighlight::kRemovehighlightFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_EntityOutlineHighlight::CCSUsrMsg_EntityOutlineHighlight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_EntityOutlineHighlight::InitAsDefaultInstance() {
}

CCSUsrMsg_EntityOutlineHighlight::CCSUsrMsg_EntityOutlineHighlight(const CCSUsrMsg_EntityOutlineHighlight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_EntityOutlineHighlight::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  removehighlight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_EntityOutlineHighlight::~CCSUsrMsg_EntityOutlineHighlight() {
  SharedDtor();
}

void CCSUsrMsg_EntityOutlineHighlight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_EntityOutlineHighlight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_EntityOutlineHighlight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_EntityOutlineHighlight_descriptor_;
}

const CCSUsrMsg_EntityOutlineHighlight& CCSUsrMsg_EntityOutlineHighlight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_EntityOutlineHighlight* CCSUsrMsg_EntityOutlineHighlight::default_instance_ = NULL;

CCSUsrMsg_EntityOutlineHighlight* CCSUsrMsg_EntityOutlineHighlight::New() const {
  return new CCSUsrMsg_EntityOutlineHighlight;
}

void CCSUsrMsg_EntityOutlineHighlight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
    removehighlight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_EntityOutlineHighlight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_removehighlight;
        break;
      }

      // optional bool removehighlight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removehighlight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removehighlight_)));
          set_has_removehighlight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_EntityOutlineHighlight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  // optional bool removehighlight = 2;
  if (has_removehighlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->removehighlight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_EntityOutlineHighlight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  // optional bool removehighlight = 2;
  if (has_removehighlight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->removehighlight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_EntityOutlineHighlight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

    // optional bool removehighlight = 2;
    if (has_removehighlight()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_EntityOutlineHighlight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_EntityOutlineHighlight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_EntityOutlineHighlight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_EntityOutlineHighlight::MergeFrom(const CCSUsrMsg_EntityOutlineHighlight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
    if (from.has_removehighlight()) {
      set_removehighlight(from.removehighlight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_EntityOutlineHighlight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_EntityOutlineHighlight::CopyFrom(const CCSUsrMsg_EntityOutlineHighlight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EntityOutlineHighlight::IsInitialized() const {

  return true;
}

void CCSUsrMsg_EntityOutlineHighlight::Swap(CCSUsrMsg_EntityOutlineHighlight* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(removehighlight_, other->removehighlight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_EntityOutlineHighlight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_EntityOutlineHighlight_descriptor_;
  metadata.reflection = CCSUsrMsg_EntityOutlineHighlight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SSUI::kShowFieldNumber;
const int CCSUsrMsg_SSUI::kStartTimeFieldNumber;
const int CCSUsrMsg_SSUI::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SSUI::CCSUsrMsg_SSUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SSUI::InitAsDefaultInstance() {
}

CCSUsrMsg_SSUI::CCSUsrMsg_SSUI(const CCSUsrMsg_SSUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SSUI::SharedCtor() {
  _cached_size_ = 0;
  show_ = false;
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SSUI::~CCSUsrMsg_SSUI() {
  SharedDtor();
}

void CCSUsrMsg_SSUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SSUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SSUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SSUI_descriptor_;
}

const CCSUsrMsg_SSUI& CCSUsrMsg_SSUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SSUI* CCSUsrMsg_SSUI::default_instance_ = NULL;

CCSUsrMsg_SSUI* CCSUsrMsg_SSUI::New() const {
  return new CCSUsrMsg_SSUI;
}

void CCSUsrMsg_SSUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_ = false;
    start_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SSUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_start_time;
        break;
      }

      // optional float start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_end_time;
        break;
      }

      // optional float end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SSUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool show = 1;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show(), output);
  }

  // optional float start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_time(), output);
  }

  // optional float end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SSUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool show = 1;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show(), target);
  }

  // optional float start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_time(), target);
  }

  // optional float end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SSUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool show = 1;
    if (has_show()) {
      total_size += 1 + 1;
    }

    // optional float start_time = 2;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional float end_time = 3;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SSUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SSUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SSUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SSUI::MergeFrom(const CCSUsrMsg_SSUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SSUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SSUI::CopyFrom(const CCSUsrMsg_SSUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SSUI::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SSUI::Swap(CCSUsrMsg_SSUI* other) {
  if (other != this) {
    std::swap(show_, other->show_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SSUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SSUI_descriptor_;
  metadata.reflection = CCSUsrMsg_SSUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SurvivalStats_Fact::kTypeFieldNumber;
const int CCSUsrMsg_SurvivalStats_Fact::kDisplayFieldNumber;
const int CCSUsrMsg_SurvivalStats_Fact::kValueFieldNumber;
const int CCSUsrMsg_SurvivalStats_Fact::kInterestingnessFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SurvivalStats_Fact::CCSUsrMsg_SurvivalStats_Fact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SurvivalStats_Fact::InitAsDefaultInstance() {
}

CCSUsrMsg_SurvivalStats_Fact::CCSUsrMsg_SurvivalStats_Fact(const CCSUsrMsg_SurvivalStats_Fact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Fact::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  display_ = 0;
  value_ = 0;
  interestingness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SurvivalStats_Fact::~CCSUsrMsg_SurvivalStats_Fact() {
  SharedDtor();
}

void CCSUsrMsg_SurvivalStats_Fact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SurvivalStats_Fact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Fact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SurvivalStats_Fact_descriptor_;
}

const CCSUsrMsg_SurvivalStats_Fact& CCSUsrMsg_SurvivalStats_Fact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SurvivalStats_Fact* CCSUsrMsg_SurvivalStats_Fact::default_instance_ = NULL;

CCSUsrMsg_SurvivalStats_Fact* CCSUsrMsg_SurvivalStats_Fact::New() const {
  return new CCSUsrMsg_SurvivalStats_Fact;
}

void CCSUsrMsg_SurvivalStats_Fact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    display_ = 0;
    value_ = 0;
    interestingness_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SurvivalStats_Fact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display;
        break;
      }

      // optional int32 display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_interestingness;
        break;
      }

      // optional float interestingness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_interestingness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interestingness_)));
          set_has_interestingness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SurvivalStats_Fact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // optional float interestingness = 4;
  if (has_interestingness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->interestingness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SurvivalStats_Fact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // optional float interestingness = 4;
  if (has_interestingness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->interestingness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SurvivalStats_Fact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional float interestingness = 4;
    if (has_interestingness()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SurvivalStats_Fact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SurvivalStats_Fact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SurvivalStats_Fact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SurvivalStats_Fact::MergeFrom(const CCSUsrMsg_SurvivalStats_Fact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_interestingness()) {
      set_interestingness(from.interestingness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SurvivalStats_Fact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Fact::CopyFrom(const CCSUsrMsg_SurvivalStats_Fact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Fact::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SurvivalStats_Fact::Swap(CCSUsrMsg_SurvivalStats_Fact* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(display_, other->display_);
    std::swap(value_, other->value_);
    std::swap(interestingness_, other->interestingness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SurvivalStats_Fact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SurvivalStats_Fact_descriptor_;
  metadata.reflection = CCSUsrMsg_SurvivalStats_Fact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_SurvivalStats_Placement::kXuidFieldNumber;
const int CCSUsrMsg_SurvivalStats_Placement::kTeamnumberFieldNumber;
const int CCSUsrMsg_SurvivalStats_Placement::kPlacementFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SurvivalStats_Placement::CCSUsrMsg_SurvivalStats_Placement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SurvivalStats_Placement::InitAsDefaultInstance() {
}

CCSUsrMsg_SurvivalStats_Placement::CCSUsrMsg_SurvivalStats_Placement(const CCSUsrMsg_SurvivalStats_Placement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Placement::SharedCtor() {
  _cached_size_ = 0;
  xuid_ = GOOGLE_ULONGLONG(0);
  teamnumber_ = 0;
  placement_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SurvivalStats_Placement::~CCSUsrMsg_SurvivalStats_Placement() {
  SharedDtor();
}

void CCSUsrMsg_SurvivalStats_Placement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SurvivalStats_Placement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Placement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SurvivalStats_Placement_descriptor_;
}

const CCSUsrMsg_SurvivalStats_Placement& CCSUsrMsg_SurvivalStats_Placement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SurvivalStats_Placement* CCSUsrMsg_SurvivalStats_Placement::default_instance_ = NULL;

CCSUsrMsg_SurvivalStats_Placement* CCSUsrMsg_SurvivalStats_Placement::New() const {
  return new CCSUsrMsg_SurvivalStats_Placement;
}

void CCSUsrMsg_SurvivalStats_Placement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xuid_ = GOOGLE_ULONGLONG(0);
    teamnumber_ = 0;
    placement_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SurvivalStats_Placement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 xuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamnumber;
        break;
      }

      // optional int32 teamnumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamnumber_)));
          set_has_teamnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_placement;
        break;
      }

      // optional int32 placement = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &placement_)));
          set_has_placement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SurvivalStats_Placement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->xuid(), output);
  }

  // optional int32 teamnumber = 2;
  if (has_teamnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamnumber(), output);
  }

  // optional int32 placement = 3;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->placement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SurvivalStats_Placement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->xuid(), target);
  }

  // optional int32 teamnumber = 2;
  if (has_teamnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamnumber(), target);
  }

  // optional int32 placement = 3;
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->placement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SurvivalStats_Placement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 xuid = 1;
    if (has_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xuid());
    }

    // optional int32 teamnumber = 2;
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamnumber());
    }

    // optional int32 placement = 3;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->placement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SurvivalStats_Placement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SurvivalStats_Placement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SurvivalStats_Placement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SurvivalStats_Placement::MergeFrom(const CCSUsrMsg_SurvivalStats_Placement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_teamnumber()) {
      set_teamnumber(from.teamnumber());
    }
    if (from.has_placement()) {
      set_placement(from.placement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SurvivalStats_Placement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Placement::CopyFrom(const CCSUsrMsg_SurvivalStats_Placement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Placement::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SurvivalStats_Placement::Swap(CCSUsrMsg_SurvivalStats_Placement* other) {
  if (other != this) {
    std::swap(xuid_, other->xuid_);
    std::swap(teamnumber_, other->teamnumber_);
    std::swap(placement_, other->placement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SurvivalStats_Placement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SurvivalStats_Placement_descriptor_;
  metadata.reflection = CCSUsrMsg_SurvivalStats_Placement_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_SurvivalStats_Damage::kXuidFieldNumber;
const int CCSUsrMsg_SurvivalStats_Damage::kToFieldNumber;
const int CCSUsrMsg_SurvivalStats_Damage::kToHitsFieldNumber;
const int CCSUsrMsg_SurvivalStats_Damage::kFromFieldNumber;
const int CCSUsrMsg_SurvivalStats_Damage::kFromHitsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SurvivalStats_Damage::CCSUsrMsg_SurvivalStats_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SurvivalStats_Damage::InitAsDefaultInstance() {
}

CCSUsrMsg_SurvivalStats_Damage::CCSUsrMsg_SurvivalStats_Damage(const CCSUsrMsg_SurvivalStats_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Damage::SharedCtor() {
  _cached_size_ = 0;
  xuid_ = GOOGLE_ULONGLONG(0);
  to_ = 0;
  to_hits_ = 0;
  from_ = 0;
  from_hits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SurvivalStats_Damage::~CCSUsrMsg_SurvivalStats_Damage() {
  SharedDtor();
}

void CCSUsrMsg_SurvivalStats_Damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SurvivalStats_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SurvivalStats_Damage_descriptor_;
}

const CCSUsrMsg_SurvivalStats_Damage& CCSUsrMsg_SurvivalStats_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SurvivalStats_Damage* CCSUsrMsg_SurvivalStats_Damage::default_instance_ = NULL;

CCSUsrMsg_SurvivalStats_Damage* CCSUsrMsg_SurvivalStats_Damage::New() const {
  return new CCSUsrMsg_SurvivalStats_Damage;
}

void CCSUsrMsg_SurvivalStats_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xuid_ = GOOGLE_ULONGLONG(0);
    to_ = 0;
    to_hits_ = 0;
    from_ = 0;
    from_hits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SurvivalStats_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 xuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional int32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_hits;
        break;
      }

      // optional int32 to_hits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_hits_)));
          set_has_to_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }

      // optional int32 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_hits;
        break;
      }

      // optional int32 from_hits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_hits_)));
          set_has_from_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SurvivalStats_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->xuid(), output);
  }

  // optional int32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to(), output);
  }

  // optional int32 to_hits = 3;
  if (has_to_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_hits(), output);
  }

  // optional int32 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->from(), output);
  }

  // optional int32 from_hits = 5;
  if (has_from_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->from_hits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SurvivalStats_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->xuid(), target);
  }

  // optional int32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to(), target);
  }

  // optional int32 to_hits = 3;
  if (has_to_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_hits(), target);
  }

  // optional int32 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->from(), target);
  }

  // optional int32 from_hits = 5;
  if (has_from_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->from_hits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SurvivalStats_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 xuid = 1;
    if (has_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xuid());
    }

    // optional int32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

    // optional int32 to_hits = 3;
    if (has_to_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_hits());
    }

    // optional int32 from = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 from_hits = 5;
    if (has_from_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_hits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SurvivalStats_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SurvivalStats_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SurvivalStats_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SurvivalStats_Damage::MergeFrom(const CCSUsrMsg_SurvivalStats_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_to_hits()) {
      set_to_hits(from.to_hits());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_from_hits()) {
      set_from_hits(from.from_hits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SurvivalStats_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats_Damage::CopyFrom(const CCSUsrMsg_SurvivalStats_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Damage::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SurvivalStats_Damage::Swap(CCSUsrMsg_SurvivalStats_Damage* other) {
  if (other != this) {
    std::swap(xuid_, other->xuid_);
    std::swap(to_, other->to_);
    std::swap(to_hits_, other->to_hits_);
    std::swap(from_, other->from_);
    std::swap(from_hits_, other->from_hits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SurvivalStats_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SurvivalStats_Damage_descriptor_;
  metadata.reflection = CCSUsrMsg_SurvivalStats_Damage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_SurvivalStats::kXuidFieldNumber;
const int CCSUsrMsg_SurvivalStats::kFactsFieldNumber;
const int CCSUsrMsg_SurvivalStats::kUsersFieldNumber;
const int CCSUsrMsg_SurvivalStats::kDamagesFieldNumber;
const int CCSUsrMsg_SurvivalStats::kTicknumberFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SurvivalStats::CCSUsrMsg_SurvivalStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SurvivalStats::InitAsDefaultInstance() {
}

CCSUsrMsg_SurvivalStats::CCSUsrMsg_SurvivalStats(const CCSUsrMsg_SurvivalStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats::SharedCtor() {
  _cached_size_ = 0;
  xuid_ = GOOGLE_ULONGLONG(0);
  ticknumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SurvivalStats::~CCSUsrMsg_SurvivalStats() {
  SharedDtor();
}

void CCSUsrMsg_SurvivalStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SurvivalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SurvivalStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SurvivalStats_descriptor_;
}

const CCSUsrMsg_SurvivalStats& CCSUsrMsg_SurvivalStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_SurvivalStats* CCSUsrMsg_SurvivalStats::default_instance_ = NULL;

CCSUsrMsg_SurvivalStats* CCSUsrMsg_SurvivalStats::New() const {
  return new CCSUsrMsg_SurvivalStats;
}

void CCSUsrMsg_SurvivalStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xuid_ = GOOGLE_ULONGLONG(0);
    ticknumber_ = 0;
  }
  facts_.Clear();
  users_.Clear();
  damages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SurvivalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 xuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_facts;
        break;
      }

      // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_facts;
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }

      // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectTag(32)) goto parse_ticknumber;
        break;
      }

      // optional int32 ticknumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticknumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticknumber_)));
          set_has_ticknumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_damages;
        break;
      }

      // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_damages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SurvivalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->xuid(), output);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
  for (int i = 0; i < this->facts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->facts(i), output);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  // optional int32 ticknumber = 4;
  if (has_ticknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ticknumber(), output);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->damages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SurvivalStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 xuid = 1;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->xuid(), target);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
  for (int i = 0; i < this->facts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->facts(i), target);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->users(i), target);
  }

  // optional int32 ticknumber = 4;
  if (has_ticknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ticknumber(), target);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->damages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SurvivalStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 xuid = 1;
    if (has_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xuid());
    }

    // optional int32 ticknumber = 4;
    if (has_ticknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticknumber());
    }

  }
  // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
  total_size += 1 * this->facts_size();
  for (int i = 0; i < this->facts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facts(i));
  }

  // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SurvivalStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SurvivalStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SurvivalStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SurvivalStats::MergeFrom(const CCSUsrMsg_SurvivalStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  facts_.MergeFrom(from.facts_);
  users_.MergeFrom(from.users_);
  damages_.MergeFrom(from.damages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_ticknumber()) {
      set_ticknumber(from.ticknumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SurvivalStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SurvivalStats::CopyFrom(const CCSUsrMsg_SurvivalStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats::IsInitialized() const {

  return true;
}

void CCSUsrMsg_SurvivalStats::Swap(CCSUsrMsg_SurvivalStats* other) {
  if (other != this) {
    std::swap(xuid_, other->xuid_);
    facts_.Swap(&other->facts_);
    users_.Swap(&other->users_);
    damages_.Swap(&other->damages_);
    std::swap(ticknumber_, other->ticknumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SurvivalStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SurvivalStats_descriptor_;
  metadata.reflection = CCSUsrMsg_SurvivalStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::kEaccoladeFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::kValueFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::kPositionFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::InitAsDefaultInstance() {
}

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade(const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SharedCtor() {
  _cached_size_ = 0;
  eaccolade_ = 0;
  value_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::~CCSUsrMsg_EndOfMatchAllPlayersData_Accolade() {
  SharedDtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_;
}

const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance_ = NULL;

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::New() const {
  return new CCSUsrMsg_EndOfMatchAllPlayersData_Accolade;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eaccolade_ = 0;
    value_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eaccolade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eaccolade_)));
          set_has_eaccolade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional int32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eaccolade = 1;
  if (has_eaccolade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eaccolade(), output);
  }

  // optional float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eaccolade = 1;
  if (has_eaccolade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eaccolade(), target);
  }

  // optional float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eaccolade = 1;
    if (has_eaccolade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eaccolade());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional int32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eaccolade()) {
      set_eaccolade(from.eaccolade());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::IsInitialized() const {

  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::Swap(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* other) {
  if (other != this) {
    std::swap(eaccolade_, other->eaccolade_);
    std::swap(value_, other->value_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_descriptor_;
  metadata.reflection = CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kEntindexFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kXuidFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kNameFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kTeamnumberFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kNominationFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kItemsFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kPlayercolorFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::kIsbotFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::InitAsDefaultInstance() {
  nomination_ = const_cast< ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade*>(&::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::default_instance());
}

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  xuid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamnumber_ = 0;
  nomination_ = NULL;
  playercolor_ = 0;
  isbot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::~CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData() {
  SharedDtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete nomination_;
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_;
}

const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::default_instance_ = NULL;

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::New() const {
  return new CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entindex_ = 0;
    xuid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    teamnumber_ = 0;
    if (has_nomination()) {
      if (nomination_ != NULL) nomination_->::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::Clear();
    }
    playercolor_ = 0;
    isbot_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xuid;
        break;
      }

      // optional uint64 xuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamnumber;
        break;
      }

      // optional int32 teamnumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamnumber_)));
          set_has_teamnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nomination;
        break;
      }

      // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nomination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nomination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .CEconItemPreviewDataBlock items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_playercolor;
        break;
      }

      // optional int32 playercolor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playercolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercolor_)));
          set_has_playercolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isbot;
        break;
      }

      // optional bool isbot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbot_)));
          set_has_isbot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional uint64 xuid = 2;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->xuid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 teamnumber = 4;
  if (has_teamnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamnumber(), output);
  }

  // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
  if (has_nomination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nomination(), output);
  }

  // repeated .CEconItemPreviewDataBlock items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  // optional int32 playercolor = 7;
  if (has_playercolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playercolor(), output);
  }

  // optional bool isbot = 8;
  if (has_isbot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isbot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional uint64 xuid = 2;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->xuid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 teamnumber = 4;
  if (has_teamnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamnumber(), target);
  }

  // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
  if (has_nomination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nomination(), target);
  }

  // repeated .CEconItemPreviewDataBlock items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  // optional int32 playercolor = 7;
  if (has_playercolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playercolor(), target);
  }

  // optional bool isbot = 8;
  if (has_isbot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isbot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional uint64 xuid = 2;
    if (has_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xuid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 teamnumber = 4;
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamnumber());
    }

    // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
    if (has_nomination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nomination());
    }

    // optional int32 playercolor = 7;
    if (has_playercolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercolor());
    }

    // optional bool isbot = 8;
    if (has_isbot()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CEconItemPreviewDataBlock items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::MergeFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_teamnumber()) {
      set_teamnumber(from.teamnumber());
    }
    if (from.has_nomination()) {
      mutable_nomination()->::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeFrom(from.nomination());
    }
    if (from.has_playercolor()) {
      set_playercolor(from.playercolor());
    }
    if (from.has_isbot()) {
      set_isbot(from.isbot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::IsInitialized() const {

  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::Swap(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(xuid_, other->xuid_);
    std::swap(name_, other->name_);
    std::swap(teamnumber_, other->teamnumber_);
    std::swap(nomination_, other->nomination_);
    items_.Swap(&other->items_);
    std::swap(playercolor_, other->playercolor_);
    std::swap(isbot_, other->isbot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_descriptor_;
  metadata.reflection = CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_EndOfMatchAllPlayersData::kAllplayerdataFieldNumber;
const int CCSUsrMsg_EndOfMatchAllPlayersData::kSceneFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_EndOfMatchAllPlayersData::CCSUsrMsg_EndOfMatchAllPlayersData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData::InitAsDefaultInstance() {
}

CCSUsrMsg_EndOfMatchAllPlayersData::CCSUsrMsg_EndOfMatchAllPlayersData(const CCSUsrMsg_EndOfMatchAllPlayersData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData::SharedCtor() {
  _cached_size_ = 0;
  scene_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_EndOfMatchAllPlayersData::~CCSUsrMsg_EndOfMatchAllPlayersData() {
  SharedDtor();
}

void CCSUsrMsg_EndOfMatchAllPlayersData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_EndOfMatchAllPlayersData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_;
}

const CCSUsrMsg_EndOfMatchAllPlayersData& CCSUsrMsg_EndOfMatchAllPlayersData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_EndOfMatchAllPlayersData* CCSUsrMsg_EndOfMatchAllPlayersData::default_instance_ = NULL;

CCSUsrMsg_EndOfMatchAllPlayersData* CCSUsrMsg_EndOfMatchAllPlayersData::New() const {
  return new CCSUsrMsg_EndOfMatchAllPlayersData;
}

void CCSUsrMsg_EndOfMatchAllPlayersData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    scene_ = 0;
  }
  allplayerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_EndOfMatchAllPlayersData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allplayerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allplayerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allplayerdata;
        if (input->ExpectTag(16)) goto parse_scene;
        break;
      }

      // optional int32 scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
          set_has_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_EndOfMatchAllPlayersData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
  for (int i = 0; i < this->allplayerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allplayerdata(i), output);
  }

  // optional int32 scene = 2;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_EndOfMatchAllPlayersData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
  for (int i = 0; i < this->allplayerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allplayerdata(i), target);
  }

  // optional int32 scene = 2;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_EndOfMatchAllPlayersData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 scene = 2;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene());
    }

  }
  // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
  total_size += 1 * this->allplayerdata_size();
  for (int i = 0; i < this->allplayerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allplayerdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_EndOfMatchAllPlayersData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_EndOfMatchAllPlayersData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_EndOfMatchAllPlayersData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_EndOfMatchAllPlayersData::MergeFrom(const CCSUsrMsg_EndOfMatchAllPlayersData& from) {
  GOOGLE_CHECK_NE(&from, this);
  allplayerdata_.MergeFrom(from.allplayerdata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scene()) {
      set_scene(from.scene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_EndOfMatchAllPlayersData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_EndOfMatchAllPlayersData::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData::IsInitialized() const {

  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData::Swap(CCSUsrMsg_EndOfMatchAllPlayersData* other) {
  if (other != this) {
    allplayerdata_.Swap(&other->allplayerdata_);
    std::swap(scene_, other->scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_EndOfMatchAllPlayersData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_EndOfMatchAllPlayersData_descriptor_;
  metadata.reflection = CCSUsrMsg_EndOfMatchAllPlayersData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kTeamNumberFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kEntindexFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kXuidFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kColorFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kIsBotFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::kIsDeadFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::InitAsDefaultInstance() {
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::SharedCtor() {
  _cached_size_ = 0;
  team_number_ = 0;
  entindex_ = 0;
  xuid_ = GOOGLE_ULONGLONG(0);
  color_ = 0;
  is_bot_ = false;
  is_dead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::~CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim& CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim* CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim* CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::New() const {
  return new CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_number_ = 0;
    entindex_ = 0;
    xuid_ = GOOGLE_ULONGLONG(0);
    color_ = 0;
    is_bot_ = false;
    is_dead_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xuid;
        break;
      }

      // optional uint64 xuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // optional int32 color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_bot;
        break;
      }

      // optional bool is_bot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bot_)));
          set_has_is_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_number = 1;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_number(), output);
  }

  // optional int32 entindex = 2;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entindex(), output);
  }

  // optional uint64 xuid = 3;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->xuid(), output);
  }

  // optional int32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }

  // optional bool is_bot = 5;
  if (has_is_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_bot(), output);
  }

  // optional bool is_dead = 6;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_dead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_number = 1;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_number(), target);
  }

  // optional int32 entindex = 2;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entindex(), target);
  }

  // optional uint64 xuid = 3;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->xuid(), target);
  }

  // optional int32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->color(), target);
  }

  // optional bool is_bot = 5;
  if (has_is_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_bot(), target);
  }

  // optional bool is_dead = 6;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_dead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_number());
    }

    // optional int32 entindex = 2;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional uint64 xuid = 3;
    if (has_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xuid());
    }

    // optional int32 color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional bool is_bot = 5;
    if (has_is_bot()) {
      total_size += 1 + 1;
    }

    // optional bool is_dead = 6;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::MergeFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_is_bot()) {
      set_is_bot(from.is_bot());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::CopyFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::Swap(CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim* other) {
  if (other != this) {
    std::swap(team_number_, other->team_number_);
    std::swap(entindex_, other->entindex_);
    std::swap(xuid_, other->xuid_);
    std::swap(color_, other->color_);
    std::swap(is_bot_, other->is_bot_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::kTypeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::InitAsDefaultInstance() {
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::~CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective& CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective* CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective* CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::New() const {
  return new CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::MergeFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::CopyFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::Swap(CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kTargetEntindexFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kTargetXuidFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kHealthRemovedFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kNumHitsFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kReturnHealthRemovedFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::kNumReturnHitsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::InitAsDefaultInstance() {
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0;
  target_xuid_ = GOOGLE_ULONGLONG(0);
  health_removed_ = 0;
  num_hits_ = 0;
  return_health_removed_ = 0;
  num_return_hits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::~CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage& CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage* CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage* CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::New() const {
  return new CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_entindex_ = 0;
    target_xuid_ = GOOGLE_ULONGLONG(0);
    health_removed_ = 0;
    num_hits_ = 0;
    return_health_removed_ = 0;
    num_return_hits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_entindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_xuid;
        break;
      }

      // optional uint64 target_xuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_xuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_xuid_)));
          set_has_target_xuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_health_removed;
        break;
      }

      // optional int32 health_removed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_removed_)));
          set_has_health_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_hits;
        break;
      }

      // optional int32 num_hits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_)));
          set_has_num_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_return_health_removed;
        break;
      }

      // optional int32 return_health_removed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_health_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_health_removed_)));
          set_has_return_health_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_return_hits;
        break;
      }

      // optional int32 num_return_hits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_return_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_return_hits_)));
          set_has_num_return_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target_entindex(), output);
  }

  // optional uint64 target_xuid = 2;
  if (has_target_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_xuid(), output);
  }

  // optional int32 health_removed = 3;
  if (has_health_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health_removed(), output);
  }

  // optional int32 num_hits = 4;
  if (has_num_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_hits(), output);
  }

  // optional int32 return_health_removed = 5;
  if (has_return_health_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->return_health_removed(), output);
  }

  // optional int32 num_return_hits = 6;
  if (has_num_return_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_return_hits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint64 target_xuid = 2;
  if (has_target_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_xuid(), target);
  }

  // optional int32 health_removed = 3;
  if (has_health_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health_removed(), target);
  }

  // optional int32 num_hits = 4;
  if (has_num_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_hits(), target);
  }

  // optional int32 return_health_removed = 5;
  if (has_return_health_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->return_health_removed(), target);
  }

  // optional int32 num_return_hits = 6;
  if (has_num_return_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_return_hits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_entindex());
    }

    // optional uint64 target_xuid = 2;
    if (has_target_xuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_xuid());
    }

    // optional int32 health_removed = 3;
    if (has_health_removed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health_removed());
    }

    // optional int32 num_hits = 4;
    if (has_num_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits());
    }

    // optional int32 return_health_removed = 5;
    if (has_return_health_removed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_health_removed());
    }

    // optional int32 num_return_hits = 6;
    if (has_num_return_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_return_hits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::MergeFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
    if (from.has_target_xuid()) {
      set_target_xuid(from.target_xuid());
    }
    if (from.has_health_removed()) {
      set_health_removed(from.health_removed());
    }
    if (from.has_num_hits()) {
      set_num_hits(from.num_hits());
    }
    if (from.has_return_health_removed()) {
      set_return_health_removed(from.return_health_removed());
    }
    if (from.has_num_return_hits()) {
      set_num_return_hits(from.num_return_hits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::CopyFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::Swap(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage* other) {
  if (other != this) {
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(target_xuid_, other->target_xuid_);
    std::swap(health_removed_, other->health_removed_);
    std::swap(num_hits_, other->num_hits_);
    std::swap(return_health_removed_, other->return_health_removed_);
    std::swap(num_return_hits_, other->num_return_hits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kTimestampFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kTerroristOddsFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kCtAliveFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kTAliveFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kVictimDataFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kObjectiveDataFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_RisEvent::kAllDamageDataFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData_RisEvent::CCSUsrMsg_RoundImpactScoreData_RisEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::InitAsDefaultInstance() {
  victim_data_ = const_cast< ::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim*>(&::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::default_instance());
  objective_data_ = const_cast< ::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective*>(&::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::default_instance());
}

CCSUsrMsg_RoundImpactScoreData_RisEvent::CCSUsrMsg_RoundImpactScoreData_RisEvent(const CCSUsrMsg_RoundImpactScoreData_RisEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  terrorist_odds_ = 0;
  ct_alive_ = 0;
  t_alive_ = 0;
  victim_data_ = NULL;
  objective_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData_RisEvent::~CCSUsrMsg_RoundImpactScoreData_RisEvent() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::SharedDtor() {
  if (this != default_instance_) {
    delete victim_data_;
    delete objective_data_;
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_RisEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData_RisEvent& CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData_RisEvent* CCSUsrMsg_RoundImpactScoreData_RisEvent::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData_RisEvent* CCSUsrMsg_RoundImpactScoreData_RisEvent::New() const {
  return new CCSUsrMsg_RoundImpactScoreData_RisEvent;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    terrorist_odds_ = 0;
    ct_alive_ = 0;
    t_alive_ = 0;
    if (has_victim_data()) {
      if (victim_data_ != NULL) victim_data_->::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::Clear();
    }
    if (has_objective_data()) {
      if (objective_data_ != NULL) objective_data_->::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::Clear();
    }
  }
  all_damage_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_terrorist_odds;
        break;
      }

      // optional int32 terrorist_odds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrorist_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terrorist_odds_)));
          set_has_terrorist_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ct_alive;
        break;
      }

      // optional int32 ct_alive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_alive_)));
          set_has_ct_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_t_alive;
        break;
      }

      // optional int32 t_alive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_alive_)));
          set_has_t_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_victim_data;
        break;
      }

      // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_victim_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_victim_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_objective_data;
        break;
      }

      // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objective_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_all_damage_data;
        break;
      }

      // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_damage_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_damage_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_all_damage_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timestamp(), output);
  }

  // optional int32 terrorist_odds = 2;
  if (has_terrorist_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->terrorist_odds(), output);
  }

  // optional int32 ct_alive = 3;
  if (has_ct_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ct_alive(), output);
  }

  // optional int32 t_alive = 4;
  if (has_t_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->t_alive(), output);
  }

  // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5;
  if (has_victim_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->victim_data(), output);
  }

  // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6;
  if (has_objective_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->objective_data(), output);
  }

  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7;
  for (int i = 0; i < this->all_damage_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->all_damage_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData_RisEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timestamp(), target);
  }

  // optional int32 terrorist_odds = 2;
  if (has_terrorist_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->terrorist_odds(), target);
  }

  // optional int32 ct_alive = 3;
  if (has_ct_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ct_alive(), target);
  }

  // optional int32 t_alive = 4;
  if (has_t_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->t_alive(), target);
  }

  // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5;
  if (has_victim_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->victim_data(), target);
  }

  // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6;
  if (has_objective_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->objective_data(), target);
  }

  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7;
  for (int i = 0; i < this->all_damage_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->all_damage_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData_RisEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional int32 terrorist_odds = 2;
    if (has_terrorist_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terrorist_odds());
    }

    // optional int32 ct_alive = 3;
    if (has_ct_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_alive());
    }

    // optional int32 t_alive = 4;
    if (has_t_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_alive());
    }

    // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5;
    if (has_victim_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->victim_data());
    }

    // optional .CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6;
    if (has_objective_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective_data());
    }

  }
  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7;
  total_size += 1 * this->all_damage_data_size();
  for (int i = 0; i < this->all_damage_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_damage_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData_RisEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData_RisEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::MergeFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_damage_data_.MergeFrom(from.all_damage_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_terrorist_odds()) {
      set_terrorist_odds(from.terrorist_odds());
    }
    if (from.has_ct_alive()) {
      set_ct_alive(from.ct_alive());
    }
    if (from.has_t_alive()) {
      set_t_alive(from.t_alive());
    }
    if (from.has_victim_data()) {
      mutable_victim_data()->::CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim::MergeFrom(from.victim_data());
    }
    if (from.has_objective_data()) {
      mutable_objective_data()->::CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective::MergeFrom(from.objective_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::CopyFrom(const CCSUsrMsg_RoundImpactScoreData_RisEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData_RisEvent::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData_RisEvent::Swap(CCSUsrMsg_RoundImpactScoreData_RisEvent* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(terrorist_odds_, other->terrorist_odds_);
    std::swap(ct_alive_, other->ct_alive_);
    std::swap(t_alive_, other->t_alive_);
    std::swap(victim_data_, other->victim_data_);
    std::swap(objective_data_, other->objective_data_);
    all_damage_data_.Swap(&other->all_damage_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData_RisEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_RisEvent_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_RisEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData_InitialConditions::kCtEquipValueFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_InitialConditions::kTEquipValueFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData_InitialConditions::kTerroristOddsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData_InitialConditions::CCSUsrMsg_RoundImpactScoreData_InitialConditions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::InitAsDefaultInstance() {
}

CCSUsrMsg_RoundImpactScoreData_InitialConditions::CCSUsrMsg_RoundImpactScoreData_InitialConditions(const CCSUsrMsg_RoundImpactScoreData_InitialConditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::SharedCtor() {
  _cached_size_ = 0;
  ct_equip_value_ = 0;
  t_equip_value_ = 0;
  terrorist_odds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData_InitialConditions::~CCSUsrMsg_RoundImpactScoreData_InitialConditions() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData_InitialConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData_InitialConditions& CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData_InitialConditions* CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData_InitialConditions* CCSUsrMsg_RoundImpactScoreData_InitialConditions::New() const {
  return new CCSUsrMsg_RoundImpactScoreData_InitialConditions;
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ct_equip_value_ = 0;
    t_equip_value_ = 0;
    terrorist_odds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData_InitialConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ct_equip_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_equip_value_)));
          set_has_ct_equip_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t_equip_value;
        break;
      }

      // optional int32 t_equip_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_equip_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_equip_value_)));
          set_has_t_equip_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terrorist_odds;
        break;
      }

      // optional int32 terrorist_odds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrorist_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terrorist_odds_)));
          set_has_terrorist_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ct_equip_value = 1;
  if (has_ct_equip_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ct_equip_value(), output);
  }

  // optional int32 t_equip_value = 2;
  if (has_t_equip_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->t_equip_value(), output);
  }

  // optional int32 terrorist_odds = 3;
  if (has_terrorist_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->terrorist_odds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData_InitialConditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ct_equip_value = 1;
  if (has_ct_equip_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ct_equip_value(), target);
  }

  // optional int32 t_equip_value = 2;
  if (has_t_equip_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->t_equip_value(), target);
  }

  // optional int32 terrorist_odds = 3;
  if (has_terrorist_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->terrorist_odds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData_InitialConditions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ct_equip_value = 1;
    if (has_ct_equip_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_equip_value());
    }

    // optional int32 t_equip_value = 2;
    if (has_t_equip_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_equip_value());
    }

    // optional int32 terrorist_odds = 3;
    if (has_terrorist_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terrorist_odds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData_InitialConditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData_InitialConditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::MergeFrom(const CCSUsrMsg_RoundImpactScoreData_InitialConditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ct_equip_value()) {
      set_ct_equip_value(from.ct_equip_value());
    }
    if (from.has_t_equip_value()) {
      set_t_equip_value(from.t_equip_value());
    }
    if (from.has_terrorist_odds()) {
      set_terrorist_odds(from.terrorist_odds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::CopyFrom(const CCSUsrMsg_RoundImpactScoreData_InitialConditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData_InitialConditions::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData_InitialConditions::Swap(CCSUsrMsg_RoundImpactScoreData_InitialConditions* other) {
  if (other != this) {
    std::swap(ct_equip_value_, other->ct_equip_value_);
    std::swap(t_equip_value_, other->t_equip_value_);
    std::swap(terrorist_odds_, other->terrorist_odds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData_InitialConditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_InitialConditions_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_InitialConditions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_RoundImpactScoreData::kInitConditionsFieldNumber;
const int CCSUsrMsg_RoundImpactScoreData::kAllRisEventDataFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RoundImpactScoreData::CCSUsrMsg_RoundImpactScoreData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RoundImpactScoreData::InitAsDefaultInstance() {
  init_conditions_ = const_cast< ::CCSUsrMsg_RoundImpactScoreData_InitialConditions*>(&::CCSUsrMsg_RoundImpactScoreData_InitialConditions::default_instance());
}

CCSUsrMsg_RoundImpactScoreData::CCSUsrMsg_RoundImpactScoreData(const CCSUsrMsg_RoundImpactScoreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData::SharedCtor() {
  _cached_size_ = 0;
  init_conditions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RoundImpactScoreData::~CCSUsrMsg_RoundImpactScoreData() {
  SharedDtor();
}

void CCSUsrMsg_RoundImpactScoreData::SharedDtor() {
  if (this != default_instance_) {
    delete init_conditions_;
  }
}

void CCSUsrMsg_RoundImpactScoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RoundImpactScoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RoundImpactScoreData_descriptor_;
}

const CCSUsrMsg_RoundImpactScoreData& CCSUsrMsg_RoundImpactScoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RoundImpactScoreData* CCSUsrMsg_RoundImpactScoreData::default_instance_ = NULL;

CCSUsrMsg_RoundImpactScoreData* CCSUsrMsg_RoundImpactScoreData::New() const {
  return new CCSUsrMsg_RoundImpactScoreData;
}

void CCSUsrMsg_RoundImpactScoreData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_init_conditions()) {
      if (init_conditions_ != NULL) init_conditions_->::CCSUsrMsg_RoundImpactScoreData_InitialConditions::Clear();
    }
  }
  all_ris_event_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RoundImpactScoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_ris_event_data;
        break;
      }

      // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_ris_event_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_ris_event_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_ris_event_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RoundImpactScoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1;
  if (has_init_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->init_conditions(), output);
  }

  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2;
  for (int i = 0; i < this->all_ris_event_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_ris_event_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RoundImpactScoreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1;
  if (has_init_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->init_conditions(), target);
  }

  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2;
  for (int i = 0; i < this->all_ris_event_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_ris_event_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RoundImpactScoreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1;
    if (has_init_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_conditions());
    }

  }
  // repeated .CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2;
  total_size += 1 * this->all_ris_event_data_size();
  for (int i = 0; i < this->all_ris_event_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_ris_event_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RoundImpactScoreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RoundImpactScoreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RoundImpactScoreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RoundImpactScoreData::MergeFrom(const CCSUsrMsg_RoundImpactScoreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_ris_event_data_.MergeFrom(from.all_ris_event_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_conditions()) {
      mutable_init_conditions()->::CCSUsrMsg_RoundImpactScoreData_InitialConditions::MergeFrom(from.init_conditions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RoundImpactScoreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RoundImpactScoreData::CopyFrom(const CCSUsrMsg_RoundImpactScoreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundImpactScoreData::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RoundImpactScoreData::Swap(CCSUsrMsg_RoundImpactScoreData* other) {
  if (other != this) {
    std::swap(init_conditions_, other->init_conditions_);
    all_ris_event_data_.Swap(&other->all_ris_event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RoundImpactScoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RoundImpactScoreData_descriptor_;
  metadata.reflection = CCSUsrMsg_RoundImpactScoreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CurrentRoundOdds::kOddsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CurrentRoundOdds::CCSUsrMsg_CurrentRoundOdds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CurrentRoundOdds::InitAsDefaultInstance() {
}

CCSUsrMsg_CurrentRoundOdds::CCSUsrMsg_CurrentRoundOdds(const CCSUsrMsg_CurrentRoundOdds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentRoundOdds::SharedCtor() {
  _cached_size_ = 0;
  odds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CurrentRoundOdds::~CCSUsrMsg_CurrentRoundOdds() {
  SharedDtor();
}

void CCSUsrMsg_CurrentRoundOdds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CurrentRoundOdds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentRoundOdds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CurrentRoundOdds_descriptor_;
}

const CCSUsrMsg_CurrentRoundOdds& CCSUsrMsg_CurrentRoundOdds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_CurrentRoundOdds* CCSUsrMsg_CurrentRoundOdds::default_instance_ = NULL;

CCSUsrMsg_CurrentRoundOdds* CCSUsrMsg_CurrentRoundOdds::New() const {
  return new CCSUsrMsg_CurrentRoundOdds;
}

void CCSUsrMsg_CurrentRoundOdds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    odds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CurrentRoundOdds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 odds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odds_)));
          set_has_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CurrentRoundOdds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 odds = 1;
  if (has_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->odds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CurrentRoundOdds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 odds = 1;
  if (has_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->odds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CurrentRoundOdds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 odds = 1;
    if (has_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->odds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CurrentRoundOdds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CurrentRoundOdds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CurrentRoundOdds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CurrentRoundOdds::MergeFrom(const CCSUsrMsg_CurrentRoundOdds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_odds()) {
      set_odds(from.odds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CurrentRoundOdds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentRoundOdds::CopyFrom(const CCSUsrMsg_CurrentRoundOdds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentRoundOdds::IsInitialized() const {

  return true;
}

void CCSUsrMsg_CurrentRoundOdds::Swap(CCSUsrMsg_CurrentRoundOdds* other) {
  if (other != this) {
    std::swap(odds_, other->odds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CurrentRoundOdds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CurrentRoundOdds_descriptor_;
  metadata.reflection = CCSUsrMsg_CurrentRoundOdds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeepPlayerStatsEntry::kAccountidFieldNumber;
const int DeepPlayerStatsEntry::kMatchIdFieldNumber;
const int DeepPlayerStatsEntry::kMmGameModeFieldNumber;
const int DeepPlayerStatsEntry::kMapidFieldNumber;
const int DeepPlayerStatsEntry::kBStartingCtFieldNumber;
const int DeepPlayerStatsEntry::kMatchOutcomeFieldNumber;
const int DeepPlayerStatsEntry::kRoundsWonFieldNumber;
const int DeepPlayerStatsEntry::kRoundsLostFieldNumber;
const int DeepPlayerStatsEntry::kStatScoreFieldNumber;
const int DeepPlayerStatsEntry::kStatDeathsFieldNumber;
const int DeepPlayerStatsEntry::kStatMvpsFieldNumber;
const int DeepPlayerStatsEntry::kEnemyKillsFieldNumber;
const int DeepPlayerStatsEntry::kEnemyHeadshotsFieldNumber;
const int DeepPlayerStatsEntry::kEnemy2KsFieldNumber;
const int DeepPlayerStatsEntry::kEnemy3KsFieldNumber;
const int DeepPlayerStatsEntry::kEnemy4KsFieldNumber;
const int DeepPlayerStatsEntry::kTotalDamageFieldNumber;
const int DeepPlayerStatsEntry::kEngagementsEntryCountFieldNumber;
const int DeepPlayerStatsEntry::kEngagementsEntryWinsFieldNumber;
const int DeepPlayerStatsEntry::kEngagements1V1CountFieldNumber;
const int DeepPlayerStatsEntry::kEngagements1V1WinsFieldNumber;
const int DeepPlayerStatsEntry::kEngagements1V2CountFieldNumber;
const int DeepPlayerStatsEntry::kEngagements1V2WinsFieldNumber;
const int DeepPlayerStatsEntry::kUtilityCountFieldNumber;
const int DeepPlayerStatsEntry::kUtilitySuccessFieldNumber;
const int DeepPlayerStatsEntry::kFlashCountFieldNumber;
const int DeepPlayerStatsEntry::kFlashSuccessFieldNumber;
const int DeepPlayerStatsEntry::kMatesFieldNumber;
#endif  // !_MSC_VER

DeepPlayerStatsEntry::DeepPlayerStatsEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeepPlayerStatsEntry::InitAsDefaultInstance() {
}

DeepPlayerStatsEntry::DeepPlayerStatsEntry(const DeepPlayerStatsEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeepPlayerStatsEntry::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  mm_game_mode_ = 0u;
  mapid_ = 0u;
  b_starting_ct_ = false;
  match_outcome_ = 0u;
  rounds_won_ = 0u;
  rounds_lost_ = 0u;
  stat_score_ = 0u;
  stat_deaths_ = 0u;
  stat_mvps_ = 0u;
  enemy_kills_ = 0u;
  enemy_headshots_ = 0u;
  enemy_2ks_ = 0u;
  enemy_3ks_ = 0u;
  enemy_4ks_ = 0u;
  total_damage_ = 0u;
  engagements_entry_count_ = 0u;
  engagements_entry_wins_ = 0u;
  engagements_1v1_count_ = 0u;
  engagements_1v1_wins_ = 0u;
  engagements_1v2_count_ = 0u;
  engagements_1v2_wins_ = 0u;
  utility_count_ = 0u;
  utility_success_ = 0u;
  flash_count_ = 0u;
  flash_success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeepPlayerStatsEntry::~DeepPlayerStatsEntry() {
  SharedDtor();
}

void DeepPlayerStatsEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeepPlayerStatsEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeepPlayerStatsEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeepPlayerStatsEntry_descriptor_;
}

const DeepPlayerStatsEntry& DeepPlayerStatsEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

DeepPlayerStatsEntry* DeepPlayerStatsEntry::default_instance_ = NULL;

DeepPlayerStatsEntry* DeepPlayerStatsEntry::New() const {
  return new DeepPlayerStatsEntry;
}

void DeepPlayerStatsEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    mm_game_mode_ = 0u;
    mapid_ = 0u;
    b_starting_ct_ = false;
    match_outcome_ = 0u;
    rounds_won_ = 0u;
    rounds_lost_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stat_score_ = 0u;
    stat_deaths_ = 0u;
    stat_mvps_ = 0u;
    enemy_kills_ = 0u;
    enemy_headshots_ = 0u;
    enemy_2ks_ = 0u;
    enemy_3ks_ = 0u;
    enemy_4ks_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    total_damage_ = 0u;
    engagements_entry_count_ = 0u;
    engagements_entry_wins_ = 0u;
    engagements_1v1_count_ = 0u;
    engagements_1v1_wins_ = 0u;
    engagements_1v2_count_ = 0u;
    engagements_1v2_wins_ = 0u;
    utility_count_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    utility_success_ = 0u;
    flash_count_ = 0u;
    flash_success_ = 0u;
  }
  mates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeepPlayerStatsEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mm_game_mode;
        break;
      }

      // optional uint32 mm_game_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mm_game_mode_)));
          set_has_mm_game_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_b_starting_ct;
        break;
      }

      // optional bool b_starting_ct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_starting_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_starting_ct_)));
          set_has_b_starting_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_match_outcome;
        break;
      }

      // optional uint32 match_outcome = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_outcome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_outcome_)));
          set_has_match_outcome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rounds_won;
        break;
      }

      // optional uint32 rounds_won = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rounds_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rounds_won_)));
          set_has_rounds_won();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rounds_lost;
        break;
      }

      // optional uint32 rounds_lost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rounds_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rounds_lost_)));
          set_has_rounds_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_stat_score;
        break;
      }

      // optional uint32 stat_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_score_)));
          set_has_stat_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stat_deaths;
        break;
      }

      // optional uint32 stat_deaths = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_deaths_)));
          set_has_stat_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_stat_mvps;
        break;
      }

      // optional uint32 stat_mvps = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_mvps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_mvps_)));
          set_has_stat_mvps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_enemy_kills;
        break;
      }

      // optional uint32 enemy_kills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_kills_)));
          set_has_enemy_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_enemy_headshots;
        break;
      }

      // optional uint32 enemy_headshots = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_headshots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_headshots_)));
          set_has_enemy_headshots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_enemy_2ks;
        break;
      }

      // optional uint32 enemy_2ks = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_2ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_2ks_)));
          set_has_enemy_2ks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_enemy_3ks;
        break;
      }

      // optional uint32 enemy_3ks = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_3ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_3ks_)));
          set_has_enemy_3ks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_enemy_4ks;
        break;
      }

      // optional uint32 enemy_4ks = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_4ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_4ks_)));
          set_has_enemy_4ks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_total_damage;
        break;
      }

      // optional uint32 total_damage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_damage_)));
          set_has_total_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_engagements_entry_count;
        break;
      }

      // optional uint32 engagements_entry_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_entry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_entry_count_)));
          set_has_engagements_entry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_engagements_entry_wins;
        break;
      }

      // optional uint32 engagements_entry_wins = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_entry_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_entry_wins_)));
          set_has_engagements_entry_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_engagements_1v1_count;
        break;
      }

      // optional uint32 engagements_1v1_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_1v1_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_1v1_count_)));
          set_has_engagements_1v1_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_engagements_1v1_wins;
        break;
      }

      // optional uint32 engagements_1v1_wins = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_1v1_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_1v1_wins_)));
          set_has_engagements_1v1_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_engagements_1v2_count;
        break;
      }

      // optional uint32 engagements_1v2_count = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_1v2_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_1v2_count_)));
          set_has_engagements_1v2_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_engagements_1v2_wins;
        break;
      }

      // optional uint32 engagements_1v2_wins = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engagements_1v2_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engagements_1v2_wins_)));
          set_has_engagements_1v2_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_utility_count;
        break;
      }

      // optional uint32 utility_count = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utility_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utility_count_)));
          set_has_utility_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_utility_success;
        break;
      }

      // optional uint32 utility_success = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utility_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utility_success_)));
          set_has_utility_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_flash_count;
        break;
      }

      // optional uint32 flash_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flash_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flash_count_)));
          set_has_flash_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_flash_success;
        break;
      }

      // optional uint32 flash_success = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flash_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flash_success_)));
          set_has_flash_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_mates;
        break;
      }

      // repeated uint32 mates = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 272, input, this->mutable_mates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_mates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeepPlayerStatsEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 mm_game_mode = 3;
  if (has_mm_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mm_game_mode(), output);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional bool b_starting_ct = 5;
  if (has_b_starting_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b_starting_ct(), output);
  }

  // optional uint32 match_outcome = 6;
  if (has_match_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->match_outcome(), output);
  }

  // optional uint32 rounds_won = 7;
  if (has_rounds_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rounds_won(), output);
  }

  // optional uint32 rounds_lost = 8;
  if (has_rounds_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rounds_lost(), output);
  }

  // optional uint32 stat_score = 9;
  if (has_stat_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->stat_score(), output);
  }

  // optional uint32 stat_deaths = 12;
  if (has_stat_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stat_deaths(), output);
  }

  // optional uint32 stat_mvps = 13;
  if (has_stat_mvps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stat_mvps(), output);
  }

  // optional uint32 enemy_kills = 14;
  if (has_enemy_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->enemy_kills(), output);
  }

  // optional uint32 enemy_headshots = 15;
  if (has_enemy_headshots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->enemy_headshots(), output);
  }

  // optional uint32 enemy_2ks = 16;
  if (has_enemy_2ks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->enemy_2ks(), output);
  }

  // optional uint32 enemy_3ks = 17;
  if (has_enemy_3ks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->enemy_3ks(), output);
  }

  // optional uint32 enemy_4ks = 18;
  if (has_enemy_4ks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->enemy_4ks(), output);
  }

  // optional uint32 total_damage = 19;
  if (has_total_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->total_damage(), output);
  }

  // optional uint32 engagements_entry_count = 23;
  if (has_engagements_entry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->engagements_entry_count(), output);
  }

  // optional uint32 engagements_entry_wins = 24;
  if (has_engagements_entry_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->engagements_entry_wins(), output);
  }

  // optional uint32 engagements_1v1_count = 25;
  if (has_engagements_1v1_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->engagements_1v1_count(), output);
  }

  // optional uint32 engagements_1v1_wins = 26;
  if (has_engagements_1v1_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->engagements_1v1_wins(), output);
  }

  // optional uint32 engagements_1v2_count = 27;
  if (has_engagements_1v2_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->engagements_1v2_count(), output);
  }

  // optional uint32 engagements_1v2_wins = 28;
  if (has_engagements_1v2_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->engagements_1v2_wins(), output);
  }

  // optional uint32 utility_count = 29;
  if (has_utility_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->utility_count(), output);
  }

  // optional uint32 utility_success = 30;
  if (has_utility_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->utility_success(), output);
  }

  // optional uint32 flash_count = 32;
  if (has_flash_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->flash_count(), output);
  }

  // optional uint32 flash_success = 33;
  if (has_flash_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->flash_success(), output);
  }

  // repeated uint32 mates = 34;
  for (int i = 0; i < this->mates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      34, this->mates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeepPlayerStatsEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (has_mm_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mm_game_mode(), target);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional bool b_starting_ct = 5;
  if (has_b_starting_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b_starting_ct(), target);
  }

  // optional uint32 match_outcome = 6;
  if (has_match_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->match_outcome(), target);
  }

  // optional uint32 rounds_won = 7;
  if (has_rounds_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rounds_won(), target);
  }

  // optional uint32 rounds_lost = 8;
  if (has_rounds_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rounds_lost(), target);
  }

  // optional uint32 stat_score = 9;
  if (has_stat_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->stat_score(), target);
  }

  // optional uint32 stat_deaths = 12;
  if (has_stat_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stat_deaths(), target);
  }

  // optional uint32 stat_mvps = 13;
  if (has_stat_mvps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stat_mvps(), target);
  }

  // optional uint32 enemy_kills = 14;
  if (has_enemy_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->enemy_kills(), target);
  }

  // optional uint32 enemy_headshots = 15;
  if (has_enemy_headshots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->enemy_headshots(), target);
  }

  // optional uint32 enemy_2ks = 16;
  if (has_enemy_2ks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->enemy_2ks(), target);
  }

  // optional uint32 enemy_3ks = 17;
  if (has_enemy_3ks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->enemy_3ks(), target);
  }

  // optional uint32 enemy_4ks = 18;
  if (has_enemy_4ks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->enemy_4ks(), target);
  }

  // optional uint32 total_damage = 19;
  if (has_total_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->total_damage(), target);
  }

  // optional uint32 engagements_entry_count = 23;
  if (has_engagements_entry_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->engagements_entry_count(), target);
  }

  // optional uint32 engagements_entry_wins = 24;
  if (has_engagements_entry_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->engagements_entry_wins(), target);
  }

  // optional uint32 engagements_1v1_count = 25;
  if (has_engagements_1v1_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->engagements_1v1_count(), target);
  }

  // optional uint32 engagements_1v1_wins = 26;
  if (has_engagements_1v1_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->engagements_1v1_wins(), target);
  }

  // optional uint32 engagements_1v2_count = 27;
  if (has_engagements_1v2_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->engagements_1v2_count(), target);
  }

  // optional uint32 engagements_1v2_wins = 28;
  if (has_engagements_1v2_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->engagements_1v2_wins(), target);
  }

  // optional uint32 utility_count = 29;
  if (has_utility_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->utility_count(), target);
  }

  // optional uint32 utility_success = 30;
  if (has_utility_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->utility_success(), target);
  }

  // optional uint32 flash_count = 32;
  if (has_flash_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->flash_count(), target);
  }

  // optional uint32 flash_success = 33;
  if (has_flash_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->flash_success(), target);
  }

  // repeated uint32 mates = 34;
  for (int i = 0; i < this->mates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(34, this->mates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeepPlayerStatsEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 mm_game_mode = 3;
    if (has_mm_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mm_game_mode());
    }

    // optional uint32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool b_starting_ct = 5;
    if (has_b_starting_ct()) {
      total_size += 1 + 1;
    }

    // optional uint32 match_outcome = 6;
    if (has_match_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_outcome());
    }

    // optional uint32 rounds_won = 7;
    if (has_rounds_won()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rounds_won());
    }

    // optional uint32 rounds_lost = 8;
    if (has_rounds_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rounds_lost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 stat_score = 9;
    if (has_stat_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_score());
    }

    // optional uint32 stat_deaths = 12;
    if (has_stat_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_deaths());
    }

    // optional uint32 stat_mvps = 13;
    if (has_stat_mvps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_mvps());
    }

    // optional uint32 enemy_kills = 14;
    if (has_enemy_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_kills());
    }

    // optional uint32 enemy_headshots = 15;
    if (has_enemy_headshots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_headshots());
    }

    // optional uint32 enemy_2ks = 16;
    if (has_enemy_2ks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_2ks());
    }

    // optional uint32 enemy_3ks = 17;
    if (has_enemy_3ks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_3ks());
    }

    // optional uint32 enemy_4ks = 18;
    if (has_enemy_4ks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_4ks());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 total_damage = 19;
    if (has_total_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_damage());
    }

    // optional uint32 engagements_entry_count = 23;
    if (has_engagements_entry_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_entry_count());
    }

    // optional uint32 engagements_entry_wins = 24;
    if (has_engagements_entry_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_entry_wins());
    }

    // optional uint32 engagements_1v1_count = 25;
    if (has_engagements_1v1_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_1v1_count());
    }

    // optional uint32 engagements_1v1_wins = 26;
    if (has_engagements_1v1_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_1v1_wins());
    }

    // optional uint32 engagements_1v2_count = 27;
    if (has_engagements_1v2_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_1v2_count());
    }

    // optional uint32 engagements_1v2_wins = 28;
    if (has_engagements_1v2_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engagements_1v2_wins());
    }

    // optional uint32 utility_count = 29;
    if (has_utility_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utility_count());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 utility_success = 30;
    if (has_utility_success()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utility_success());
    }

    // optional uint32 flash_count = 32;
    if (has_flash_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flash_count());
    }

    // optional uint32 flash_success = 33;
    if (has_flash_success()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flash_success());
    }

  }
  // repeated uint32 mates = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->mates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mates(i));
    }
    total_size += 2 * this->mates_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeepPlayerStatsEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeepPlayerStatsEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeepPlayerStatsEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeepPlayerStatsEntry::MergeFrom(const DeepPlayerStatsEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  mates_.MergeFrom(from.mates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_mm_game_mode()) {
      set_mm_game_mode(from.mm_game_mode());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_b_starting_ct()) {
      set_b_starting_ct(from.b_starting_ct());
    }
    if (from.has_match_outcome()) {
      set_match_outcome(from.match_outcome());
    }
    if (from.has_rounds_won()) {
      set_rounds_won(from.rounds_won());
    }
    if (from.has_rounds_lost()) {
      set_rounds_lost(from.rounds_lost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stat_score()) {
      set_stat_score(from.stat_score());
    }
    if (from.has_stat_deaths()) {
      set_stat_deaths(from.stat_deaths());
    }
    if (from.has_stat_mvps()) {
      set_stat_mvps(from.stat_mvps());
    }
    if (from.has_enemy_kills()) {
      set_enemy_kills(from.enemy_kills());
    }
    if (from.has_enemy_headshots()) {
      set_enemy_headshots(from.enemy_headshots());
    }
    if (from.has_enemy_2ks()) {
      set_enemy_2ks(from.enemy_2ks());
    }
    if (from.has_enemy_3ks()) {
      set_enemy_3ks(from.enemy_3ks());
    }
    if (from.has_enemy_4ks()) {
      set_enemy_4ks(from.enemy_4ks());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_total_damage()) {
      set_total_damage(from.total_damage());
    }
    if (from.has_engagements_entry_count()) {
      set_engagements_entry_count(from.engagements_entry_count());
    }
    if (from.has_engagements_entry_wins()) {
      set_engagements_entry_wins(from.engagements_entry_wins());
    }
    if (from.has_engagements_1v1_count()) {
      set_engagements_1v1_count(from.engagements_1v1_count());
    }
    if (from.has_engagements_1v1_wins()) {
      set_engagements_1v1_wins(from.engagements_1v1_wins());
    }
    if (from.has_engagements_1v2_count()) {
      set_engagements_1v2_count(from.engagements_1v2_count());
    }
    if (from.has_engagements_1v2_wins()) {
      set_engagements_1v2_wins(from.engagements_1v2_wins());
    }
    if (from.has_utility_count()) {
      set_utility_count(from.utility_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_utility_success()) {
      set_utility_success(from.utility_success());
    }
    if (from.has_flash_count()) {
      set_flash_count(from.flash_count());
    }
    if (from.has_flash_success()) {
      set_flash_success(from.flash_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeepPlayerStatsEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepPlayerStatsEntry::CopyFrom(const DeepPlayerStatsEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepPlayerStatsEntry::IsInitialized() const {

  return true;
}

void DeepPlayerStatsEntry::Swap(DeepPlayerStatsEntry* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(match_id_, other->match_id_);
    std::swap(mm_game_mode_, other->mm_game_mode_);
    std::swap(mapid_, other->mapid_);
    std::swap(b_starting_ct_, other->b_starting_ct_);
    std::swap(match_outcome_, other->match_outcome_);
    std::swap(rounds_won_, other->rounds_won_);
    std::swap(rounds_lost_, other->rounds_lost_);
    std::swap(stat_score_, other->stat_score_);
    std::swap(stat_deaths_, other->stat_deaths_);
    std::swap(stat_mvps_, other->stat_mvps_);
    std::swap(enemy_kills_, other->enemy_kills_);
    std::swap(enemy_headshots_, other->enemy_headshots_);
    std::swap(enemy_2ks_, other->enemy_2ks_);
    std::swap(enemy_3ks_, other->enemy_3ks_);
    std::swap(enemy_4ks_, other->enemy_4ks_);
    std::swap(total_damage_, other->total_damage_);
    std::swap(engagements_entry_count_, other->engagements_entry_count_);
    std::swap(engagements_entry_wins_, other->engagements_entry_wins_);
    std::swap(engagements_1v1_count_, other->engagements_1v1_count_);
    std::swap(engagements_1v1_wins_, other->engagements_1v1_wins_);
    std::swap(engagements_1v2_count_, other->engagements_1v2_count_);
    std::swap(engagements_1v2_wins_, other->engagements_1v2_wins_);
    std::swap(utility_count_, other->utility_count_);
    std::swap(utility_success_, other->utility_success_);
    std::swap(flash_count_, other->flash_count_);
    std::swap(flash_success_, other->flash_success_);
    mates_.Swap(&other->mates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeepPlayerStatsEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeepPlayerStatsEntry_descriptor_;
  metadata.reflection = DeepPlayerStatsEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeepPlayerMatchEvent::kAccountidFieldNumber;
const int DeepPlayerMatchEvent::kMatchIdFieldNumber;
const int DeepPlayerMatchEvent::kEventIdFieldNumber;
const int DeepPlayerMatchEvent::kEventTypeFieldNumber;
const int DeepPlayerMatchEvent::kBPlayingCtFieldNumber;
const int DeepPlayerMatchEvent::kUserPosXFieldNumber;
const int DeepPlayerMatchEvent::kUserPosYFieldNumber;
const int DeepPlayerMatchEvent::kUserPosZFieldNumber;
const int DeepPlayerMatchEvent::kUserDefidxFieldNumber;
const int DeepPlayerMatchEvent::kOtherPosXFieldNumber;
const int DeepPlayerMatchEvent::kOtherPosYFieldNumber;
const int DeepPlayerMatchEvent::kOtherPosZFieldNumber;
const int DeepPlayerMatchEvent::kOtherDefidxFieldNumber;
const int DeepPlayerMatchEvent::kEventDataFieldNumber;
#endif  // !_MSC_VER

DeepPlayerMatchEvent::DeepPlayerMatchEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeepPlayerMatchEvent::InitAsDefaultInstance() {
}

DeepPlayerMatchEvent::DeepPlayerMatchEvent(const DeepPlayerMatchEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeepPlayerMatchEvent::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  event_id_ = 0u;
  event_type_ = 0u;
  b_playing_ct_ = false;
  user_pos_x_ = 0;
  user_pos_y_ = 0;
  user_pos_z_ = 0;
  user_defidx_ = 0u;
  other_pos_x_ = 0;
  other_pos_y_ = 0;
  other_pos_z_ = 0;
  other_defidx_ = 0u;
  event_data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeepPlayerMatchEvent::~DeepPlayerMatchEvent() {
  SharedDtor();
}

void DeepPlayerMatchEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeepPlayerMatchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeepPlayerMatchEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeepPlayerMatchEvent_descriptor_;
}

const DeepPlayerMatchEvent& DeepPlayerMatchEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

DeepPlayerMatchEvent* DeepPlayerMatchEvent::default_instance_ = NULL;

DeepPlayerMatchEvent* DeepPlayerMatchEvent::New() const {
  return new DeepPlayerMatchEvent;
}

void DeepPlayerMatchEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    event_id_ = 0u;
    event_type_ = 0u;
    b_playing_ct_ = false;
    user_pos_x_ = 0;
    user_pos_y_ = 0;
    user_pos_z_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    user_defidx_ = 0u;
    other_pos_x_ = 0;
    other_pos_y_ = 0;
    other_pos_z_ = 0;
    other_defidx_ = 0u;
    event_data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeepPlayerMatchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_b_playing_ct;
        break;
      }

      // optional bool b_playing_ct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_playing_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_playing_ct_)));
          set_has_b_playing_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_pos_x;
        break;
      }

      // optional int32 user_pos_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_pos_x_)));
          set_has_user_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_pos_y;
        break;
      }

      // optional int32 user_pos_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_pos_y_)));
          set_has_user_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_user_defidx;
        break;
      }

      // optional uint32 user_defidx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_defidx_)));
          set_has_user_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_other_pos_x;
        break;
      }

      // optional int32 other_pos_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_pos_x_)));
          set_has_other_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_other_pos_y;
        break;
      }

      // optional int32 other_pos_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_pos_y_)));
          set_has_other_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_other_defidx;
        break;
      }

      // optional uint32 other_defidx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_defidx_)));
          set_has_other_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_user_pos_z;
        break;
      }

      // optional int32 user_pos_z = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_pos_z_)));
          set_has_user_pos_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_other_pos_z;
        break;
      }

      // optional int32 other_pos_z = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_pos_z_)));
          set_has_other_pos_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_event_data;
        break;
      }

      // optional int32 event_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_data_)));
          set_has_event_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeepPlayerMatchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_id(), output);
  }

  // optional uint32 event_type = 4;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_type(), output);
  }

  // optional bool b_playing_ct = 5;
  if (has_b_playing_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b_playing_ct(), output);
  }

  // optional int32 user_pos_x = 6;
  if (has_user_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_pos_x(), output);
  }

  // optional int32 user_pos_y = 7;
  if (has_user_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_pos_y(), output);
  }

  // optional uint32 user_defidx = 8;
  if (has_user_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->user_defidx(), output);
  }

  // optional int32 other_pos_x = 9;
  if (has_other_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->other_pos_x(), output);
  }

  // optional int32 other_pos_y = 10;
  if (has_other_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->other_pos_y(), output);
  }

  // optional uint32 other_defidx = 11;
  if (has_other_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->other_defidx(), output);
  }

  // optional int32 user_pos_z = 12;
  if (has_user_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->user_pos_z(), output);
  }

  // optional int32 other_pos_z = 13;
  if (has_other_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->other_pos_z(), output);
  }

  // optional int32 event_data = 14;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->event_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeepPlayerMatchEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_id(), target);
  }

  // optional uint32 event_type = 4;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_type(), target);
  }

  // optional bool b_playing_ct = 5;
  if (has_b_playing_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b_playing_ct(), target);
  }

  // optional int32 user_pos_x = 6;
  if (has_user_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_pos_x(), target);
  }

  // optional int32 user_pos_y = 7;
  if (has_user_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->user_pos_y(), target);
  }

  // optional uint32 user_defidx = 8;
  if (has_user_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->user_defidx(), target);
  }

  // optional int32 other_pos_x = 9;
  if (has_other_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->other_pos_x(), target);
  }

  // optional int32 other_pos_y = 10;
  if (has_other_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->other_pos_y(), target);
  }

  // optional uint32 other_defidx = 11;
  if (has_other_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->other_defidx(), target);
  }

  // optional int32 user_pos_z = 12;
  if (has_user_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->user_pos_z(), target);
  }

  // optional int32 other_pos_z = 13;
  if (has_other_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->other_pos_z(), target);
  }

  // optional int32 event_data = 14;
  if (has_event_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->event_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeepPlayerMatchEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 event_type = 4;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional bool b_playing_ct = 5;
    if (has_b_playing_ct()) {
      total_size += 1 + 1;
    }

    // optional int32 user_pos_x = 6;
    if (has_user_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_pos_x());
    }

    // optional int32 user_pos_y = 7;
    if (has_user_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_pos_y());
    }

    // optional int32 user_pos_z = 12;
    if (has_user_pos_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_pos_z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 user_defidx = 8;
    if (has_user_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_defidx());
    }

    // optional int32 other_pos_x = 9;
    if (has_other_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_pos_x());
    }

    // optional int32 other_pos_y = 10;
    if (has_other_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_pos_y());
    }

    // optional int32 other_pos_z = 13;
    if (has_other_pos_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_pos_z());
    }

    // optional uint32 other_defidx = 11;
    if (has_other_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_defidx());
    }

    // optional int32 event_data = 14;
    if (has_event_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeepPlayerMatchEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeepPlayerMatchEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeepPlayerMatchEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeepPlayerMatchEvent::MergeFrom(const DeepPlayerMatchEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_b_playing_ct()) {
      set_b_playing_ct(from.b_playing_ct());
    }
    if (from.has_user_pos_x()) {
      set_user_pos_x(from.user_pos_x());
    }
    if (from.has_user_pos_y()) {
      set_user_pos_y(from.user_pos_y());
    }
    if (from.has_user_pos_z()) {
      set_user_pos_z(from.user_pos_z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_defidx()) {
      set_user_defidx(from.user_defidx());
    }
    if (from.has_other_pos_x()) {
      set_other_pos_x(from.other_pos_x());
    }
    if (from.has_other_pos_y()) {
      set_other_pos_y(from.other_pos_y());
    }
    if (from.has_other_pos_z()) {
      set_other_pos_z(from.other_pos_z());
    }
    if (from.has_other_defidx()) {
      set_other_defidx(from.other_defidx());
    }
    if (from.has_event_data()) {
      set_event_data(from.event_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeepPlayerMatchEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepPlayerMatchEvent::CopyFrom(const DeepPlayerMatchEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepPlayerMatchEvent::IsInitialized() const {

  return true;
}

void DeepPlayerMatchEvent::Swap(DeepPlayerMatchEvent* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(match_id_, other->match_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(b_playing_ct_, other->b_playing_ct_);
    std::swap(user_pos_x_, other->user_pos_x_);
    std::swap(user_pos_y_, other->user_pos_y_);
    std::swap(user_pos_z_, other->user_pos_z_);
    std::swap(user_defidx_, other->user_defidx_);
    std::swap(other_pos_x_, other->other_pos_x_);
    std::swap(other_pos_y_, other->other_pos_y_);
    std::swap(other_pos_z_, other->other_pos_z_);
    std::swap(other_defidx_, other->other_defidx_);
    std::swap(event_data_, other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeepPlayerMatchEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeepPlayerMatchEvent_descriptor_;
  metadata.reflection = DeepPlayerMatchEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::kBeginFieldNumber;
const int CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::kEndFieldNumber;
const int CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::kFrozenFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::InitAsDefaultInstance() {
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange(const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0u;
  end_ = 0u;
  frozen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::~CMsgGCCStrike15_ClientDeepStats_DeepStatsRange() {
  SharedDtor();
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_;
}

const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance_ = NULL;

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::New() const {
  return new CMsgGCCStrike15_ClientDeepStats_DeepStatsRange;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0u;
    end_ = 0u;
    frozen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional uint32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frozen;
        break;
      }

      // optional bool frozen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frozen_)));
          set_has_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begin(), output);
  }

  // optional uint32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  // optional bool frozen = 3;
  if (has_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->frozen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begin(), target);
  }

  // optional uint32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  // optional bool frozen = 3;
  if (has_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->frozen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }

    // optional uint32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

    // optional bool frozen = 3;
    if (has_frozen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_frozen()) {
      set_frozen(from.frozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CopyFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::Swap(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(frozen_, other->frozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_descriptor_;
  metadata.reflection = CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::kPlayerFieldNumber;
const int CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::kEventsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::InitAsDefaultInstance() {
  player_ = const_cast< ::DeepPlayerStatsEntry*>(&::DeepPlayerStatsEntry::default_instance());
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::~CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch() {
  SharedDtor();
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_;
}

const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::default_instance_ = NULL;

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::New() const {
  return new CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::DeepPlayerStatsEntry::Clear();
    }
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeepPlayerStatsEntry player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_events;
        break;
      }

      // repeated .DeepPlayerMatchEvent events = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DeepPlayerStatsEntry player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // repeated .DeepPlayerMatchEvent events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DeepPlayerStatsEntry player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // repeated .DeepPlayerMatchEvent events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DeepPlayerStatsEntry player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  // repeated .DeepPlayerMatchEvent events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::MergeFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::DeepPlayerStatsEntry::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CopyFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::Swap(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_descriptor_;
  metadata.reflection = CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_ClientDeepStats::kAccountIdFieldNumber;
const int CMsgGCCStrike15_ClientDeepStats::kRangeFieldNumber;
const int CMsgGCCStrike15_ClientDeepStats::kMatchesFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_ClientDeepStats::CMsgGCCStrike15_ClientDeepStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_ClientDeepStats::InitAsDefaultInstance() {
  range_ = const_cast< ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange*>(&::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::default_instance());
}

CMsgGCCStrike15_ClientDeepStats::CMsgGCCStrike15_ClientDeepStats(const CMsgGCCStrike15_ClientDeepStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_ClientDeepStats::~CMsgGCCStrike15_ClientDeepStats() {
  SharedDtor();
}

void CMsgGCCStrike15_ClientDeepStats::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
  }
}

void CMsgGCCStrike15_ClientDeepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_ClientDeepStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_ClientDeepStats_descriptor_;
}

const CMsgGCCStrike15_ClientDeepStats& CMsgGCCStrike15_ClientDeepStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_ClientDeepStats* CMsgGCCStrike15_ClientDeepStats::default_instance_ = NULL;

CMsgGCCStrike15_ClientDeepStats* CMsgGCCStrike15_ClientDeepStats::New() const {
  return new CMsgGCCStrike15_ClientDeepStats;
}

void CMsgGCCStrike15_ClientDeepStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_range()) {
      if (range_ != NULL) range_->::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::Clear();
    }
  }
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_ClientDeepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }

      // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matches;
        break;
      }

      // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matches;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_ClientDeepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(), output);
  }

  // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_ClientDeepStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(), target);
  }

  // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_ClientDeepStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_ClientDeepStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_ClientDeepStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_ClientDeepStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_ClientDeepStats::MergeFrom(const CMsgGCCStrike15_ClientDeepStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_range()) {
      mutable_range()->::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_ClientDeepStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_ClientDeepStats::CopyFrom(const CMsgGCCStrike15_ClientDeepStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_ClientDeepStats::Swap(CMsgGCCStrike15_ClientDeepStats* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(range_, other->range_);
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_ClientDeepStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_ClientDeepStats_descriptor_;
  metadata.reflection = CMsgGCCStrike15_ClientDeepStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DeepStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DeepStats::CCSUsrMsg_DeepStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DeepStats::InitAsDefaultInstance() {
  stats_ = const_cast< ::CMsgGCCStrike15_ClientDeepStats*>(&::CMsgGCCStrike15_ClientDeepStats::default_instance());
}

CCSUsrMsg_DeepStats::CCSUsrMsg_DeepStats(const CCSUsrMsg_DeepStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DeepStats::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DeepStats::~CCSUsrMsg_DeepStats() {
  SharedDtor();
}

void CCSUsrMsg_DeepStats::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void CCSUsrMsg_DeepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DeepStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DeepStats_descriptor_;
}

const CCSUsrMsg_DeepStats& CCSUsrMsg_DeepStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_DeepStats* CCSUsrMsg_DeepStats::default_instance_ = NULL;

CCSUsrMsg_DeepStats* CCSUsrMsg_DeepStats::New() const {
  return new CCSUsrMsg_DeepStats;
}

void CCSUsrMsg_DeepStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::CMsgGCCStrike15_ClientDeepStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DeepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DeepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DeepStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DeepStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DeepStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DeepStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DeepStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DeepStats::MergeFrom(const CCSUsrMsg_DeepStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::CMsgGCCStrike15_ClientDeepStats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DeepStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DeepStats::CopyFrom(const CCSUsrMsg_DeepStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DeepStats::IsInitialized() const {

  return true;
}

void CCSUsrMsg_DeepStats::Swap(CCSUsrMsg_DeepStats* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DeepStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DeepStats_descriptor_;
  metadata.reflection = CCSUsrMsg_DeepStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRankingInfo::kAccountIdFieldNumber;
const int PlayerRankingInfo::kRankIdFieldNumber;
const int PlayerRankingInfo::kWinsFieldNumber;
const int PlayerRankingInfo::kRankChangeFieldNumber;
const int PlayerRankingInfo::kRankTypeIdFieldNumber;
const int PlayerRankingInfo::kTvControlFieldNumber;
#endif  // !_MSC_VER

PlayerRankingInfo::PlayerRankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRankingInfo::InitAsDefaultInstance() {
}

PlayerRankingInfo::PlayerRankingInfo(const PlayerRankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRankingInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  rank_id_ = 0u;
  wins_ = 0u;
  rank_change_ = 0;
  rank_type_id_ = 0u;
  tv_control_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRankingInfo::~PlayerRankingInfo() {
  SharedDtor();
}

void PlayerRankingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRankingInfo_descriptor_;
}

const PlayerRankingInfo& PlayerRankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

PlayerRankingInfo* PlayerRankingInfo::default_instance_ = NULL;

PlayerRankingInfo* PlayerRankingInfo::New() const {
  return new PlayerRankingInfo;
}

void PlayerRankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    rank_id_ = 0u;
    wins_ = 0u;
    rank_change_ = 0;
    rank_type_id_ = 0u;
    tv_control_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional uint32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rank_change;
        break;
      }

      // optional float rank_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_type_id;
        break;
      }

      // optional uint32 rank_type_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_id_)));
          set_has_rank_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tv_control;
        break;
      }

      // optional uint32 tv_control = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_control_)));
          set_has_tv_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_id(), output);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional float rank_change = 4;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rank_change(), output);
  }

  // optional uint32 rank_type_id = 6;
  if (has_rank_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank_type_id(), output);
  }

  // optional uint32 tv_control = 7;
  if (has_tv_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tv_control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional float rank_change = 4;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rank_change(), target);
  }

  // optional uint32 rank_type_id = 6;
  if (has_rank_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank_type_id(), target);
  }

  // optional uint32 tv_control = 7;
  if (has_tv_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tv_control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional float rank_change = 4;
    if (has_rank_change()) {
      total_size += 1 + 4;
    }

    // optional uint32 rank_type_id = 6;
    if (has_rank_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type_id());
    }

    // optional uint32 tv_control = 7;
    if (has_tv_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRankingInfo::MergeFrom(const PlayerRankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_rank_type_id()) {
      set_rank_type_id(from.rank_type_id());
    }
    if (from.has_tv_control()) {
      set_tv_control(from.tv_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankingInfo::CopyFrom(const PlayerRankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo::IsInitialized() const {

  return true;
}

void PlayerRankingInfo::Swap(PlayerRankingInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(wins_, other->wins_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(rank_type_id_, other->rank_type_id_);
    std::swap(tv_control_, other->tv_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRankingInfo_descriptor_;
  metadata.reflection = PlayerRankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IpAddressMask::kAFieldNumber;
const int IpAddressMask::kBFieldNumber;
const int IpAddressMask::kCFieldNumber;
const int IpAddressMask::kDFieldNumber;
const int IpAddressMask::kBitsFieldNumber;
const int IpAddressMask::kTokenFieldNumber;
#endif  // !_MSC_VER

IpAddressMask::IpAddressMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpAddressMask::InitAsDefaultInstance() {
}

IpAddressMask::IpAddressMask(const IpAddressMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpAddressMask::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0u;
  b_ = 0u;
  c_ = 0u;
  d_ = 0u;
  bits_ = 0u;
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpAddressMask::~IpAddressMask() {
  SharedDtor();
}

void IpAddressMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpAddressMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpAddressMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpAddressMask_descriptor_;
}

const IpAddressMask& IpAddressMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

IpAddressMask* IpAddressMask::default_instance_ = NULL;

IpAddressMask* IpAddressMask::New() const {
  return new IpAddressMask;
}

void IpAddressMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0u;
    b_ = 0u;
    c_ = 0u;
    d_ = 0u;
    bits_ = 0u;
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpAddressMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional uint32 b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional uint32 c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_d;
        break;
      }

      // optional uint32 d = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bits;
        break;
      }

      // optional uint32 bits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token;
        break;
      }

      // optional uint32 token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpAddressMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // optional uint32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // optional uint32 c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // optional uint32 d = 4;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->d(), output);
  }

  // optional uint32 bits = 5;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bits(), output);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpAddressMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // optional uint32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // optional uint32 c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // optional uint32 d = 4;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->d(), target);
  }

  // optional uint32 bits = 5;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bits(), target);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpAddressMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a());
    }

    // optional uint32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

    // optional uint32 c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

    // optional uint32 d = 4;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d());
    }

    // optional uint32 bits = 5;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

    // optional uint32 token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddressMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpAddressMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpAddressMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpAddressMask::MergeFrom(const IpAddressMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpAddressMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddressMask::CopyFrom(const IpAddressMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMask::IsInitialized() const {

  return true;
}

void IpAddressMask::Swap(IpAddressMask* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(d_, other->d_);
    std::swap(bits_, other->bits_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpAddressMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpAddressMask_descriptor_;
  metadata.reflection = IpAddressMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentEvent::kEventIdFieldNumber;
const int TournamentEvent::kEventTagFieldNumber;
const int TournamentEvent::kEventNameFieldNumber;
const int TournamentEvent::kEventTimeStartFieldNumber;
const int TournamentEvent::kEventTimeEndFieldNumber;
const int TournamentEvent::kEventPublicFieldNumber;
const int TournamentEvent::kEventStageIdFieldNumber;
const int TournamentEvent::kEventStageNameFieldNumber;
const int TournamentEvent::kActiveSectionIdFieldNumber;
#endif  // !_MSC_VER

TournamentEvent::TournamentEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentEvent::InitAsDefaultInstance() {
}

TournamentEvent::TournamentEvent(const TournamentEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_start_ = 0u;
  event_time_end_ = 0u;
  event_public_ = 0;
  event_stage_id_ = 0;
  event_stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_section_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentEvent::~TournamentEvent() {
  SharedDtor();
}

void TournamentEvent::SharedDtor() {
  if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete event_tag_;
  }
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_stage_name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentEvent_descriptor_;
}

const TournamentEvent& TournamentEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

TournamentEvent* TournamentEvent::default_instance_ = NULL;

TournamentEvent* TournamentEvent::New() const {
  return new TournamentEvent;
}

void TournamentEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    if (has_event_tag()) {
      if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
        event_tag_->clear();
      }
    }
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    event_time_start_ = 0u;
    event_time_end_ = 0u;
    event_public_ = 0;
    event_stage_id_ = 0;
    if (has_event_stage_name()) {
      if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
        event_stage_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    active_section_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_tag;
        break;
      }

      // optional string event_tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_tag().data(), this->event_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_name;
        break;
      }

      // optional string event_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_time_start;
        break;
      }

      // optional uint32 event_time_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_start_)));
          set_has_event_time_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_time_end;
        break;
      }

      // optional uint32 event_time_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_end_)));
          set_has_event_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_public;
        break;
      }

      // optional int32 event_public = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_public_)));
          set_has_event_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_event_stage_id;
        break;
      }

      // optional int32 event_stage_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
          set_has_event_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_event_stage_name;
        break;
      }

      // optional string event_stage_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_stage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_stage_name().data(), this->event_stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_active_section_id;
        break;
      }

      // optional uint32 active_section_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_section_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_section_id_)));
          set_has_active_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional string event_tag = 2;
  if (has_event_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_tag().data(), this->event_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->event_tag(), output);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->event_name(), output);
  }

  // optional uint32 event_time_start = 4;
  if (has_event_time_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_time_start(), output);
  }

  // optional uint32 event_time_end = 5;
  if (has_event_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_time_end(), output);
  }

  // optional int32 event_public = 6;
  if (has_event_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_public(), output);
  }

  // optional int32 event_stage_id = 7;
  if (has_event_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->event_stage_id(), output);
  }

  // optional string event_stage_name = 8;
  if (has_event_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_stage_name().data(), this->event_stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->event_stage_name(), output);
  }

  // optional uint32 active_section_id = 9;
  if (has_active_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_section_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional string event_tag = 2;
  if (has_event_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_tag().data(), this->event_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_tag(), target);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_name(), target);
  }

  // optional uint32 event_time_start = 4;
  if (has_event_time_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_time_start(), target);
  }

  // optional uint32 event_time_end = 5;
  if (has_event_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_time_end(), target);
  }

  // optional int32 event_public = 6;
  if (has_event_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->event_public(), target);
  }

  // optional int32 event_stage_id = 7;
  if (has_event_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->event_stage_id(), target);
  }

  // optional string event_stage_name = 8;
  if (has_event_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_stage_name().data(), this->event_stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->event_stage_name(), target);
  }

  // optional uint32 active_section_id = 9;
  if (has_active_section_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_section_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional string event_tag = 2;
    if (has_event_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_tag());
    }

    // optional string event_name = 3;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional uint32 event_time_start = 4;
    if (has_event_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_start());
    }

    // optional uint32 event_time_end = 5;
    if (has_event_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_end());
    }

    // optional int32 event_public = 6;
    if (has_event_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_public());
    }

    // optional int32 event_stage_id = 7;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

    // optional string event_stage_name = 8;
    if (has_event_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_stage_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 active_section_id = 9;
    if (has_active_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_section_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentEvent::MergeFrom(const TournamentEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_tag()) {
      set_event_tag(from.event_tag());
    }
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_event_time_start()) {
      set_event_time_start(from.event_time_start());
    }
    if (from.has_event_time_end()) {
      set_event_time_end(from.event_time_end());
    }
    if (from.has_event_public()) {
      set_event_public(from.event_public());
    }
    if (from.has_event_stage_id()) {
      set_event_stage_id(from.event_stage_id());
    }
    if (from.has_event_stage_name()) {
      set_event_stage_name(from.event_stage_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_active_section_id()) {
      set_active_section_id(from.active_section_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentEvent::CopyFrom(const TournamentEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentEvent::IsInitialized() const {

  return true;
}

void TournamentEvent::Swap(TournamentEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_tag_, other->event_tag_);
    std::swap(event_name_, other->event_name_);
    std::swap(event_time_start_, other->event_time_start_);
    std::swap(event_time_end_, other->event_time_end_);
    std::swap(event_public_, other->event_public_);
    std::swap(event_stage_id_, other->event_stage_id_);
    std::swap(event_stage_name_, other->event_stage_name_);
    std::swap(active_section_id_, other->active_section_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentEvent_descriptor_;
  metadata.reflection = TournamentEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentPlayer::kAccountIdFieldNumber;
const int TournamentPlayer::kPlayerNickFieldNumber;
const int TournamentPlayer::kPlayerNameFieldNumber;
const int TournamentPlayer::kPlayerDobFieldNumber;
const int TournamentPlayer::kPlayerFlagFieldNumber;
const int TournamentPlayer::kPlayerLocationFieldNumber;
const int TournamentPlayer::kPlayerDescFieldNumber;
#endif  // !_MSC_VER

TournamentPlayer::TournamentPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentPlayer::InitAsDefaultInstance() {
}

TournamentPlayer::TournamentPlayer(const TournamentPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  player_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_dob_ = 0u;
  player_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentPlayer::~TournamentPlayer() {
  SharedDtor();
}

void TournamentPlayer::SharedDtor() {
  if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nick_;
  }
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete player_flag_;
  }
  if (player_location_ != &::google::protobuf::internal::kEmptyString) {
    delete player_location_;
  }
  if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete player_desc_;
  }
  if (this != default_instance_) {
  }
}

void TournamentPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentPlayer_descriptor_;
}

const TournamentPlayer& TournamentPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

TournamentPlayer* TournamentPlayer::default_instance_ = NULL;

TournamentPlayer* TournamentPlayer::New() const {
  return new TournamentPlayer;
}

void TournamentPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_player_nick()) {
      if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
        player_nick_->clear();
      }
    }
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_dob_ = 0u;
    if (has_player_flag()) {
      if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
        player_flag_->clear();
      }
    }
    if (has_player_location()) {
      if (player_location_ != &::google::protobuf::internal::kEmptyString) {
        player_location_->clear();
      }
    }
    if (has_player_desc()) {
      if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
        player_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_nick;
        break;
      }

      // optional string player_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_nick().data(), this->player_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_name;
        break;
      }

      // optional string player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_dob;
        break;
      }

      // optional uint32 player_dob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_dob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_dob_)));
          set_has_player_dob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_flag;
        break;
      }

      // optional string player_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_flag().data(), this->player_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_location;
        break;
      }

      // optional string player_location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_location().data(), this->player_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_player_desc;
        break;
      }

      // optional string player_desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_desc().data(), this->player_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_nick = 2;
  if (has_player_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nick().data(), this->player_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_nick(), output);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_name(), output);
  }

  // optional uint32 player_dob = 4;
  if (has_player_dob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_dob(), output);
  }

  // optional string player_flag = 5;
  if (has_player_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_flag().data(), this->player_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_flag(), output);
  }

  // optional string player_location = 6;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_location().data(), this->player_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->player_location(), output);
  }

  // optional string player_desc = 7;
  if (has_player_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_desc().data(), this->player_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->player_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_nick = 2;
  if (has_player_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nick().data(), this->player_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nick(), target);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // optional uint32 player_dob = 4;
  if (has_player_dob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_dob(), target);
  }

  // optional string player_flag = 5;
  if (has_player_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_flag().data(), this->player_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_flag(), target);
  }

  // optional string player_location = 6;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_location().data(), this->player_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->player_location(), target);
  }

  // optional string player_desc = 7;
  if (has_player_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_desc().data(), this->player_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->player_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string player_nick = 2;
    if (has_player_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nick());
    }

    // optional string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 player_dob = 4;
    if (has_player_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_dob());
    }

    // optional string player_flag = 5;
    if (has_player_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_flag());
    }

    // optional string player_location = 6;
    if (has_player_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_location());
    }

    // optional string player_desc = 7;
    if (has_player_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentPlayer::MergeFrom(const TournamentPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_nick()) {
      set_player_nick(from.player_nick());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_dob()) {
      set_player_dob(from.player_dob());
    }
    if (from.has_player_flag()) {
      set_player_flag(from.player_flag());
    }
    if (from.has_player_location()) {
      set_player_location(from.player_location());
    }
    if (from.has_player_desc()) {
      set_player_desc(from.player_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentPlayer::CopyFrom(const TournamentPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPlayer::IsInitialized() const {

  return true;
}

void TournamentPlayer::Swap(TournamentPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_nick_, other->player_nick_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_dob_, other->player_dob_);
    std::swap(player_flag_, other->player_flag_);
    std::swap(player_location_, other->player_location_);
    std::swap(player_desc_, other->player_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentPlayer_descriptor_;
  metadata.reflection = TournamentPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentTeam::kTeamIdFieldNumber;
const int TournamentTeam::kTeamTagFieldNumber;
const int TournamentTeam::kTeamFlagFieldNumber;
const int TournamentTeam::kTeamNameFieldNumber;
const int TournamentTeam::kPlayersFieldNumber;
#endif  // !_MSC_VER

TournamentTeam::TournamentTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentTeam::InitAsDefaultInstance() {
}

TournamentTeam::TournamentTeam(const TournamentTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentTeam::~TournamentTeam() {
  SharedDtor();
}

void TournamentTeam::SharedDtor() {
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_tag_;
  }
  if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_flag_;
  }
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentTeam_descriptor_;
}

const TournamentTeam& TournamentTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

TournamentTeam* TournamentTeam::default_instance_ = NULL;

TournamentTeam* TournamentTeam::New() const {
  return new TournamentTeam;
}

void TournamentTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    if (has_team_tag()) {
      if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
        team_tag_->clear();
      }
    }
    if (has_team_flag()) {
      if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
        team_flag_->clear();
      }
    }
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_flag;
        break;
      }

      // optional string team_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_flag().data(), this->team_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .TournamentPlayer players = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional string team_tag = 2;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_tag(), output);
  }

  // optional string team_flag = 3;
  if (has_team_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_flag().data(), this->team_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_flag(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_name(), output);
  }

  // repeated .TournamentPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_tag = 2;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_tag(), target);
  }

  // optional string team_flag = 3;
  if (has_team_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_flag().data(), this->team_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_flag(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // repeated .TournamentPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional string team_tag = 2;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_flag = 3;
    if (has_team_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_flag());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  // repeated .TournamentPlayer players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentTeam::MergeFrom(const TournamentTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_tag()) {
      set_team_tag(from.team_tag());
    }
    if (from.has_team_flag()) {
      set_team_flag(from.team_flag());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentTeam::CopyFrom(const TournamentTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentTeam::IsInitialized() const {

  return true;
}

void TournamentTeam::Swap(TournamentTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_tag_, other->team_tag_);
    std::swap(team_flag_, other->team_flag_);
    std::swap(team_name_, other->team_name_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentTeam_descriptor_;
  metadata.reflection = TournamentTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kMapidFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kTeamIdCtFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  team_id_ct_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_;
}

const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::New() const {
  return new CDataGCCStrike15_v2_TournamentMatchDraft_Entry;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    team_id_ct_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id_ct;
        break;
      }

      // optional int32 team_id_ct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_ct_)));
          set_has_team_id_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id_ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id_ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 team_id_ct = 2;
    if (has_team_id_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentMatchDraft_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_team_id_ct()) {
      set_team_id_ct(from.team_id_ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(team_id_ct_, other->team_id_ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventStageIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId0FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCountFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCurrentFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdStartFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdVeto1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdPicknFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kDraftsFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_stage_id_ = 0;
  team_id_0_ = 0;
  team_id_1_ = 0;
  maps_count_ = 0;
  maps_current_ = 0;
  team_id_start_ = 0;
  team_id_veto1_ = 0;
  team_id_pickn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentMatchDraft::~CDataGCCStrike15_v2_TournamentMatchDraft() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_;
}

const CDataGCCStrike15_v2_TournamentMatchDraft& CDataGCCStrike15_v2_TournamentMatchDraft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentMatchDraft* CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentMatchDraft* CDataGCCStrike15_v2_TournamentMatchDraft::New() const {
  return new CDataGCCStrike15_v2_TournamentMatchDraft;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    event_stage_id_ = 0;
    team_id_0_ = 0;
    team_id_1_ = 0;
    maps_count_ = 0;
    maps_current_ = 0;
    team_id_start_ = 0;
    team_id_veto1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team_id_pickn_ = 0;
  }
  drafts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_stage_id;
        break;
      }

      // optional int32 event_stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
          set_has_event_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id_0;
        break;
      }

      // optional int32 team_id_0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_0_)));
          set_has_team_id_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id_1;
        break;
      }

      // optional int32 team_id_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_1_)));
          set_has_team_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maps_count;
        break;
      }

      // optional int32 maps_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maps_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_count_)));
          set_has_maps_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maps_current;
        break;
      }

      // optional int32 maps_current = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maps_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_current_)));
          set_has_maps_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_id_start;
        break;
      }

      // optional int32 team_id_start = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_start_)));
          set_has_team_id_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team_id_veto1;
        break;
      }

      // optional int32 team_id_veto1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_veto1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_veto1_)));
          set_has_team_id_veto1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_team_id_pickn;
        break;
      }

      // optional int32 team_id_pickn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_pickn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_pickn_)));
          set_has_team_id_pickn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_drafts;
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drafts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drafts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_drafts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 event_stage_id = 2;
  if (has_event_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_stage_id(), output);
  }

  // optional int32 team_id_0 = 3;
  if (has_team_id_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id_0(), output);
  }

  // optional int32 team_id_1 = 4;
  if (has_team_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_id_1(), output);
  }

  // optional int32 maps_count = 5;
  if (has_maps_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maps_count(), output);
  }

  // optional int32 maps_current = 6;
  if (has_maps_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maps_current(), output);
  }

  // optional int32 team_id_start = 7;
  if (has_team_id_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->team_id_start(), output);
  }

  // optional int32 team_id_veto1 = 8;
  if (has_team_id_veto1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->team_id_veto1(), output);
  }

  // optional int32 team_id_pickn = 9;
  if (has_team_id_pickn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->team_id_pickn(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (int i = 0; i < this->drafts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->drafts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 event_stage_id = 2;
  if (has_event_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_stage_id(), target);
  }

  // optional int32 team_id_0 = 3;
  if (has_team_id_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id_0(), target);
  }

  // optional int32 team_id_1 = 4;
  if (has_team_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_id_1(), target);
  }

  // optional int32 maps_count = 5;
  if (has_maps_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maps_count(), target);
  }

  // optional int32 maps_current = 6;
  if (has_maps_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maps_current(), target);
  }

  // optional int32 team_id_start = 7;
  if (has_team_id_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->team_id_start(), target);
  }

  // optional int32 team_id_veto1 = 8;
  if (has_team_id_veto1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->team_id_veto1(), target);
  }

  // optional int32 team_id_pickn = 9;
  if (has_team_id_pickn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->team_id_pickn(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (int i = 0; i < this->drafts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->drafts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentMatchDraft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 event_stage_id = 2;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

    // optional int32 team_id_0 = 3;
    if (has_team_id_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_0());
    }

    // optional int32 team_id_1 = 4;
    if (has_team_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_1());
    }

    // optional int32 maps_count = 5;
    if (has_maps_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_count());
    }

    // optional int32 maps_current = 6;
    if (has_maps_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_current());
    }

    // optional int32 team_id_start = 7;
    if (has_team_id_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_start());
    }

    // optional int32 team_id_veto1 = 8;
    if (has_team_id_veto1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_veto1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 team_id_pickn = 9;
    if (has_team_id_pickn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_pickn());
    }

  }
  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  total_size += 1 * this->drafts_size();
  for (int i = 0; i < this->drafts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drafts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentMatchDraft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
  GOOGLE_CHECK_NE(&from, this);
  drafts_.MergeFrom(from.drafts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_stage_id()) {
      set_event_stage_id(from.event_stage_id());
    }
    if (from.has_team_id_0()) {
      set_team_id_0(from.team_id_0());
    }
    if (from.has_team_id_1()) {
      set_team_id_1(from.team_id_1());
    }
    if (from.has_maps_count()) {
      set_maps_count(from.maps_count());
    }
    if (from.has_maps_current()) {
      set_maps_current(from.maps_current());
    }
    if (from.has_team_id_start()) {
      set_team_id_start(from.team_id_start());
    }
    if (from.has_team_id_veto1()) {
      set_team_id_veto1(from.team_id_veto1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team_id_pickn()) {
      set_team_id_pickn(from.team_id_pickn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Swap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_stage_id_, other->event_stage_id_);
    std::swap(team_id_0_, other->team_id_0_);
    std::swap(team_id_1_, other->team_id_1_);
    std::swap(maps_count_, other->maps_count_);
    std::swap(maps_current_, other->maps_current_);
    std::swap(team_id_start_, other->team_id_start_);
    std::swap(team_id_veto1_, other->team_id_veto1_);
    std::swap(team_id_pickn_, other->team_id_pickn_);
    drafts_.Swap(&other->drafts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentMatchDraft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPreMatchInfoData_TeamStats::kMatchInfoIdxtxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTeamsFieldNumber;
#endif  // !_MSC_VER

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPreMatchInfoData_TeamStats::InitAsDefaultInstance() {
}

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::SharedCtor() {
  _cached_size_ = 0;
  match_info_idxtxt_ = 0;
  match_info_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPreMatchInfoData_TeamStats::~CPreMatchInfoData_TeamStats() {
  SharedDtor();
}

void CPreMatchInfoData_TeamStats::SharedDtor() {
  if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
    delete match_info_txt_;
  }
  if (this != default_instance_) {
  }
}

void CPreMatchInfoData_TeamStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPreMatchInfoData_TeamStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPreMatchInfoData_TeamStats_descriptor_;
}

const CPreMatchInfoData_TeamStats& CPreMatchInfoData_TeamStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CPreMatchInfoData_TeamStats* CPreMatchInfoData_TeamStats::default_instance_ = NULL;

CPreMatchInfoData_TeamStats* CPreMatchInfoData_TeamStats::New() const {
  return new CPreMatchInfoData_TeamStats;
}

void CPreMatchInfoData_TeamStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_info_idxtxt_ = 0;
    if (has_match_info_txt()) {
      if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
        match_info_txt_->clear();
      }
    }
  }
  match_info_teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPreMatchInfoData_TeamStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 match_info_idxtxt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_info_idxtxt_)));
          set_has_match_info_idxtxt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match_info_txt;
        break;
      }

      // optional string match_info_txt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_info_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_info_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_info_txt().data(), this->match_info_txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_info_teams;
        break;
      }

      // repeated string match_info_teams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_info_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_match_info_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_info_teams(this->match_info_teams_size() - 1).data(),
            this->match_info_teams(this->match_info_teams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_info_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPreMatchInfoData_TeamStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 match_info_idxtxt = 1;
  if (has_match_info_idxtxt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_info_idxtxt(), output);
  }

  // optional string match_info_txt = 2;
  if (has_match_info_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_txt().data(), this->match_info_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->match_info_txt(), output);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0; i < this->match_info_teams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->match_info_teams(i).data(), this->match_info_teams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->match_info_teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPreMatchInfoData_TeamStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 match_info_idxtxt = 1;
  if (has_match_info_idxtxt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_info_idxtxt(), target);
  }

  // optional string match_info_txt = 2;
  if (has_match_info_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_txt().data(), this->match_info_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_info_txt(), target);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0; i < this->match_info_teams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_teams(i).data(), this->match_info_teams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->match_info_teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPreMatchInfoData_TeamStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 match_info_idxtxt = 1;
    if (has_match_info_idxtxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_info_idxtxt());
    }

    // optional string match_info_txt = 2;
    if (has_match_info_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_info_txt());
    }

  }
  // repeated string match_info_teams = 3;
  total_size += 1 * this->match_info_teams_size();
  for (int i = 0; i < this->match_info_teams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->match_info_teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPreMatchInfoData_TeamStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPreMatchInfoData_TeamStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPreMatchInfoData_TeamStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPreMatchInfoData_TeamStats::MergeFrom(const CPreMatchInfoData_TeamStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_info_teams_.MergeFrom(from.match_info_teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_info_idxtxt()) {
      set_match_info_idxtxt(from.match_info_idxtxt());
    }
    if (from.has_match_info_txt()) {
      set_match_info_txt(from.match_info_txt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPreMatchInfoData_TeamStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::CopyFrom(const CPreMatchInfoData_TeamStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData_TeamStats::IsInitialized() const {

  return true;
}

void CPreMatchInfoData_TeamStats::Swap(CPreMatchInfoData_TeamStats* other) {
  if (other != this) {
    std::swap(match_info_idxtxt_, other->match_info_idxtxt_);
    std::swap(match_info_txt_, other->match_info_txt_);
    match_info_teams_.Swap(&other->match_info_teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPreMatchInfoData_TeamStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPreMatchInfoData_TeamStats_descriptor_;
  metadata.reflection = CPreMatchInfoData_TeamStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CPreMatchInfoData::kPredictionsPctFieldNumber;
const int CPreMatchInfoData::kDraftFieldNumber;
const int CPreMatchInfoData::kStatsFieldNumber;
const int CPreMatchInfoData::kWinsFieldNumber;
#endif  // !_MSC_VER

CPreMatchInfoData::CPreMatchInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPreMatchInfoData::InitAsDefaultInstance() {
  draft_ = const_cast< ::CDataGCCStrike15_v2_TournamentMatchDraft*>(&::CDataGCCStrike15_v2_TournamentMatchDraft::default_instance());
}

CPreMatchInfoData::CPreMatchInfoData(const CPreMatchInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPreMatchInfoData::SharedCtor() {
  _cached_size_ = 0;
  predictions_pct_ = 0;
  draft_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPreMatchInfoData::~CPreMatchInfoData() {
  SharedDtor();
}

void CPreMatchInfoData::SharedDtor() {
  if (this != default_instance_) {
    delete draft_;
  }
}

void CPreMatchInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPreMatchInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPreMatchInfoData_descriptor_;
}

const CPreMatchInfoData& CPreMatchInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CPreMatchInfoData* CPreMatchInfoData::default_instance_ = NULL;

CPreMatchInfoData* CPreMatchInfoData::New() const {
  return new CPreMatchInfoData;
}

void CPreMatchInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    predictions_pct_ = 0;
    if (has_draft()) {
      if (draft_ != NULL) draft_->::CDataGCCStrike15_v2_TournamentMatchDraft::Clear();
    }
  }
  stats_.Clear();
  wins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPreMatchInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 predictions_pct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predictions_pct_)));
          set_has_predictions_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draft;
        break;
      }

      // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draft()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        break;
      }

      // repeated .CPreMatchInfoData.TeamStats stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        if (input->ExpectTag(48)) goto parse_wins;
        break;
      }

      // repeated int32 wins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_wins())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wins())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wins;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPreMatchInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 predictions_pct = 1;
  if (has_predictions_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->predictions_pct(), output);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (has_draft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->draft(), output);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats(i), output);
  }

  // repeated int32 wins = 6;
  for (int i = 0; i < this->wins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->wins(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPreMatchInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 predictions_pct = 1;
  if (has_predictions_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->predictions_pct(), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (has_draft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->draft(), target);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stats(i), target);
  }

  // repeated int32 wins = 6;
  for (int i = 0; i < this->wins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->wins(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPreMatchInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 predictions_pct = 1;
    if (has_predictions_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predictions_pct());
    }

    // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
    if (has_draft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draft());
    }

  }
  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  // repeated int32 wins = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->wins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wins(i));
    }
    total_size += 1 * this->wins_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPreMatchInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPreMatchInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPreMatchInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPreMatchInfoData::MergeFrom(const CPreMatchInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  wins_.MergeFrom(from.wins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predictions_pct()) {
      set_predictions_pct(from.predictions_pct());
    }
    if (from.has_draft()) {
      mutable_draft()->::CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(from.draft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPreMatchInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData::CopyFrom(const CPreMatchInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData::IsInitialized() const {

  return true;
}

void CPreMatchInfoData::Swap(CPreMatchInfoData* other) {
  if (other != this) {
    std::swap(predictions_pct_, other->predictions_pct_);
    std::swap(draft_, other->draft_);
    stats_.Swap(&other->stats_);
    wins_.Swap(&other->wins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPreMatchInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPreMatchInfoData_descriptor_;
  metadata.reflection = CPreMatchInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kServerVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kFlagsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kRankingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyPubFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPartyIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kWhitelistFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvMasterSteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentEventFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentTeamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentCastersAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvRelaySteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPreMatchDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kRtime32EventStartFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvControlFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance() {
  tournament_event_ = const_cast< ::TournamentEvent*>(&::TournamentEvent::default_instance());
  pre_match_data_ = const_cast< ::CPreMatchInfoData*>(&::CPreMatchInfoData::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  server_version_ = 0u;
  flags_ = 0u;
  encryption_key_ = GOOGLE_ULONGLONG(0);
  encryption_key_pub_ = GOOGLE_ULONGLONG(0);
  tv_master_steamid_ = GOOGLE_ULONGLONG(0);
  tournament_event_ = NULL;
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  pre_match_data_ = NULL;
  rtime32_event_start_ = 0u;
  tv_control_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedDtor() {
  if (this != default_instance_) {
    delete tournament_event_;
    delete pre_match_data_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    game_type_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    server_version_ = 0u;
    flags_ = 0u;
    encryption_key_ = GOOGLE_ULONGLONG(0);
    encryption_key_pub_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    tv_master_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_tournament_event()) {
      if (tournament_event_ != NULL) tournament_event_->::TournamentEvent::Clear();
    }
    tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_pre_match_data()) {
      if (pre_match_data_ != NULL) pre_match_data_->::CPreMatchInfoData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rtime32_event_start_ = 0u;
    tv_control_ = 0u;
  }
  account_ids_.Clear();
  rankings_.Clear();
  party_ids_.Clear();
  whitelist_.Clear();
  tournament_teams_.Clear();
  tournament_casters_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rankings;
        break;
      }

      // repeated .PlayerRankingInfo rankings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rankings;
        if (input->ExpectTag(48)) goto parse_encryption_key;
        break;
      }

      // optional uint64 encryption_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encryption_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_)));
          set_has_encryption_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_encryption_key_pub;
        break;
      }

      // optional uint64 encryption_key_pub = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encryption_key_pub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_pub_)));
          set_has_encryption_key_pub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_party_ids;
        break;
      }

      // repeated uint32 party_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_party_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_party_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_party_ids;
        if (input->ExpectTag(74)) goto parse_whitelist;
        break;
      }

      // repeated .IpAddressMask whitelist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whitelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_whitelist;
        if (input->ExpectTag(80)) goto parse_tv_master_steamid;
        break;
      }

      // optional uint64 tv_master_steamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_master_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_master_steamid_)));
          set_has_tv_master_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tournament_event;
        break;
      }

      // optional .TournamentEvent tournament_event = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tournament_teams;
        break;
      }

      // repeated .TournamentTeam tournament_teams = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournament_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tournament_teams;
        if (input->ExpectTag(104)) goto parse_tournament_casters_account_ids;
        break;
      }

      // repeated uint32 tournament_casters_account_ids = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournament_casters_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_tournament_casters_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tournament_casters_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tournament_casters_account_ids;
        if (input->ExpectTag(112)) goto parse_tv_relay_steamid;
        break;
      }

      // optional uint64 tv_relay_steamid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_relay_steamid_)));
          set_has_tv_relay_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pre_match_data;
        break;
      }

      // optional .CPreMatchInfoData pre_match_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_match_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rtime32_event_start;
        break;
      }

      // optional uint32 rtime32_event_start = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_event_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_event_start_)));
          set_has_rtime32_event_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tv_control;
        break;
      }

      // optional uint32 tv_control = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_control_)));
          set_has_tv_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional uint32 server_version = 4;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_version(), output);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rankings(i), output);
  }

  // optional uint64 encryption_key = 6;
  if (has_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->encryption_key(), output);
  }

  // optional uint64 encryption_key_pub = 7;
  if (has_encryption_key_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->encryption_key_pub(), output);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0; i < this->party_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->party_ids(i), output);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->whitelist(i), output);
  }

  // optional uint64 tv_master_steamid = 10;
  if (has_tv_master_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->tv_master_steamid(), output);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (has_tournament_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tournament_event(), output);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tournament_teams(i), output);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->tournament_casters_account_ids(i), output);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (has_tv_relay_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tv_relay_steamid(), output);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (has_pre_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pre_match_data(), output);
  }

  // optional uint32 rtime32_event_start = 16;
  if (has_rtime32_event_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->rtime32_event_start(), output);
  }

  // optional uint32 tv_control = 17;
  if (has_tv_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tv_control(), output);
  }

  // optional uint32 flags = 18;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional uint32 server_version = 4;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_version(), target);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rankings(i), target);
  }

  // optional uint64 encryption_key = 6;
  if (has_encryption_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->encryption_key(), target);
  }

  // optional uint64 encryption_key_pub = 7;
  if (has_encryption_key_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->encryption_key_pub(), target);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0; i < this->party_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->party_ids(i), target);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (int i = 0; i < this->whitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->whitelist(i), target);
  }

  // optional uint64 tv_master_steamid = 10;
  if (has_tv_master_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->tv_master_steamid(), target);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (has_tournament_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tournament_event(), target);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tournament_teams(i), target);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->tournament_casters_account_ids(i), target);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (has_tv_relay_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tv_relay_steamid(), target);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (has_pre_match_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->pre_match_data(), target);
  }

  // optional uint32 rtime32_event_start = 16;
  if (has_rtime32_event_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->rtime32_event_start(), target);
  }

  // optional uint32 tv_control = 17;
  if (has_tv_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tv_control(), target);
  }

  // optional uint32 flags = 18;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 server_version = 4;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 flags = 18;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint64 encryption_key = 6;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key());
    }

    // optional uint64 encryption_key_pub = 7;
    if (has_encryption_key_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key_pub());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint64 tv_master_steamid = 10;
    if (has_tv_master_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_master_steamid());
    }

    // optional .TournamentEvent tournament_event = 11;
    if (has_tournament_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournament_event());
    }

    // optional uint64 tv_relay_steamid = 14;
    if (has_tv_relay_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_relay_steamid());
    }

    // optional .CPreMatchInfoData pre_match_data = 15;
    if (has_pre_match_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_match_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 rtime32_event_start = 16;
    if (has_rtime32_event_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_event_start());
    }

    // optional uint32 tv_control = 17;
    if (has_tv_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_control());
    }

  }
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  // repeated .PlayerRankingInfo rankings = 5;
  total_size += 1 * this->rankings_size();
  for (int i = 0; i < this->rankings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankings(i));
  }

  // repeated uint32 party_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->party_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->party_ids(i));
    }
    total_size += 1 * this->party_ids_size() + data_size;
  }

  // repeated .IpAddressMask whitelist = 9;
  total_size += 1 * this->whitelist_size();
  for (int i = 0; i < this->whitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whitelist(i));
  }

  // repeated .TournamentTeam tournament_teams = 12;
  total_size += 1 * this->tournament_teams_size();
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournament_teams(i));
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tournament_casters_account_ids(i));
    }
    total_size += 1 * this->tournament_casters_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  rankings_.MergeFrom(from.rankings_);
  party_ids_.MergeFrom(from.party_ids_);
  whitelist_.MergeFrom(from.whitelist_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  tournament_casters_account_ids_.MergeFrom(from.tournament_casters_account_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_encryption_key()) {
      set_encryption_key(from.encryption_key());
    }
    if (from.has_encryption_key_pub()) {
      set_encryption_key_pub(from.encryption_key_pub());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_tv_master_steamid()) {
      set_tv_master_steamid(from.tv_master_steamid());
    }
    if (from.has_tournament_event()) {
      mutable_tournament_event()->::TournamentEvent::MergeFrom(from.tournament_event());
    }
    if (from.has_tv_relay_steamid()) {
      set_tv_relay_steamid(from.tv_relay_steamid());
    }
    if (from.has_pre_match_data()) {
      mutable_pre_match_data()->::CPreMatchInfoData::MergeFrom(from.pre_match_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rtime32_event_start()) {
      set_rtime32_event_start(from.rtime32_event_start());
    }
    if (from.has_tv_control()) {
      set_tv_control(from.tv_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(game_type_, other->game_type_);
    std::swap(match_id_, other->match_id_);
    std::swap(server_version_, other->server_version_);
    std::swap(flags_, other->flags_);
    rankings_.Swap(&other->rankings_);
    std::swap(encryption_key_, other->encryption_key_);
    std::swap(encryption_key_pub_, other->encryption_key_pub_);
    party_ids_.Swap(&other->party_ids_);
    whitelist_.Swap(&other->whitelist_);
    std::swap(tv_master_steamid_, other->tv_master_steamid_);
    std::swap(tournament_event_, other->tournament_event_);
    tournament_teams_.Swap(&other->tournament_teams_);
    tournament_casters_account_ids_.Swap(&other->tournament_casters_account_ids_);
    std::swap(tv_relay_steamid_, other->tv_relay_steamid_);
    std::swap(pre_match_data_, other->pre_match_data_);
    std::swap(rtime32_event_start_, other->rtime32_event_start_);
    std::swap(tv_control_, other->tv_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankRevealAll::kSecondsTillShutdownFieldNumber;
const int CCSUsrMsg_ServerRankRevealAll::kReservationFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankRevealAll::InitAsDefaultInstance() {
  reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
}

CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(const CCSUsrMsg_ServerRankRevealAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankRevealAll::SharedCtor() {
  _cached_size_ = 0;
  seconds_till_shutdown_ = 0;
  reservation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankRevealAll::~CCSUsrMsg_ServerRankRevealAll() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankRevealAll::SharedDtor() {
  if (this != default_instance_) {
    delete reservation_;
  }
}

void CCSUsrMsg_ServerRankRevealAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankRevealAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankRevealAll_descriptor_;
}

const CCSUsrMsg_ServerRankRevealAll& CCSUsrMsg_ServerRankRevealAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ServerRankRevealAll* CCSUsrMsg_ServerRankRevealAll::default_instance_ = NULL;

CCSUsrMsg_ServerRankRevealAll* CCSUsrMsg_ServerRankRevealAll::New() const {
  return new CCSUsrMsg_ServerRankRevealAll;
}

void CCSUsrMsg_ServerRankRevealAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_till_shutdown_ = 0;
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankRevealAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seconds_till_shutdown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_till_shutdown_)));
          set_has_seconds_till_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reservation;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankRevealAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seconds_till_shutdown = 1;
  if (has_seconds_till_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds_till_shutdown(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reservation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankRevealAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seconds_till_shutdown = 1;
  if (has_seconds_till_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds_till_shutdown(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reservation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankRevealAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seconds_till_shutdown = 1;
    if (has_seconds_till_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_till_shutdown());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankRevealAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankRevealAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankRevealAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankRevealAll::MergeFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds_till_shutdown()) {
      set_seconds_till_shutdown(from.seconds_till_shutdown());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankRevealAll::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ServerRankRevealAll::Swap(CCSUsrMsg_ServerRankRevealAll* other) {
  if (other != this) {
    std::swap(seconds_till_shutdown_, other->seconds_till_shutdown_);
    std::swap(reservation_, other->reservation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankRevealAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankRevealAll_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankRevealAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ResetHud::kResetFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ResetHud::InitAsDefaultInstance() {
}

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(const CCSUsrMsg_ResetHud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ResetHud::SharedCtor() {
  _cached_size_ = 0;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ResetHud::~CCSUsrMsg_ResetHud() {
  SharedDtor();
}

void CCSUsrMsg_ResetHud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ResetHud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ResetHud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ResetHud_descriptor_;
}

const CCSUsrMsg_ResetHud& CCSUsrMsg_ResetHud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ResetHud* CCSUsrMsg_ResetHud::default_instance_ = NULL;

CCSUsrMsg_ResetHud* CCSUsrMsg_ResetHud::New() const {
  return new CCSUsrMsg_ResetHud;
}

void CCSUsrMsg_ResetHud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ResetHud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ResetHud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool reset = 1;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ResetHud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool reset = 1;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ResetHud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reset = 1;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ResetHud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ResetHud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ResetHud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ResetHud::MergeFrom(const CCSUsrMsg_ResetHud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ResetHud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ResetHud::CopyFrom(const CCSUsrMsg_ResetHud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ResetHud::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ResetHud::Swap(CCSUsrMsg_ResetHud* other) {
  if (other != this) {
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ResetHud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ResetHud_descriptor_;
  metadata.reflection = CCSUsrMsg_ResetHud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_GameTitle::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_GameTitle::InitAsDefaultInstance() {
}

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(const CCSUsrMsg_GameTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_GameTitle::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_GameTitle::~CCSUsrMsg_GameTitle() {
  SharedDtor();
}

void CCSUsrMsg_GameTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_GameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_GameTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_GameTitle_descriptor_;
}

const CCSUsrMsg_GameTitle& CCSUsrMsg_GameTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_GameTitle* CCSUsrMsg_GameTitle::default_instance_ = NULL;

CCSUsrMsg_GameTitle* CCSUsrMsg_GameTitle::New() const {
  return new CCSUsrMsg_GameTitle;
}

void CCSUsrMsg_GameTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_GameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_GameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_GameTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_GameTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_GameTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_GameTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_GameTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_GameTitle::MergeFrom(const CCSUsrMsg_GameTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_GameTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_GameTitle::CopyFrom(const CCSUsrMsg_GameTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GameTitle::IsInitialized() const {

  return true;
}

void CCSUsrMsg_GameTitle::Swap(CCSUsrMsg_GameTitle* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_GameTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_GameTitle_descriptor_;
  metadata.reflection = CCSUsrMsg_GameTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RequestState::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RequestState::InitAsDefaultInstance() {
}

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(const CCSUsrMsg_RequestState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RequestState::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RequestState::~CCSUsrMsg_RequestState() {
  SharedDtor();
}

void CCSUsrMsg_RequestState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RequestState_descriptor_;
}

const CCSUsrMsg_RequestState& CCSUsrMsg_RequestState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_RequestState* CCSUsrMsg_RequestState::default_instance_ = NULL;

CCSUsrMsg_RequestState* CCSUsrMsg_RequestState::New() const {
  return new CCSUsrMsg_RequestState;
}

void CCSUsrMsg_RequestState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RequestState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RequestState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RequestState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RequestState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RequestState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RequestState::MergeFrom(const CCSUsrMsg_RequestState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RequestState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RequestState::CopyFrom(const CCSUsrMsg_RequestState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RequestState::IsInitialized() const {

  return true;
}

void CCSUsrMsg_RequestState::Swap(CCSUsrMsg_RequestState* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RequestState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RequestState_descriptor_;
  metadata.reflection = CCSUsrMsg_RequestState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_StopSpectatorMode::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_StopSpectatorMode::InitAsDefaultInstance() {
}

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(const CCSUsrMsg_StopSpectatorMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_StopSpectatorMode::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_StopSpectatorMode::~CCSUsrMsg_StopSpectatorMode() {
  SharedDtor();
}

void CCSUsrMsg_StopSpectatorMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_StopSpectatorMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_StopSpectatorMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_StopSpectatorMode_descriptor_;
}

const CCSUsrMsg_StopSpectatorMode& CCSUsrMsg_StopSpectatorMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_StopSpectatorMode* CCSUsrMsg_StopSpectatorMode::default_instance_ = NULL;

CCSUsrMsg_StopSpectatorMode* CCSUsrMsg_StopSpectatorMode::New() const {
  return new CCSUsrMsg_StopSpectatorMode;
}

void CCSUsrMsg_StopSpectatorMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_StopSpectatorMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_StopSpectatorMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_StopSpectatorMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_StopSpectatorMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_StopSpectatorMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_StopSpectatorMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_StopSpectatorMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_StopSpectatorMode::MergeFrom(const CCSUsrMsg_StopSpectatorMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const CCSUsrMsg_StopSpectatorMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_StopSpectatorMode::IsInitialized() const {

  return true;
}

void CCSUsrMsg_StopSpectatorMode::Swap(CCSUsrMsg_StopSpectatorMode* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_StopSpectatorMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_StopSpectatorMode_descriptor_;
  metadata.reflection = CCSUsrMsg_StopSpectatorMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DisconnectToLobby::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DisconnectToLobby::InitAsDefaultInstance() {
}

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(const CCSUsrMsg_DisconnectToLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DisconnectToLobby::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DisconnectToLobby::~CCSUsrMsg_DisconnectToLobby() {
  SharedDtor();
}

void CCSUsrMsg_DisconnectToLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DisconnectToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DisconnectToLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DisconnectToLobby_descriptor_;
}

const CCSUsrMsg_DisconnectToLobby& CCSUsrMsg_DisconnectToLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_DisconnectToLobby* CCSUsrMsg_DisconnectToLobby::default_instance_ = NULL;

CCSUsrMsg_DisconnectToLobby* CCSUsrMsg_DisconnectToLobby::New() const {
  return new CCSUsrMsg_DisconnectToLobby;
}

void CCSUsrMsg_DisconnectToLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DisconnectToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DisconnectToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DisconnectToLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DisconnectToLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DisconnectToLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DisconnectToLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DisconnectToLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DisconnectToLobby::MergeFrom(const CCSUsrMsg_DisconnectToLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const CCSUsrMsg_DisconnectToLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisconnectToLobby::IsInitialized() const {

  return true;
}

void CCSUsrMsg_DisconnectToLobby::Swap(CCSUsrMsg_DisconnectToLobby* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DisconnectToLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DisconnectToLobby_descriptor_;
  metadata.reflection = CCSUsrMsg_DisconnectToLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_WarmupHasEnded::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_WarmupHasEnded::InitAsDefaultInstance() {
}

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(const CCSUsrMsg_WarmupHasEnded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_WarmupHasEnded::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_WarmupHasEnded::~CCSUsrMsg_WarmupHasEnded() {
  SharedDtor();
}

void CCSUsrMsg_WarmupHasEnded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_WarmupHasEnded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_WarmupHasEnded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_WarmupHasEnded_descriptor_;
}

const CCSUsrMsg_WarmupHasEnded& CCSUsrMsg_WarmupHasEnded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_WarmupHasEnded* CCSUsrMsg_WarmupHasEnded::default_instance_ = NULL;

CCSUsrMsg_WarmupHasEnded* CCSUsrMsg_WarmupHasEnded::New() const {
  return new CCSUsrMsg_WarmupHasEnded;
}

void CCSUsrMsg_WarmupHasEnded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_WarmupHasEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_WarmupHasEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_WarmupHasEnded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_WarmupHasEnded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_WarmupHasEnded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_WarmupHasEnded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_WarmupHasEnded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_WarmupHasEnded::MergeFrom(const CCSUsrMsg_WarmupHasEnded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const CCSUsrMsg_WarmupHasEnded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WarmupHasEnded::IsInitialized() const {

  return true;
}

void CCSUsrMsg_WarmupHasEnded::Swap(CCSUsrMsg_WarmupHasEnded* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_WarmupHasEnded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_WarmupHasEnded_descriptor_;
  metadata.reflection = CCSUsrMsg_WarmupHasEnded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ClientInfo::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ClientInfo::InitAsDefaultInstance() {
}

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(const CCSUsrMsg_ClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ClientInfo::~CCSUsrMsg_ClientInfo() {
  SharedDtor();
}

void CCSUsrMsg_ClientInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ClientInfo_descriptor_;
}

const CCSUsrMsg_ClientInfo& CCSUsrMsg_ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  return *default_instance_;
}

CCSUsrMsg_ClientInfo* CCSUsrMsg_ClientInfo::default_instance_ = NULL;

CCSUsrMsg_ClientInfo* CCSUsrMsg_ClientInfo::New() const {
  return new CCSUsrMsg_ClientInfo;
}

void CCSUsrMsg_ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ClientInfo::MergeFrom(const CCSUsrMsg_ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ClientInfo::CopyFrom(const CCSUsrMsg_ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ClientInfo::IsInitialized() const {

  return true;
}

void CCSUsrMsg_ClientInfo::Swap(CCSUsrMsg_ClientInfo* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ClientInfo_descriptor_;
  metadata.reflection = CCSUsrMsg_ClientInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
