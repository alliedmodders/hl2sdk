# vim: set ts=2 sw=2 tw=99 noet ft=python: 
import os, sys, shutil

def ResolveEnvPath(env, folder=None):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path
    return None

  if folder:
    head = os.getcwd()
    oldhead = None
    while head != None and head != oldhead:
      path = os.path.join(head, folder)
      if os.path.isdir(path):
        return path
      oldhead = head
      head, tail = os.path.split(head)

  return None

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

class SDKConfig(object):
  def __init__(self):
    self.libs = []
    self.targets = []
    self.target_archs = set()

    if builder.options.targets:
      target_archs = builder.options.targets.split(',')
    else:
      target_archs = ['x86', 'x86_64']

    for arch in target_archs:
        try:
            cxx = builder.DetectCxx(target_arch = arch)
            self.target_archs.add(cxx.target.arch)
        except Exception as e:
            if builder.options.targets:
                raise
            print('Skipping target {}: {}'.format(arch, e))
            continue
        self.targets.append(cxx)

    if not self.targets:
      raise Exception('No suitable C/C++ compiler was found.')
  
  @property
  def tag(self):
    if builder.options.debug == '1':
      return 'Debug'
    return 'Release'
  
  def configure_cxx(self, cxx):
    if cxx.like('gcc'):
      self.configure_gcc(cxx)
    elif cxx.family == 'msvc':
      self.configure_msvc(cxx)

    # Optimization
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']

    # Debugging
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']

    if cxx.target.arch == 'x86_64':
      cxx.defines += ['X64BITS']

    # Platform-specifics
    if cxx.target.platform == 'linux':
      self.configure_linux(cxx)
    elif cxx.target.platform == 'windows':
      self.configure_windows(cxx)
  
  def configure_gcc(self, cxx):
    cxx.cflags += [
      '-Wall',
      '-Werror',
	  '-Wno-delete-non-virtual-dtor',
	  '-Wno-narrowing'
    ]

    cxx.cxxflags += [
      '-std=c++17'
    ]

    if builder.options.opt == '1':
      cxx.cflags += ['-O3']
    return

  def configure_msvc(self, cxx):

    cxx.cxxflags += [
      '/std:c++17',
      '/WX'
    ]

    return
  
  def configure_linux(self, cxx):
    cxx.defines += ['_LINUX', 'POSIX']
    return
  
  def configure_windows(self, cxx):
    cxx.defines += ['_WINDOWS']
    if cxx.target.arch == 'x86':
      cxx.defines += ['WIN32']
    elif cxx.target.arch == 'x86_64':
      cxx.defines += ['WIN64']
    return
  
  def configure(self):
    for cxx in self.targets:
      self.configure_cxx(cxx)

  def ConfigureLibrary(self, project, compiler, context):
    binary = project.Configure(compiler, project.name, '{0} - {1}'.format(self.tag, compiler.target.arch))
    binary.compiler.cxxincludes += [
      os.path.join(context.currentSourcePath)
    ]
    return binary

HL2SDK = SDKConfig()
HL2SDK.configure()

BuildScripts = ['mathlib/AMBuilder', 'tier1/AMBuilder']
builder.Build(BuildScripts, { 'HL2SDK': HL2SDK })